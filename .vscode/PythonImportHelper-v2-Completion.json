[
    {
        "label": "pymysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymysql",
        "description": "pymysql",
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "pymysql.cursors",
        "description": "pymysql.cursors",
        "isExtraImport": true,
        "detail": "pymysql.cursors",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "pymysql.cursors",
        "description": "pymysql.cursors",
        "isExtraImport": true,
        "detail": "pymysql.cursors",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "pymysql.cursors",
        "description": "pymysql.cursors",
        "isExtraImport": true,
        "detail": "pymysql.cursors",
        "documentation": {}
    },
    {
        "label": "logger_v",
        "importPath": "Database_Prods.DB_BMS.decorators.generate_logs",
        "description": "Database_Prods.DB_BMS.decorators.generate_logs",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.decorators.generate_logs",
        "documentation": {}
    },
    {
        "label": "logger_v",
        "importPath": "Database_Prods.DB_BMS.decorators.generate_logs",
        "description": "Database_Prods.DB_BMS.decorators.generate_logs",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.decorators.generate_logs",
        "documentation": {}
    },
    {
        "label": "logger_v",
        "importPath": "Database_Prods.DB_BMS.decorators.generate_logs",
        "description": "Database_Prods.DB_BMS.decorators.generate_logs",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.decorators.generate_logs",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "BankController",
        "importPath": "Database_Prods.DB_BMS.controllers.bank_controller",
        "description": "Database_Prods.DB_BMS.controllers.bank_controller",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.controllers.bank_controller",
        "documentation": {}
    },
    {
        "label": "TransactionController",
        "importPath": "Database_Prods.DB_BMS.controllers.transaction_controller",
        "description": "Database_Prods.DB_BMS.controllers.transaction_controller",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.controllers.transaction_controller",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "importPath": "Database_Prods.DB_BMS.db.database",
        "description": "Database_Prods.DB_BMS.db.database",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.db.database",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "importPath": "Database_Prods.DB_BMS.db.database",
        "description": "Database_Prods.DB_BMS.db.database",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.db.database",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "importPath": "Database_Prods.DB_BMS.db.database",
        "description": "Database_Prods.DB_BMS.db.database",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.db.database",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "importPath": "Database_Prods.DB_BMS.db.database",
        "description": "Database_Prods.DB_BMS.db.database",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.db.database",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "importPath": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "description": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundError",
        "importPath": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "description": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "importPath": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "description": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "Database_Prods.DB_BMS.models.account",
        "description": "Database_Prods.DB_BMS.models.account",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.models.account",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "Database_Prods.DB_BMS.models.log",
        "description": "Database_Prods.DB_BMS.models.log",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.models.log",
        "documentation": {}
    },
    {
        "label": "Transaction",
        "importPath": "Database_Prods.DB_BMS.models.transaction",
        "description": "Database_Prods.DB_BMS.models.transaction",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.models.transaction",
        "documentation": {}
    },
    {
        "label": "login_banking_system",
        "importPath": "Database_Prods.DB_BMS.decorators.login_decorator",
        "description": "Database_Prods.DB_BMS.decorators.login_decorator",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.decorators.login_decorator",
        "documentation": {}
    },
    {
        "label": "route",
        "importPath": "Database_Prods.DB_BMS.routes.url",
        "description": "Database_Prods.DB_BMS.routes.url",
        "isExtraImport": true,
        "detail": "Database_Prods.DB_BMS.routes.url",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "winsound",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winsound",
        "description": "winsound",
        "detail": "winsound",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "gtts",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gtts",
        "description": "gtts",
        "detail": "gtts",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound3",
        "description": "playsound3",
        "isExtraImport": true,
        "detail": "playsound3",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Bank",
        "importPath": "bank",
        "description": "bank",
        "isExtraImport": true,
        "detail": "bank",
        "documentation": {}
    },
    {
        "label": "Bank",
        "importPath": "bank",
        "description": "bank",
        "isExtraImport": true,
        "detail": "bank",
        "documentation": {}
    },
    {
        "label": "Bank",
        "importPath": "bank",
        "description": "bank",
        "isExtraImport": true,
        "detail": "bank",
        "documentation": {}
    },
    {
        "label": "Bank",
        "importPath": "bank",
        "description": "bank",
        "isExtraImport": true,
        "detail": "bank",
        "documentation": {}
    },
    {
        "label": "InvalidInitialBalanceError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountAlreadyExistsError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidInitialBalanceError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidInitialBalanceError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountAlreadyExistsError",
        "importPath": "utility.exceptions",
        "description": "utility.exceptions",
        "isExtraImport": true,
        "detail": "utility.exceptions",
        "documentation": {}
    },
    {
        "label": "Transactions",
        "importPath": "transactions",
        "description": "transactions",
        "isExtraImport": true,
        "detail": "transactions",
        "documentation": {}
    },
    {
        "label": "Transactions",
        "importPath": "transactions",
        "description": "transactions",
        "isExtraImport": true,
        "detail": "transactions",
        "documentation": {}
    },
    {
        "label": "Transactions",
        "importPath": "transactions",
        "description": "transactions",
        "isExtraImport": true,
        "detail": "transactions",
        "documentation": {}
    },
    {
        "label": "Transactions",
        "importPath": "transactions",
        "description": "transactions",
        "isExtraImport": true,
        "detail": "transactions",
        "documentation": {}
    },
    {
        "label": "urls",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "urls",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "urls",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "account",
        "description": "account",
        "isExtraImport": true,
        "detail": "account",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "account",
        "description": "account",
        "isExtraImport": true,
        "detail": "account",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "account",
        "description": "account",
        "isExtraImport": true,
        "detail": "account",
        "documentation": {}
    },
    {
        "label": "InvalidInitialBalanceError",
        "importPath": "exceptions",
        "description": "exceptions",
        "isExtraImport": true,
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "importPath": "exceptions",
        "description": "exceptions",
        "isExtraImport": true,
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "Transactions",
        "importPath": "temp.Bank_Utility.transactions",
        "description": "temp.Bank_Utility.transactions",
        "isExtraImport": true,
        "detail": "temp.Bank_Utility.transactions",
        "documentation": {}
    },
    {
        "label": "Transactions",
        "importPath": "temp.Bank_Utility.transactions",
        "description": "temp.Bank_Utility.transactions",
        "isExtraImport": true,
        "detail": "temp.Bank_Utility.transactions",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundError",
        "importPath": "temp.Utility.exceptions",
        "description": "temp.Utility.exceptions",
        "isExtraImport": true,
        "detail": "temp.Utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountAlreadyExistsError",
        "importPath": "temp.Utility.exceptions",
        "description": "temp.Utility.exceptions",
        "isExtraImport": true,
        "detail": "temp.Utility.exceptions",
        "documentation": {}
    },
    {
        "label": "Bank",
        "importPath": "temp.Bank_Utilty.bank",
        "description": "temp.Bank_Utilty.bank",
        "isExtraImport": true,
        "detail": "temp.Bank_Utilty.bank",
        "documentation": {}
    },
    {
        "label": "accounts",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "create_account",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "update_account",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "deposit",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "accounts",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "create_account",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "update_account",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "deposit",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "importPath": "accounts_ops",
        "description": "accounts_ops",
        "isExtraImport": true,
        "detail": "accounts_ops",
        "documentation": {}
    },
    {
        "label": "addition",
        "importPath": "calculator",
        "description": "calculator",
        "isExtraImport": true,
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "subtraction",
        "importPath": "calculator",
        "description": "calculator",
        "isExtraImport": true,
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "multiplication",
        "importPath": "calculator",
        "description": "calculator",
        "isExtraImport": true,
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "calculator",
        "description": "calculator",
        "isExtraImport": true,
        "detail": "calculator",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "Survival_Controller",
        "importPath": "Titanic_Controllers.survival_controller",
        "description": "Titanic_Controllers.survival_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.survival_controller",
        "documentation": {}
    },
    {
        "label": "Demographic_Controller",
        "importPath": "Titanic_Controllers.demographic_controller",
        "description": "Titanic_Controllers.demographic_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.demographic_controller",
        "documentation": {}
    },
    {
        "label": "Financial_Controller",
        "importPath": "Titanic_Controllers.financial_controller",
        "description": "Titanic_Controllers.financial_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.financial_controller",
        "documentation": {}
    },
    {
        "label": "Class_Controller",
        "importPath": "Titanic_Controllers.class_controller",
        "description": "Titanic_Controllers.class_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.class_controller",
        "documentation": {}
    },
    {
        "label": "Additional_Controller",
        "importPath": "Titanic_Controllers.additional_controller",
        "description": "Titanic_Controllers.additional_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.additional_controller",
        "documentation": {}
    },
    {
        "label": "C_Survival",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Demographic",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Financial",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Class",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Additional",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "route",
        "importPath": "Titanic_routes.url",
        "description": "Titanic_routes.url",
        "isExtraImport": true,
        "detail": "Titanic_routes.url",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "Models.data_processor",
        "description": "Models.data_processor",
        "isExtraImport": true,
        "detail": "Models.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "Models.data_processor",
        "description": "Models.data_processor",
        "isExtraImport": true,
        "detail": "Models.data_processor",
        "documentation": {}
    },
    {
        "label": "PlotUtils",
        "importPath": "Utils.plot_utils",
        "description": "Utils.plot_utils",
        "isExtraImport": true,
        "detail": "Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "PlotUtils",
        "importPath": "Utils.plot_utils",
        "description": "Utils.plot_utils",
        "isExtraImport": true,
        "detail": "Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "BayesianRidge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "GaussianNB",
        "importPath": "sklearn.naive_bayes",
        "description": "sklearn.naive_bayes",
        "isExtraImport": true,
        "detail": "sklearn.naive_bayes",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "DataUtils",
        "importPath": "Utils.data_utils",
        "description": "Utils.data_utils",
        "isExtraImport": true,
        "detail": "Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "clean_data",
        "importPath": "Utils.data_utils",
        "description": "Utils.data_utils",
        "isExtraImport": true,
        "detail": "Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "generate_random_scores",
        "importPath": "Utils.data_utils",
        "description": "Utils.data_utils",
        "isExtraImport": true,
        "detail": "Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "AnalysisController",
        "importPath": "Controller.analysis_controller",
        "description": "Controller.analysis_controller",
        "isExtraImport": true,
        "detail": "Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "AnalysisController",
        "importPath": "Controller.analysis_controller",
        "description": "Controller.analysis_controller",
        "isExtraImport": true,
        "detail": "Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "DataProcessorController",
        "importPath": "Controller.analysis_controller",
        "description": "Controller.analysis_controller",
        "isExtraImport": true,
        "detail": "Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "route",
        "importPath": "Routes.analysis_url",
        "description": "Routes.analysis_url",
        "isExtraImport": true,
        "detail": "Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "route",
        "importPath": "Routes.analysis_url",
        "description": "Routes.analysis_url",
        "isExtraImport": true,
        "detail": "Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "importPath": "Decorators.Login_Analysis",
        "description": "Decorators.Login_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "importPath": "Decorators.Login_Analysis",
        "description": "Decorators.Login_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "show_data",
        "importPath": "Controller.group_viewer",
        "description": "Controller.group_viewer",
        "isExtraImport": true,
        "detail": "Controller.group_viewer",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "route",
        "importPath": "Routes.ecomm_urls",
        "description": "Routes.ecomm_urls",
        "isExtraImport": true,
        "detail": "Routes.ecomm_urls",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "View.ecomm_interface",
        "description": "View.ecomm_interface",
        "isExtraImport": true,
        "detail": "View.ecomm_interface",
        "documentation": {}
    },
    {
        "label": "Instructions",
        "importPath": "instructions",
        "description": "instructions",
        "isExtraImport": true,
        "detail": "instructions",
        "documentation": {}
    },
    {
        "label": "questions",
        "importPath": "questions",
        "description": "questions",
        "isExtraImport": true,
        "detail": "questions",
        "documentation": {}
    },
    {
        "label": "save_users_data",
        "importPath": "users",
        "description": "users",
        "isExtraImport": true,
        "detail": "users",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "users",
        "description": "users",
        "isExtraImport": true,
        "detail": "users",
        "documentation": {}
    },
    {
        "label": "add_user",
        "importPath": "users",
        "description": "users",
        "isExtraImport": true,
        "detail": "users",
        "documentation": {}
    },
    {
        "label": "show_users",
        "importPath": "users",
        "description": "users",
        "isExtraImport": true,
        "detail": "users",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "black_jack",
        "importPath": "BLACKJACK",
        "description": "BLACKJACK",
        "isExtraImport": true,
        "detail": "BLACKJACK",
        "documentation": {}
    },
    {
        "label": "black_jack",
        "importPath": "BLACKJACK",
        "description": "BLACKJACK",
        "isExtraImport": true,
        "detail": "BLACKJACK",
        "documentation": {}
    },
    {
        "label": "black_jack",
        "importPath": "BLACKJACK",
        "description": "BLACKJACK",
        "isExtraImport": true,
        "detail": "BLACKJACK",
        "documentation": {}
    },
    {
        "label": "black_jack",
        "importPath": "BLACKJACK",
        "description": "BLACKJACK",
        "isExtraImport": true,
        "detail": "BLACKJACK",
        "documentation": {}
    },
    {
        "label": "KBCGame",
        "importPath": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "description": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "isExtraImport": true,
        "detail": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "TicTacToe",
        "importPath": "TIC_TAC_TOE.tic_tac_toe",
        "description": "TIC_TAC_TOE.tic_tac_toe",
        "isExtraImport": true,
        "detail": "TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "HumanPlayer",
        "importPath": "TIC_TAC_TOE.tic_tac_toe",
        "description": "TIC_TAC_TOE.tic_tac_toe",
        "isExtraImport": true,
        "detail": "TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "ComputerPlayer",
        "importPath": "TIC_TAC_TOE.tic_tac_toe",
        "description": "TIC_TAC_TOE.tic_tac_toe",
        "isExtraImport": true,
        "detail": "TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Hangman",
        "importPath": "HANGMAN.main",
        "description": "HANGMAN.main",
        "isExtraImport": true,
        "detail": "HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "Hangman",
        "importPath": "HANGMAN.main",
        "description": "HANGMAN.main",
        "isExtraImport": true,
        "detail": "HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "Hangman",
        "importPath": "HANGMAN.main",
        "description": "HANGMAN.main",
        "isExtraImport": true,
        "detail": "HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "KBCGame",
        "importPath": "KBC.kaun_banega_crorepati",
        "description": "KBC.kaun_banega_crorepati",
        "isExtraImport": true,
        "detail": "KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "KBCGame",
        "importPath": "KBC.kaun_banega_crorepati",
        "description": "KBC.kaun_banega_crorepati",
        "isExtraImport": true,
        "detail": "KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "KBCGame",
        "importPath": "KBC.kaun_banega_crorepati",
        "description": "KBC.kaun_banega_crorepati",
        "isExtraImport": true,
        "detail": "KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "Stone_Paper_Scissor.sps",
        "description": "Stone_Paper_Scissor.sps",
        "isExtraImport": true,
        "detail": "Stone_Paper_Scissor.sps",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "Stone_Paper_Scissor.sps",
        "description": "Stone_Paper_Scissor.sps",
        "isExtraImport": true,
        "detail": "Stone_Paper_Scissor.sps",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "Stone_Paper_Scissor.sps",
        "description": "Stone_Paper_Scissor.sps",
        "isExtraImport": true,
        "detail": "Stone_Paper_Scissor.sps",
        "documentation": {}
    },
    {
        "label": "tic_tac_toe",
        "importPath": "TIC_TAC_TOE",
        "description": "TIC_TAC_TOE",
        "isExtraImport": true,
        "detail": "TIC_TAC_TOE",
        "documentation": {}
    },
    {
        "label": "tic_tac_toe",
        "importPath": "TIC_TAC_TOE",
        "description": "TIC_TAC_TOE",
        "isExtraImport": true,
        "detail": "TIC_TAC_TOE",
        "documentation": {}
    },
    {
        "label": "tic_tac_toe",
        "importPath": "TIC_TAC_TOE",
        "description": "TIC_TAC_TOE",
        "isExtraImport": true,
        "detail": "TIC_TAC_TOE",
        "documentation": {}
    },
    {
        "label": "login_banking_system",
        "importPath": "utility.decorators",
        "description": "utility.decorators",
        "isExtraImport": true,
        "detail": "utility.decorators",
        "documentation": {}
    },
    {
        "label": "BankController",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.controllers.bank_controller",
        "description": "Database_Prods.DB_BMS.controllers.bank_controller",
        "peekOfCode": "class BankController:\n    @staticmethod\n    @logger_v\n    def create_account(account_number: str, name: str, ifsc_code: str, branch_name: str, state: str,\n                       district: str, country: str, account_type: str, initial_balance: float) -> None:\n        \"\"\"\n        Creates a new account with the provided details.\n        :param account_number: The account number.\n        :param name: The name of the account holder.\n        :param ifsc_code: The IFSC code of the bank branch.",
        "detail": "Database_Prods.DB_BMS.controllers.bank_controller",
        "documentation": {}
    },
    {
        "label": "TransactionController",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.controllers.transaction_controller",
        "description": "Database_Prods.DB_BMS.controllers.transaction_controller",
        "peekOfCode": "class TransactionController:\n    @staticmethod\n    def deposit(account_number: str, amount: float) -> None:\n        \"\"\"\n        Deposits the specified amount into the account.\n        :param account_number: The account number.\n        :param amount: The amount to deposit.\n        \"\"\"\n        try:\n            Transaction.deposit(account_number, amount)",
        "detail": "Database_Prods.DB_BMS.controllers.transaction_controller",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.db.database",
        "description": "Database_Prods.DB_BMS.db.database",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Establishes and returns a connection to the MySQL database.\n    :return: Connection object to the MySQL database.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root',\n        database='bank_management',",
        "detail": "Database_Prods.DB_BMS.db.database",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.db.database",
        "description": "Database_Prods.DB_BMS.db.database",
        "peekOfCode": "def initialize_db():\n    \"\"\"\n    Initializes the database by creating the necessary tables if they do not exist.\n    \"\"\"\n    connection = get_db_connection()\n    try:\n        with connection.cursor() as cursor:\n            # Create bank_management database\n            cursor.execute(\"\"\"\n                        CREATE DATABASE IF NOT EXISTS bank_management",
        "detail": "Database_Prods.DB_BMS.db.database",
        "documentation": {}
    },
    {
        "label": "logger_v",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.decorators.generate_logs",
        "description": "Database_Prods.DB_BMS.decorators.generate_logs",
        "peekOfCode": "def logger_v(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator to log function calls with arguments, results, and nested function calls.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        logger.debug(f'Calling the {func.__name__} with args {args} and kwargs {kwargs}')\n        try:\n            result: Any = func(*args, **kwargs)\n            logger.debug(f'{func.__name__} returned {result}')",
        "detail": "Database_Prods.DB_BMS.decorators.generate_logs",
        "documentation": {}
    },
    {
        "label": "login_banking_system",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.decorators.login_decorator",
        "description": "Database_Prods.DB_BMS.decorators.login_decorator",
        "peekOfCode": "def login_banking_system(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator that checks if the user is logged in before calling the decorated function.\n    Args:\n        func: The function to decorate.\n    Returns: the main function to execute the code\n    \"\"\"\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        username = input(\"Enter the admin Username: \")\n        password = input(\"Enter the admin Password: \")",
        "detail": "Database_Prods.DB_BMS.decorators.login_decorator",
        "documentation": {}
    },
    {
        "label": "AccountError",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "description": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "peekOfCode": "class AccountError(Exception):\n    \"\"\"\n    Base class for all account-related exceptions.\n    \"\"\"\n    def __init__(self, message) -> None:\n        self.message = message\n        print(self.message)\n        super().__init__(message)\n    pass\nclass AccountNotFoundError(AccountError):",
        "detail": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundError",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "description": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "peekOfCode": "class AccountNotFoundError(AccountError):\n    \"\"\"\n    Raised when an account is not found.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    def __init__(self, message: str) -> None:\n        self.message = message\n        super().__init__(message)\nclass InsufficientFundsError(AccountError):",
        "detail": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "description": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "peekOfCode": "class InsufficientFundsError(AccountError):\n    \"\"\"\n    Raised when an account does not have sufficient funds.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    def __init__(self, message: str) -> None:\n        self.message = message\n        super().__init__(message)\nclass AccountAlreadyExistsError(AccountError):",
        "detail": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "documentation": {}
    },
    {
        "label": "AccountAlreadyExistsError",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "description": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "peekOfCode": "class AccountAlreadyExistsError(AccountError):\n    \"\"\"\n    Raised when an account with the same account number already exists.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    def __init__(self, message: str) -> None:\n        self.message = message\n        super().__init__(message)\nclass InvalidInitialBalanceError(AccountError):",
        "detail": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidInitialBalanceError",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "description": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "peekOfCode": "class InvalidInitialBalanceError(AccountError):\n    \"\"\"\n    Raised when the initial balance of an account is invalid.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    def __init__(self, message: str) -> None:\n        self.message = message\n        super().__init__(message)",
        "detail": "Database_Prods.DB_BMS.exceptions.custom_exceptions",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.models.account",
        "description": "Database_Prods.DB_BMS.models.account",
        "peekOfCode": "class Account:\n    def __init__(self, account_number: str, name: str, ifsc_code: str, branch_name: str, state: str,\n                 district: str, country: str, account_type: str, balance: float):\n        self.account_number = account_number\n        self.name = name\n        self.ifsc_code = ifsc_code\n        self.branch_name = branch_name\n        self.state = state\n        self.district = district\n        self.country = country",
        "detail": "Database_Prods.DB_BMS.models.account",
        "documentation": {}
    },
    {
        "label": "Log",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.models.log",
        "description": "Database_Prods.DB_BMS.models.log",
        "peekOfCode": "class Log:\n    def __init__(self, action: str, account_number: str, amount: float, target_account: str = None, error: str = None):\n        self.action = action\n        self.account_number = account_number\n        self.amount = amount\n        self.target_account = target_account\n        self.error = error\n    @staticmethod\n    @logger_v\n    def log_action(action: str, account_number: str = None, amount: float = None, target_account: str = None,",
        "detail": "Database_Prods.DB_BMS.models.log",
        "documentation": {}
    },
    {
        "label": "Transaction",
        "kind": 6,
        "importPath": "Database_Prods.DB_BMS.models.transaction",
        "description": "Database_Prods.DB_BMS.models.transaction",
        "peekOfCode": "class Transaction:\n    def __init__(self, account_number: str, transaction_type: str, amount: float, target_account: str = None):\n        self.account_number = account_number\n        self.transaction_type = transaction_type\n        self.amount = amount\n        self.target_account = target_account\n    @staticmethod\n    @logger_v\n    def deposit(account_number: str, amount: float) -> None:\n        \"\"\"",
        "detail": "Database_Prods.DB_BMS.models.transaction",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.routes.url",
        "description": "Database_Prods.DB_BMS.routes.url",
        "peekOfCode": "def route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    Args:\n        url (str): The URL to route.\n        *args: Variable length arguments to pass to the view function.\n        **kwargs: Variable keyword arguments to pass to the view function.\n    Raises:\n        Exception: If the URL is not found.\n    Returns:",
        "detail": "Database_Prods.DB_BMS.routes.url",
        "documentation": {}
    },
    {
        "label": "setup_database",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def setup_database():\n    initialize_db()\n    yield\n    connection = get_db_connection()\n    with connection.cursor() as cursor:\n        cursor.execute(\"DROP TABLE logs\")\n        cursor.execute(\"DROP TABLE transactions\")\n        cursor.execute(\"DROP TABLE accounts\")\n    initialize_db()\n    connection.close()",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "setup_teardown",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def setup_teardown():\n    connection = get_db_connection()\n    with connection.cursor() as cursor:\n        cursor.execute(\"DELETE FROM transactions\")\n        cursor.execute(\"DELETE FROM accounts\")\n        cursor.execute(\"DELETE FROM logs\")\n        connection.commit()\n    yield\n@pytest.mark.success\ndef test_create_account_controller(setup_database):",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "test_create_account_controller",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def test_create_account_controller(setup_database):\n    BankController.create_account(\"1002\", \"Jane Doe\", \"IFSC002\",\n                                  \"Branch2\", \"State2\", \"District2\", \"Country2\",\n                                  \"savings\", 9000.0)\n    account = BankController.get_account_details(\"1002\")\n    assert account is not None\n    assert account.account_number == \"1002\"\n    assert account.balance == 9000.0\n@pytest.mark.success\ndef test_debit_controller(setup_database):",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "test_debit_controller",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def test_debit_controller(setup_database):\n    BankController.create_account(\"1001\", \"John Doe\", \"IFSC001\",\n                                  \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                                  \"savings\", 10000.0)\n    TransactionController.debit(\"1001\", 2000.0)\n    account = BankController.get_account_details(\"1001\")\n    assert account.balance == 8000.0\n@pytest.mark.failure\ndef test_debit_insufficient_funds_controller(setup_database):\n    BankController.create_account(\"1003\", \"John Doe\", \"IFSC001\",",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "test_debit_insufficient_funds_controller",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def test_debit_insufficient_funds_controller(setup_database):\n    BankController.create_account(\"1003\", \"John Doe\", \"IFSC001\",\n                                  \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                                  \"savings\", 10000.0)\n    with pytest.raises(InsufficientFundsError):\n        TransactionController.debit(\"1003\", 12000.0)\n@pytest.mark.success\ndef test_credit_controller(setup_database):\n    BankController.create_account(\"1004\", \"John Doe\", \"IFSC001\",\n                                  \"Main Branch\", \"State1\", \"District1\", \"Country1\",",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "test_credit_controller",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def test_credit_controller(setup_database):\n    BankController.create_account(\"1004\", \"John Doe\", \"IFSC001\",\n                                  \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                                  \"savings\", 10000.0)\n    TransactionController.credit(\"1004\", 2000.0)\n    account = BankController.get_account_details(\"1004\")\n    assert account.balance == 12000.0\n@pytest.mark.success\ndef test_transfer_controller(setup_database):\n    BankController.create_account(\"1007\", \"John Doe\", \"IFSC001\",",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "test_transfer_controller",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def test_transfer_controller(setup_database):\n    BankController.create_account(\"1007\", \"John Doe\", \"IFSC001\",\n                                  \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                                  \"savings\", 10000.0)\n    BankController.create_account(\"1008\", \"Jake Doe\", \"IFSC003\",\n                                  \"Branch3\", \"State3\", \"District3\", \"Country3\",\n                                  \"savings\", 7000.0)\n    BankController.transfer(\"1007\", \"1008\", 2000.0)\n    sender = BankController.get_account_details(\"1007\")\n    receiver = BankController.get_account_details(\"1008\")",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "test_transfer_insufficient_funds_controller",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def test_transfer_insufficient_funds_controller(setup_database):\n    BankController.create_account(\"1009\", \"John Doe\", \"IFSC001\",\n                                  \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                                  \"savings\", 10000.0)\n    BankController.create_account(\"1010\", \"Jake Doe\", \"IFSC003\",\n                                  \"Branch3\", \"State3\", \"District3\", \"Country3\",\n                                  \"savings\", 9000.0)\n    with pytest.raises(InsufficientFundsError):\n        BankController.transfer(\"1009\", \"1010\", 15000.0)\n@pytest.mark.failure",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "test_transfer_account_not_found_controller",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def test_transfer_account_not_found_controller(setup_database):\n    BankController.create_account(\"1011\", \"John Doe\", \"IFSC001\",\n                                  \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                                  \"savings\", 10000.0)\n    with pytest.raises(AccountNotFoundError):\n        BankController.transfer(\"10100\", \"101010\", 2000.0)\n@pytest.mark.success\ndef test_view_transactions_controller(setup_database):\n    BankController.create_account(\"1012\", \"John Doe\", \"IFSC001\",\n                                  \"Main Branch\", \"State1\", \"District1\", \"Country1\",",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "test_view_transactions_controller",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def test_view_transactions_controller(setup_database):\n    BankController.create_account(\"1012\", \"John Doe\", \"IFSC001\",\n                                  \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                                  \"savings\", 10000.0)\n    BankController.deposit(\"1012\", 1000.0)\n    BankController.debit(\"1012\", 500.0)\n    transactions = BankController.view_transactions(\"1012\")\n    assert len(transactions) == 2\n    assert transactions[0]['type'] == 'deposit'\n    assert transactions[0]['amount'] == 1000.0",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "test_view_transactions_account_not_found_controller",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_controllers",
        "description": "Database_Prods.DB_BMS.tests.test_controllers",
        "peekOfCode": "def test_view_transactions_account_not_found_controller(setup_database):\n    with pytest.raises(AccountNotFoundError):\n        BankController.view_transactions(\"5\")",
        "detail": "Database_Prods.DB_BMS.tests.test_controllers",
        "documentation": {}
    },
    {
        "label": "setup_database",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_models",
        "description": "Database_Prods.DB_BMS.tests.test_models",
        "peekOfCode": "def setup_database():\n    initialize_db()\n    yield\n    connection = get_db_connection()\n    connection.close()\n@pytest.fixture(autouse=True)\ndef setup_teardown():\n    connection = get_db_connection()\n    with connection.cursor() as cursor:\n        cursor.execute(\"DELETE FROM transactions\")",
        "detail": "Database_Prods.DB_BMS.tests.test_models",
        "documentation": {}
    },
    {
        "label": "setup_teardown",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_models",
        "description": "Database_Prods.DB_BMS.tests.test_models",
        "peekOfCode": "def setup_teardown():\n    connection = get_db_connection()\n    with connection.cursor() as cursor:\n        cursor.execute(\"DELETE FROM transactions\")\n        cursor.execute(\"DELETE FROM accounts\")\n        cursor.execute(\"DELETE FROM logs\")\n        connection.commit()\n    yield\n@pytest.mark.success\ndef test_create_account(setup_database):",
        "detail": "Database_Prods.DB_BMS.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_create_account",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_models",
        "description": "Database_Prods.DB_BMS.tests.test_models",
        "peekOfCode": "def test_create_account(setup_database):\n    try:\n        account = Account(\"1002\", \"Jane Doe\", \"IFSC002\", \"Branch2\",\n                          \"State2\", \"District2\", \"Country2\", \"savings\",\n                          10000.0)\n        account.create_account(\"1002\", \"Jane Doe\", \"IFSC002\", \"Branch2\",\n                               \"State2\", \"District2\", \"Country2\", \"savings\",\n                               10000.0)\n        assert account is not None\n        assert account.account_number == \"1002\"",
        "detail": "Database_Prods.DB_BMS.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_get_account",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_models",
        "description": "Database_Prods.DB_BMS.tests.test_models",
        "peekOfCode": "def test_get_account(setup_database):\n    try:\n        Account.create_account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\",\n                               \"State1\", \"District1\", \"Country1\",\n                               \"savings\", 10000.0)\n        fetched_account = Account.load_account(\"1001\")\n        assert fetched_account is not None\n        assert fetched_account.name == \"John Doe\"\n        print(\"test_get_account passed\")\n    except AssertionError as e:",
        "detail": "Database_Prods.DB_BMS.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_debit",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_models",
        "description": "Database_Prods.DB_BMS.tests.test_models",
        "peekOfCode": "def test_debit(setup_database):\n    try:\n        account = Account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\",\n                          \"State1\", \"District1\", \"Country1\",\n                          \"savings\", 10000.0)\n        account.create_account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\",\n                               \"State1\", \"District1\", \"Country1\", \"savings\",\n                               10000.0)\n        Transaction.debit(\"1001\", 2000.0)\n        updated_account = account.load_account(account.account_number)",
        "detail": "Database_Prods.DB_BMS.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_debit_insufficient_funds",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_models",
        "description": "Database_Prods.DB_BMS.tests.test_models",
        "peekOfCode": "def test_debit_insufficient_funds(setup_database):\n    account = Account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\",\n                      \"State1\", \"District1\", \"Country1\",\n                      \"savings\", 10000.0)\n    account.create_account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\",\n                           \"State1\", \"District1\", \"Country1\", \"savings\",\n                           10000.0)\n    with pytest.raises(InsufficientFundsError):\n        Transaction.debit(account.account_number, 12000.0)\n    print(\"test_debit_insufficient_funds passed\")",
        "detail": "Database_Prods.DB_BMS.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_credit",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_models",
        "description": "Database_Prods.DB_BMS.tests.test_models",
        "peekOfCode": "def test_credit(setup_database):\n    try:\n        account = Account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\",\n                          \"State1\", \"District1\", \"Country1\",\n                          \"savings\", 10000.0)\n        account.create_account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\",\n                               \"State1\", \"District1\", \"Country1\", \"savings\",\n                               10000.0)\n        Transaction.credit(account.account_number, 2000.0)\n        account = account.load_account(account.account_number)",
        "detail": "Database_Prods.DB_BMS.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_transfer",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_models",
        "description": "Database_Prods.DB_BMS.tests.test_models",
        "peekOfCode": "def test_transfer(setup_database):\n    try:\n        sender = Account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                         \"savings\", 10000.0)\n        receiver = Account(\"1003\", \"Jake Doe\", \"IFSC003\", \"Branch3\", \"State3\", \"District3\", \"Country3\",\n                           \"savings\", 10000.0)\n        sender.create_account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                              \"savings\", 10000.0)\n        receiver.create_account(\"1003\", \"Jake Doe\", \"IFSC003\", \"Branch3\", \"State3\", \"District3\", \"Country3\",\n                                \"savings\", 10000.0)",
        "detail": "Database_Prods.DB_BMS.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_view_transactions",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.tests.test_models",
        "description": "Database_Prods.DB_BMS.tests.test_models",
        "peekOfCode": "def test_view_transactions(setup_database):\n    try:\n        account = Account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                          \"savings\", 10000.0)\n        Account.create_account(\"1001\", \"John Doe\", \"IFSC001\", \"Main Branch\", \"State1\", \"District1\", \"Country1\",\n                               \"savings\", 10000.0)\n        Transaction.credit(\"1001\", 1000.0)\n        Transaction.debit(\"1001\", 500.0)\n        transactions = Transaction.get_all(account.account_number)\n        assert len(transactions) == 2",
        "detail": "Database_Prods.DB_BMS.tests.test_models",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Database_Prods.DB_BMS.views.interface",
        "description": "Database_Prods.DB_BMS.views.interface",
        "peekOfCode": "def main() -> None:\n    try:\n        while True:\n            print(\n                \"1: Create Account\\n2: Deposit\\n3: Debit\\n4: Credit\\n5: Get Account Details\\n6: Transfer\\n7: View \"\n                \"Transactions\\n8: Get Logs\\n9: Exit\")\n            choice: str = input(\"Enter choice: \")\n            if choice == \"1\":\n                account_number: str = input(\"Enter new account number: \")\n                name: str = input(\"Enter name: \")",
        "detail": "Database_Prods.DB_BMS.views.interface",
        "documentation": {}
    },
    {
        "label": "check_in_between",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "peekOfCode": "def check_in_between(value):\n    number = int(value)\n    if 0 <= number <= 10:\n        print(\"number is between 0 and 10\")\n    elif 20 <= number <= 30:\n        print(\"number is between 20 and 30\")\n    elif 40 <= number <= 50:\n        print(\"number is between 40 and 50\")\n    elif 60 <= number <= 70:\n        print(\"number is between 60 and 70\")",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "documentation": {}
    },
    {
        "label": "check_user_name_and_password",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "peekOfCode": "def check_user_name_and_password(user_name, password):\n    if user_name == 'admin' and password == '123':\n        print(\"login successful\")\n    else:\n        print(\"login failure\")\n# Write a Python program to find those numbers which are divisible by 7 and multiples of 5, between 100 and 200 (both included).\ndef check_divisible_by_7_and_multiple_of_5():\n    for number in range(100, 201):\n        if number % 35 == 0:\n            print(number)",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "documentation": {}
    },
    {
        "label": "check_divisible_by_7_and_multiple_of_5",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "peekOfCode": "def check_divisible_by_7_and_multiple_of_5():\n    for number in range(100, 201):\n        if number % 35 == 0:\n            print(number)\n# write a program that accept a three digit  number from user and find greater digit.\ndef find_greater_digit(number):\n    number = str(number)\n    if number[0] > number[1] and number[0] > number[2]:\n        print(number[0])\n    elif number[1] > number[0] and number[1] > number[2]:",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "documentation": {}
    },
    {
        "label": "find_greater_digit",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "peekOfCode": "def find_greater_digit(number):\n    number = str(number)\n    if number[0] > number[1] and number[0] > number[2]:\n        print(number[0])\n    elif number[1] > number[0] and number[1] > number[2]:\n        print(number[1])\n    else:\n        print(number[2])\ndef take_input(service):\n    if service == '1':",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "documentation": {}
    },
    {
        "label": "take_input",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "peekOfCode": "def take_input(service):\n    if service == '1':\n        value = input('Please enter the value: ')\n        check_in_between(value)\n    elif service == '2':\n        username = input('Please enter your username: ')\n        password = input('Please enter your password: ')\n        check_user_name_and_password(username, password)\n    elif service == '3':\n        check_divisible_by_7_and_multiple_of_5()",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "documentation": {}
    },
    {
        "label": "all_services",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "peekOfCode": "def all_services():\n    print(\"All services are as follows: \")\n    print(\"Service 1 check_in_between()\")\n    print(\"Service 2 check_user_name_and_password()\")\n    print(\"Service 3 check_divisible_by_7_and_multiple_of_5()\")\n    print(\"Service 4 find_greater_digit()\")\n    service = int(input(\"Enter the number of service you want to use\"))\n    take_input(service)\nif __name__ == '__main__':\n    all_services()",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Assignment",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number - 1)\ndef fibonacci_series(number):\n    if number <= 0:\n        return []\n    elif number == 1:\n        return [0]",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "fibonacci_series",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def fibonacci_series(number):\n    if number <= 0:\n        return []\n    elif number == 1:\n        return [0]\n    elif number == 2:\n        return [0, 1]\n    else:\n        list_of_numbers = [0, 1]\n        while len(list_of_numbers) < number:",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "armstrong_series",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def armstrong_series(number):\n    number_string = str(number)\n    return sum(int(digit) ** len(number_string) for digit in number_string) == number\ndef check_palindrome(argument):\n    argument = str(argument)\n    return argument == argument[::-1]\ndef print_table_of_a_number(argument):\n    for i in range(1, 21):\n        print(f\"{argument}\" + \" X \" + f\"{i} = {argument * i}\")\ndef find_sum_of_digits(argument):",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "check_palindrome",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def check_palindrome(argument):\n    argument = str(argument)\n    return argument == argument[::-1]\ndef print_table_of_a_number(argument):\n    for i in range(1, 21):\n        print(f\"{argument}\" + \" X \" + f\"{i} = {argument * i}\")\ndef find_sum_of_digits(argument):\n    return sum(int(digit) for digit in str(argument))\ndef check_perfect_number(argument):\n    return sum(number for number in range(1, argument) if argument % number == 0) == argument",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "print_table_of_a_number",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def print_table_of_a_number(argument):\n    for i in range(1, 21):\n        print(f\"{argument}\" + \" X \" + f\"{i} = {argument * i}\")\ndef find_sum_of_digits(argument):\n    return sum(int(digit) for digit in str(argument))\ndef check_perfect_number(argument):\n    return sum(number for number in range(1, argument) if argument % number == 0) == argument\ndef repeat_services():\n    yes_or_no = input(\"Do you Wish to Continue y / n : \")\n    if yes_or_no.lower() in ['y', 'yes']:",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "find_sum_of_digits",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def find_sum_of_digits(argument):\n    return sum(int(digit) for digit in str(argument))\ndef check_perfect_number(argument):\n    return sum(number for number in range(1, argument) if argument % number == 0) == argument\ndef repeat_services():\n    yes_or_no = input(\"Do you Wish to Continue y / n : \")\n    if yes_or_no.lower() in ['y', 'yes']:\n        if input(\"Do you want to view menu again y / n : \") in ['y', 'yes']:\n            view_menu()\n            return",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "check_perfect_number",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def check_perfect_number(argument):\n    return sum(number for number in range(1, argument) if argument % number == 0) == argument\ndef repeat_services():\n    yes_or_no = input(\"Do you Wish to Continue y / n : \")\n    if yes_or_no.lower() in ['y', 'yes']:\n        if input(\"Do you want to view menu again y / n : \") in ['y', 'yes']:\n            view_menu()\n            return\n        return\n    else:",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "repeat_services",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def repeat_services():\n    yes_or_no = input(\"Do you Wish to Continue y / n : \")\n    if yes_or_no.lower() in ['y', 'yes']:\n        if input(\"Do you want to view menu again y / n : \") in ['y', 'yes']:\n            view_menu()\n            return\n        return\n    else:\n        global Check_Again\n        Check_Again = False",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "choose_service",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def choose_service(service):\n    if service == 1:\n        print(\"You have chosen Factorial Service\")\n        number = int(input(\"Enter a number for factorial: \"))\n        print(factorial(number))\n        repeat_services()\n    elif service == 2:\n        print(\"You have chosen Table Service\")\n        number = int(input(\"Enter a number for table: \"))\n        print_table_of_a_number(number)",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "view_menu",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "peekOfCode": "def view_menu():\n    print(\"------------------------------------\")\n    print(\"Welcome to the Services Menu\")\n    print(\"1. Factorial Service\")\n    print(\"2. Table Service\")\n    print(\"3. Fibonacci Series Service\")\n    print(\"4. Sum of Digits Service\")\n    print(\"5. Perfect Number Service\")\n    print(\"6. Palindrome Service\")\n    print(\"7. Sum of Digits Service\")",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Event_Driven",
        "documentation": {}
    },
    {
        "label": "get_inputs",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_1",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_1",
        "peekOfCode": "def get_inputs():\n    salary = int(input(\"Enter your salary: \"))\n    start_year = int(input(\"Enter your year when you started: \"))\n    current_year = int(input(\"Enter your current year: \"))\n    get_service_bonus(salary, find_service_duration(start_year, current_year))\ndef find_service_duration(start_date, current_date):\n    service_duration = current_date - start_date\n    return service_duration\ndef get_service_bonus(salary, service_duration):\n    if service_duration > 5:",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_1",
        "documentation": {}
    },
    {
        "label": "find_service_duration",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_1",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_1",
        "peekOfCode": "def find_service_duration(start_date, current_date):\n    service_duration = current_date - start_date\n    return service_duration\ndef get_service_bonus(salary, service_duration):\n    if service_duration > 5:\n        bonus = salary * 0.05\n        print(f\"Your bonus amount is: {bonus}\")\n    else:\n        print(\"You are not eligible for bonus\")\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_1",
        "documentation": {}
    },
    {
        "label": "get_service_bonus",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_1",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_1",
        "peekOfCode": "def get_service_bonus(salary, service_duration):\n    if service_duration > 5:\n        bonus = salary * 0.05\n        print(f\"Your bonus amount is: {bonus}\")\n    else:\n        print(\"You are not eligible for bonus\")\nif __name__ == '__main__':\n    print(\"Welcome to the Company Portal check your eligiblity of your account bonus: \")\n    get_inputs()",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_1",
        "documentation": {}
    },
    {
        "label": "get_quantity",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_2",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_2",
        "peekOfCode": "def get_quantity():\n    purchased_amount = int(input(\"Enter the total amount: \"))\n    return get_discount(purchased_amount)\ndef get_discount(purchased_amount):\n    if purchased_amount > 1000:\n        return final_cost(purchased_amount, 10)\n    else:\n        return final_cost(purchased_amount, 0)\ndef final_cost(purchased_amount, discount):\n    return purchased_amount * (100 - discount) // 100",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_2",
        "documentation": {}
    },
    {
        "label": "get_discount",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_2",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_2",
        "peekOfCode": "def get_discount(purchased_amount):\n    if purchased_amount > 1000:\n        return final_cost(purchased_amount, 10)\n    else:\n        return final_cost(purchased_amount, 0)\ndef final_cost(purchased_amount, discount):\n    return purchased_amount * (100 - discount) // 100\nif __name__ == '__main__':\n    print(get_quantity())",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_2",
        "documentation": {}
    },
    {
        "label": "final_cost",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_2",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_2",
        "peekOfCode": "def final_cost(purchased_amount, discount):\n    return purchased_amount * (100 - discount) // 100\nif __name__ == '__main__':\n    print(get_quantity())",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_2",
        "documentation": {}
    },
    {
        "label": "get_age_of_users",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_3",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_3",
        "peekOfCode": "def get_age_of_users():\n    age_of_user_1 = int(input(\"Enter the age of user 1: \"))\n    age_of_user_2 = int(input(\"Enter the age of user 2: \"))\n    age_of_user_3 = int(input(\"Enter the age of user 3: \"))\n    return age_of_user_1, age_of_user_2, age_of_user_3\ndef youngest_and_oldest_user():\n    ages = list(get_age_of_users())\n    print(f\"Age of youngest user is : {min(ages)}\")\n    print(f\"Age of oldest user is : {max(ages)}\")\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_3",
        "documentation": {}
    },
    {
        "label": "youngest_and_oldest_user",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_3",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_3",
        "peekOfCode": "def youngest_and_oldest_user():\n    ages = list(get_age_of_users())\n    print(f\"Age of youngest user is : {min(ages)}\")\n    print(f\"Age of oldest user is : {max(ages)}\")\nif __name__ == '__main__':\n    youngest_and_oldest_user()",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_3",
        "documentation": {}
    },
    {
        "label": "get_units_of_electricity",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_4",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_4",
        "peekOfCode": "def get_units_of_electricity():\n    units_of_electricity = int(input(\"Enter the units of electricity: \"))\n    return units_of_electricity\ndef calculate_electricity_bill():\n    units_of_electricity = get_units_of_electricity()\n    if units_of_electricity <= 100:\n        electricity_bill = 0\n    elif 100 < units_of_electricity <= 200:\n        electricity_bill = (units_of_electricity - 100) * 5\n    elif units_of_electricity > 200:",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_4",
        "documentation": {}
    },
    {
        "label": "calculate_electricity_bill",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_4",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_4",
        "peekOfCode": "def calculate_electricity_bill():\n    units_of_electricity = get_units_of_electricity()\n    if units_of_electricity <= 100:\n        electricity_bill = 0\n    elif 100 < units_of_electricity <= 200:\n        electricity_bill = (units_of_electricity - 100) * 5\n    elif units_of_electricity > 200:\n        electricity_bill = (units_of_electricity - 200) * 10 + 500\n    return electricity_bill\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_4",
        "documentation": {}
    },
    {
        "label": "get_license",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_5",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_5",
        "peekOfCode": "def get_license():\n    status = input(\"Do you have a driver license y or n: \")\n    if status.lower() in ['y', 'yes']:\n        return True\n    else:\n        return False\ndef get_age():\n    age = int(input(\"Enter your age: \"))\n    return age\ndef eligiblity(age, has_license):",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_5",
        "documentation": {}
    },
    {
        "label": "get_age",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_5",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_5",
        "peekOfCode": "def get_age():\n    age = int(input(\"Enter your age: \"))\n    return age\ndef eligiblity(age, has_license):\n    if age >= 18 and has_license:\n        return \"Eligible to drive\"\n    else:\n        return \"Not eligible to drive\"\nif __name__ == '__main__':\n    print(eligiblity(get_age(), get_license()))",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_5",
        "documentation": {}
    },
    {
        "label": "eligiblity",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_5",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_5",
        "peekOfCode": "def eligiblity(age, has_license):\n    if age >= 18 and has_license:\n        return \"Eligible to drive\"\n    else:\n        return \"Not eligible to drive\"\nif __name__ == '__main__':\n    print(eligiblity(get_age(), get_license()))",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_5",
        "documentation": {}
    },
    {
        "label": "get_age_of_person",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_6",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_6",
        "peekOfCode": "def get_age_of_person():\n    age_of_person = int(input(\"Enter the age of the person: \"))\n    return age_of_person\ndef get_person_status():\n    status = input(\"Enter if you are a student y or n ?: \")\n    if status.lower() in ['y', 'yes']:\n        return True\n    else:\n        return False\ndef get_ticket_price(age_of_person, is_student):",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_6",
        "documentation": {}
    },
    {
        "label": "get_person_status",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_6",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_6",
        "peekOfCode": "def get_person_status():\n    status = input(\"Enter if you are a student y or n ?: \")\n    if status.lower() in ['y', 'yes']:\n        return True\n    else:\n        return False\ndef get_ticket_price(age_of_person, is_student):\n    ticket_price = 0\n    return ticket_price\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_6",
        "documentation": {}
    },
    {
        "label": "get_ticket_price",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_6",
        "description": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_6",
        "peekOfCode": "def get_ticket_price(age_of_person, is_student):\n    ticket_price = 0\n    return ticket_price\nif __name__ == '__main__':\n    print(f\"The price of the ticket is : {get_ticket_price(get_age_of_person(), get_person_status())}\")",
        "detail": "M-05(May).Week-01.07 May.Prods.Assignment.Use_Case_6",
        "documentation": {}
    },
    {
        "label": "greatest_between_number",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.greater_number",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.greater_number",
        "peekOfCode": "def greatest_between_number(number_1, number_2, number_3):\n    if number_1 > number_2 and number_1 > number_3:\n        return number_1\n    elif number_2 > number_1 and number_2 > number_3:\n        return number_2\n    else:\n        return number_3\n# def greater_number(number_1, number_2):\n#     return number_1 if number_1 > number_2 else number_2\ndef get_inputs():",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.greater_number",
        "documentation": {}
    },
    {
        "label": "get_inputs",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.greater_number",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.greater_number",
        "peekOfCode": "def get_inputs():\n    number_1 = int(input(\"Enter the first number: \"))\n    number_2 = int(input(\"Enter the second number: \"))\n    number_3 = int(input(\"Enter the third number: \"))\n    return number_1, number_2, number_3\nif __name__ == '__main__':\n    num_1, num_2, num_3 = get_inputs()\n    print(greatest_between_number(num_1, num_2, num_3))",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.greater_number",
        "documentation": {}
    },
    {
        "label": "loops_demo",
        "kind": 6,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.loops",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.loops",
        "peekOfCode": "class loops_demo:\n    emp_list = [1, 2, 3, 4, 5]\n    def for_loop(self):\n        for num in range(1, 10):\n            print(num, end=' ')\n    def for_loop_in_list(self):\n        for num in self.emp_list:\n            print(num, end=' ')\n    def while_loop(self):\n        num = 1",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.loops",
        "documentation": {}
    },
    {
        "label": "remove_duplicate_in_list",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.remove_duplicates",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.remove_duplicates",
        "peekOfCode": "def remove_duplicate_in_list(list_of_number):\n    list_of_number = set(list_of_number)\n    list_of_number = list(list_of_number)\n    return list_of_number\nif __name__ == '__main__':\n    print(remove_duplicate_in_list(list_of_number=[1, 2, 3, 4, 5, 1, 12, 4, 5]))\n    # removing duplicates using type casting",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.remove_duplicates",
        "documentation": {}
    },
    {
        "label": "view_menu",
        "kind": 6,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "class view_menu:\n    def veg(self):\n        print(\"Welcome to the veg menu\")\n        print(VEG_MENU)\n    def non_veg(self):\n        print(\"Welcome to the Non Veg Menu: \")\n        print(NON_VEG_MENU)\ndef menu(status):\n    view = view_menu()\n    if status:",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "def menu(status):\n    view = view_menu()\n    if status:\n        view.non_veg()\n    else:\n        view.veg()\ndef check_veg_availability(table):\n    if table in BOOKED_TABLE:\n        print(\"table is already booked\")\n        print(\"Available Tables are: \")",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "check_veg_availability",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "def check_veg_availability(table):\n    if table in BOOKED_TABLE:\n        print(\"table is already booked\")\n        print(\"Available Tables are: \")\n        print([available_table for available_table in TOTAL_TABLE if\n               available_table not in BOOKED_TABLE and available_table % 2 == 0])\n        vegetarian()\n    else:\n        print(f\"Your table is booked: {table}\")\n        BOOKED_TABLE.append(table)",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "check_non_veg_availability",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "def check_non_veg_availability(table):\n    if table in BOOKED_TABLE:\n        print(\"table is already booked\")\n        print(\"Available Tables are: \")\n        print([available_table for available_table in TOTAL_TABLE if\n               available_table not in BOOKED_TABLE and available_table % 2 != 0])\n        non_vegetarian()\n    else:\n        print(f\"Your table is booked: {table}\")\n        BOOKED_TABLE.append(table)",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "vegetarian",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "def vegetarian():\n    print(\"vegetarian\")\n    table = int(input(\"Enter the table number you want to dine into : \"))\n    if table % 2 != 0:\n        print(\"Not a vegetarian table \")\n        vegetarian()\n    else:\n        check_veg_availability(table)\ndef non_vegetarian():\n    print(\"non vegetarian\")",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "non_vegetarian",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "def non_vegetarian():\n    print(\"non vegetarian\")\n    table = int(input(\"Enter the table number you want to dine into : \"))\n    if table % 2 == 0:\n        print(\"wrong table\")\n        non_vegetarian()\n    else:\n        check_non_veg_availability(table)\ndef vegetarian_non_vegetarian():\n    preference = int(input(\"Enter your preference for veg press 0 for non veg press 1: \"))",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "vegetarian_non_vegetarian",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "def vegetarian_non_vegetarian():\n    preference = int(input(\"Enter your preference for veg press 0 for non veg press 1: \"))\n    if preference:\n        non_vegetarian()\n    else:\n        vegetarian()\nif __name__ == '__main__':\n    vegetarian_non_vegetarian()",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "TOTAL_TABLE",
        "kind": 5,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "TOTAL_TABLE = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nBOOKED_TABLE = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nVEG_MENU = {\n    'Main Course': ['Paneer Tikka Masala', 'Paneer Butter Masala', 'Mix Veg', 'Palak Paneer', 'Yellow Dal Tadka',\n                    'Dal Makhani'],\n    'Starters': ['Veg Lollipop', 'Crispy Corn', 'Veg Kothe', 'Paneer Tikka', '']\n}\nNON_VEG_MENU = {\n    'Main Course': ['Chicken Tikka Masala', 'Chicken Butter Masala', 'Mix Veg', 'Palak Chicken', 'Yellow Dal Tadka',\n                    'Dal Makhani'],",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "BOOKED_TABLE",
        "kind": 5,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "BOOKED_TABLE = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nVEG_MENU = {\n    'Main Course': ['Paneer Tikka Masala', 'Paneer Butter Masala', 'Mix Veg', 'Palak Paneer', 'Yellow Dal Tadka',\n                    'Dal Makhani'],\n    'Starters': ['Veg Lollipop', 'Crispy Corn', 'Veg Kothe', 'Paneer Tikka', '']\n}\nNON_VEG_MENU = {\n    'Main Course': ['Chicken Tikka Masala', 'Chicken Butter Masala', 'Mix Veg', 'Palak Chicken', 'Yellow Dal Tadka',\n                    'Dal Makhani'],\n    'Starters': ['Non Veg Lollipop', 'Crispy Corn', 'Non Veg Kothe', 'Chicken Tikka', '']",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "VEG_MENU",
        "kind": 5,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "VEG_MENU = {\n    'Main Course': ['Paneer Tikka Masala', 'Paneer Butter Masala', 'Mix Veg', 'Palak Paneer', 'Yellow Dal Tadka',\n                    'Dal Makhani'],\n    'Starters': ['Veg Lollipop', 'Crispy Corn', 'Veg Kothe', 'Paneer Tikka', '']\n}\nNON_VEG_MENU = {\n    'Main Course': ['Chicken Tikka Masala', 'Chicken Butter Masala', 'Mix Veg', 'Palak Chicken', 'Yellow Dal Tadka',\n                    'Dal Makhani'],\n    'Starters': ['Non Veg Lollipop', 'Crispy Corn', 'Non Veg Kothe', 'Chicken Tikka', '']\n}",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "NON_VEG_MENU",
        "kind": 5,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "peekOfCode": "NON_VEG_MENU = {\n    'Main Course': ['Chicken Tikka Masala', 'Chicken Butter Masala', 'Mix Veg', 'Palak Chicken', 'Yellow Dal Tadka',\n                    'Dal Makhani'],\n    'Starters': ['Non Veg Lollipop', 'Crispy Corn', 'Non Veg Kothe', 'Chicken Tikka', '']\n}\nclass view_menu:\n    def veg(self):\n        print(\"Welcome to the veg menu\")\n        print(VEG_MENU)\n    def non_veg(self):",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.restaurant",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "peekOfCode": "def factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number - 1)\ndef fibonacci_series(number):\n    if number <= 0:\n        return []\n    elif number == 1:\n        return [0]",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "documentation": {}
    },
    {
        "label": "fibonacci_series",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "peekOfCode": "def fibonacci_series(number):\n    if number <= 0:\n        return []\n    elif number == 1:\n        return [0]\n    elif number == 2:\n        return [0, 1]\n    else:\n        list_of_numbers = [0, 1]\n        while len(list_of_numbers) < number:",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "documentation": {}
    },
    {
        "label": "armstrong_series",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "peekOfCode": "def armstrong_series(number):\n    number_string = str(number)\n    return sum(int(digit) ** len(number_string) for digit in number_string) == number\ndef check_palindrome(argument):\n    argument = str(argument)\n    return argument == argument[::-1]\ndef if_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "documentation": {}
    },
    {
        "label": "check_palindrome",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "peekOfCode": "def check_palindrome(argument):\n    argument = str(argument)\n    return argument == argument[::-1]\ndef if_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "documentation": {}
    },
    {
        "label": "if_leap_year",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "peekOfCode": "def if_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "documentation": {}
    },
    {
        "label": "if_even_odd",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "peekOfCode": "def if_even_odd(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False\ndef repeat_services():\n    yes_or_no = input(\"Do you Wish to Continue y / n : \")\n    if yes_or_no.lower() in ['y', 'yes']:\n        if input(\"Do you want to view menu again y / n : \") in ['y', 'yes']:\n            view_menu()",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "documentation": {}
    },
    {
        "label": "repeat_services",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "peekOfCode": "def repeat_services():\n    yes_or_no = input(\"Do you Wish to Continue y / n : \")\n    if yes_or_no.lower() in ['y', 'yes']:\n        if input(\"Do you want to view menu again y / n : \") in ['y', 'yes']:\n            view_menu()\n            return\n        return\n    else:\n        global Check_Again\n        Check_Again = False",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "documentation": {}
    },
    {
        "label": "choose_service",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "peekOfCode": "def choose_service(service):\n    if service == 1:\n        print(\"You have chosen Factorial Service\")\n        number = int(input(\"Enter a number for factorial: \"))\n        print(factorial(number))\n        repeat_services()\n    elif service == 2:\n        print(\"You have chosen Fibonacci Series Service\")\n        number = int(input(\"Enter a number for fibonacci series: \"))\n        print(fibonacci_series(number))",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "documentation": {}
    },
    {
        "label": "view_menu",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "peekOfCode": "def view_menu():\n    print(\"Welcome to the Services Menu\")\n    print(\"1. Factorial Service\")\n    print(\"2. Fibonacci Series Service\")\n    print(\"3. Armstrong Series Service\")\n    print(\"4. Palindrome Service\")\n    print(\"5. Leap Year Service\")\n    print(\"6. Even or Odd Service\")\nif __name__ == \"__main__\":\n    view_menu()",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.Services",
        "documentation": {}
    },
    {
        "label": "type_of",
        "kind": 2,
        "importPath": "M-05(May).Week-01.07 May.Prods.Class Codes.type_of_values",
        "description": "M-05(May).Week-01.07 May.Prods.Class Codes.type_of_values",
        "peekOfCode": "def type_of(value):\n    print(type(value))\n    print(id(value))\nif __name__ == '__main__':\n    number = 10\n    type_of(number)\n    print(id(number))\n    # checking the types of the values\n    float_number = 10.5\n    type_of(float_number)",
        "detail": "M-05(May).Week-01.07 May.Prods.Class Codes.type_of_values",
        "documentation": {}
    },
    {
        "label": "check_if_all_characters_are_digits",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q1",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q1",
        "peekOfCode": "def check_if_all_characters_are_digits(string):\n    for char in string:\n        if char not in '0123456789':\n            return False\n    return True\nif __name__ == '__main__':\n    text = input(\"Enter the string of numbers: \")\n    print(check_if_all_characters_are_digits(text))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q1",
        "documentation": {}
    },
    {
        "label": "remove_punctuation",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q10",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q10",
        "peekOfCode": "def remove_punctuation(input_string):\n    # Create an empty string to store the result\n    result = \"\"\n    # Iterating through each character in the input string\n    for char in input_string:\n        # If the character is not a punctuation, add it to the result\n        if char not in string.punctuation:\n            result += char\n    return result\ninput_string = \"Hello!, he said, -- I have $45 & you?\"",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q10",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q10",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q10",
        "peekOfCode": "input_string = \"Hello!, he said, -- I have $45 & you?\"\nresult = remove_punctuation(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q10",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q10",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q10",
        "peekOfCode": "result = remove_punctuation(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q10",
        "documentation": {}
    },
    {
        "label": "ReverseWords",
        "kind": 6,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q11",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q11",
        "peekOfCode": "class ReverseWords:\n    def __init__(self, string):\n        self.string = string\n    def reverse_words(self):\n        words = self.string.split()\n        reversed_words = ' '.join(reversed(words))\n        return reversed_words\nstr1 = \"geeks quiz practice code\"\nreverse_words = ReverseWords(str1)\nprint(reverse_words.reverse_words())  # prints: code practice quiz geeks",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q11",
        "documentation": {}
    },
    {
        "label": "str1",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q11",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q11",
        "peekOfCode": "str1 = \"geeks quiz practice code\"\nreverse_words = ReverseWords(str1)\nprint(reverse_words.reverse_words())  # prints: code practice quiz geeks",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q11",
        "documentation": {}
    },
    {
        "label": "reverse_words",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q11",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q11",
        "peekOfCode": "reverse_words = ReverseWords(str1)\nprint(reverse_words.reverse_words())  # prints: code practice quiz geeks",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q11",
        "documentation": {}
    },
    {
        "label": "first_middle_last_chars",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q2",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q2",
        "peekOfCode": "def first_middle_last_chars(str1, str2):\n    # Check if the input strings are empty or have less than 3 characters\n    if not str1 or len(str1) < 3 or not str2 or len(str2) < 3:\n        return \"\"\n    # Find the middle characters of the input strings\n    middle_index1 = len(str1) // 2 - 1\n    middle_index2 = len(str2) // 2 - 1\n    # Create the new string\n    new_string = str1[0] + str2[0] + str1[middle_index1] + str2[middle_index2] + str1[-1] + str2[-1]\n    return new_string",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q2",
        "documentation": {}
    },
    {
        "label": "str1",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q2",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q2",
        "peekOfCode": "str1 = \"Python\"\nstr2 = \"dajngo\"\nprint(first_middle_last_chars(str1, str2))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q2",
        "documentation": {}
    },
    {
        "label": "str2",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q2",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q2",
        "peekOfCode": "str2 = \"dajngo\"\nprint(first_middle_last_chars(str1, str2))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q2",
        "documentation": {}
    },
    {
        "label": "append_string",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q3",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q3",
        "peekOfCode": "def append_string(string):\n    new_string = input(\"Enter the new string you want to append: \")\n    new_string_length = len(new_string)\n    middle_index = int(len(string) / 2)\n    string = string[:middle_index] + new_string + string[middle_index:]\n    print(string)\nstring = input(\"Enter the original string: \")\nappend_string(string)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q3",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q3",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q3",
        "peekOfCode": "string = input(\"Enter the original string: \")\nappend_string(string)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q3",
        "documentation": {}
    },
    {
        "label": "arrange_string_characters",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q4",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q4",
        "peekOfCode": "def arrange_string_characters(input_string):\n    lowercase_letters = [c for c in input_string if c.islower()]\n    uppercase_letters = [c for c in input_string if c.isupper()]\n    other_characters = [c for c in input_string if not c.isalpha()]\n    return ''.join(lowercase_letters + uppercase_letters + other_characters)\ninput_string = \"pYthoNFastAPI\"\nresult = arrange_string_characters(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q4",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q4",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q4",
        "peekOfCode": "input_string = \"pYthoNFastAPI\"\nresult = arrange_string_characters(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q4",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q4",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q4",
        "peekOfCode": "result = arrange_string_characters(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q4",
        "documentation": {}
    },
    {
        "label": "count_letters_digits_symbols",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q5",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q5",
        "peekOfCode": "def count_letters_digits_symbols(input_string):\n    letters = sum(1 for c in input_string if c.isalpha())\n    digits = sum(1 for c in input_string if c.isdigit())\n    symbols = sum(1 for c in input_string if not c.isalnum())\n    return {'chars': letters, 'digits': digits, 'symbols': symbols}\ninput_string = \"P@#yn26at^&i5ve\"\nresult = count_letters_digits_symbols(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q5",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q5",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q5",
        "peekOfCode": "input_string = \"P@#yn26at^&i5ve\"\nresult = count_letters_digits_symbols(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q5",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q5",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q5",
        "peekOfCode": "result = count_letters_digits_symbols(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q5",
        "documentation": {}
    },
    {
        "label": "string_characters_balance_test",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "peekOfCode": "def string_characters_balance_test(s1, s2):\n    for char in s1:\n        if char not in s2:\n            return False\n    return True\ns1 = \"Fo\"\ns2 = \"PythonFastAPI\"\nresult = string_characters_balance_test(s1, s2)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "peekOfCode": "s1 = \"Fo\"\ns2 = \"PythonFastAPI\"\nresult = string_characters_balance_test(s1, s2)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "peekOfCode": "s2 = \"PythonFastAPI\"\nresult = string_characters_balance_test(s1, s2)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "peekOfCode": "result = string_characters_balance_test(s1, s2)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q6",
        "documentation": {}
    },
    {
        "label": "count_char_occurrences",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q7",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q7",
        "peekOfCode": "def count_char_occurrences(input_string):\n    count_dict = {}\n    for char in input_string:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    return count_dict\ninput_string = \"pythonpy\"\nresult = count_char_occurrences(input_string)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q7",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q7",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q7",
        "peekOfCode": "input_string = \"pythonpy\"\nresult = count_char_occurrences(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q7",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q7",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q7",
        "peekOfCode": "result = count_char_occurrences(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q7",
        "documentation": {}
    },
    {
        "label": "find_last_position_of_substring",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "peekOfCode": "def find_last_position_of_substring(input_string, substring):\n    last_position = input_string.rfind(substring)\n    return last_position\ninput_string = \"How much wood would a woodchuck chuck if a woodchuck could chuck wood?\"\nsubstring = \"chuck\"\nresult = find_last_position_of_substring(input_string, substring)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "peekOfCode": "input_string = \"How much wood would a woodchuck chuck if a woodchuck could chuck wood?\"\nsubstring = \"chuck\"\nresult = find_last_position_of_substring(input_string, substring)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "documentation": {}
    },
    {
        "label": "substring",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "peekOfCode": "substring = \"chuck\"\nresult = find_last_position_of_substring(input_string, substring)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "peekOfCode": "result = find_last_position_of_substring(input_string, substring)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q8",
        "documentation": {}
    },
    {
        "label": "split_string_on_hyphens",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q9",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q9",
        "peekOfCode": "def split_string_on_hyphens(input_string):\n    substrings = input_string.split(\"-\")\n    return substrings\ninput_string = \"Violet-Indigo-Blue-Green-Yellow-Orange-Red\"\nresult = split_string_on_hyphens(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q9",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q9",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q9",
        "peekOfCode": "input_string = \"Violet-Indigo-Blue-Green-Yellow-Orange-Red\"\nresult = split_string_on_hyphens(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q9",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q9",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q9",
        "peekOfCode": "result = split_string_on_hyphens(input_string)\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Practice.Q9",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "peekOfCode": "def remove_duplicates(input_string):\n    seen = set()\n    output_string = \"\"\n    for char in input_string:\n        if char not in seen:\n            seen.add(char)\n            output_string += char\n    return output_string\ndef is_palindrome(input_string):\n    return input_string == input_string[::-1]",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "peekOfCode": "def is_palindrome(input_string):\n    return input_string == input_string[::-1]\ndef count_characters(input_string):\n    char_count = {}\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "documentation": {}
    },
    {
        "label": "count_characters",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "peekOfCode": "def count_characters(input_string):\n    char_count = {}\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\ndef reverse_words(input_string):\n    words = input_string.split()",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "documentation": {}
    },
    {
        "label": "reverse_words",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "peekOfCode": "def reverse_words(input_string):\n    words = input_string.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)\n# Example usage:\nif __name__ == '__main__':\n    input_string = \"hello world\"\n    print(remove_duplicates(input_string))\n    print(is_palindrome(\"madam\"))\n    print(count_characters(\"hello\"))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_1",
        "documentation": {}
    },
    {
        "label": "find_most_frequent_word",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_10",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_10",
        "peekOfCode": "def find_most_frequent_word(text: str, stopwords: set = None) -> str:\n    if stopwords is None:\n        stopwords = {\"the\", \"is\", \"and\", \"are\", \"am\", \"a\", \"an\", \"in\", \"it\", \"you\", \"i\", \"to\", \"of\", \"for\", \"on\",\n                     \"that\", \"with\", \"was\", \"he\", \"she\", \"as\", \"his\", \"her\", \"its\", \"had\", \"have\", \"has\", \"but\", \"not\",\n                     \"be\", \"were\", \"by\", \"at\", \"so\", \"we\", \"they\", \"my\", \"your\", \"from\", \"who\", \"which\", \"there\", \"or\",\n                     \"us\", \"this\", \"him\", \"me\", \"what\", \"why\", \"how\", \"when\", \"where\", \"up\", \"down\", \"out\", \"off\",\n                     \"over\", \"under\", \"again\", \"then\", \"once\", \"here\", \"there\", \"all\", \"any\", \"both\", \"each\", \"few\",\n                     \"more\", \"most\", \"other\", \"some\", \"such\", \"no\", \"nor\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\",\n                     \"very\", \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"}\n    text = re.sub(r'[^\\w\\s]', '', text.lower())",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_10",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_10",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_10",
        "peekOfCode": "text = \"The quick brown fox jumps over the lazy dog. The dog is not lazy, it's just tired.\"\nmost_frequent_word = find_most_frequent_word(text)\nprint(\"The most frequent word is:\", most_frequent_word)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_10",
        "documentation": {}
    },
    {
        "label": "most_frequent_word",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_10",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_10",
        "peekOfCode": "most_frequent_word = find_most_frequent_word(text)\nprint(\"The most frequent word is:\", most_frequent_word)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_10",
        "documentation": {}
    },
    {
        "label": "remove_whitespace",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_2",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_2",
        "peekOfCode": "def remove_whitespace(input_string):\n    return input_string.strip()\n# Example usage:\ninput_string = \"   Hello, World!   \"\nprint(remove_whitespace(input_string))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_2",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_2",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_2",
        "peekOfCode": "input_string = \"   Hello, World!   \"\nprint(remove_whitespace(input_string))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_2",
        "documentation": {}
    },
    {
        "label": "extract_emails",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_3",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_3",
        "peekOfCode": "def extract_emails(email):\n    # this is a fucntion to extract all email addresses from the given string\n    pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    # this a regex to identify email addresses by checking all the permutations of valid characters ina an email address\n    emails = re.findall(pattern, email)\n    return emails\ntext = \"Please contact us at aayushjoshi.dev@gmail.com or joshi.aayush@yash.com or merlin%jennifer@neobrite.uk. Thank you.\"\nemails = extract_emails(text)\nprint(emails)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_3",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_3",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_3",
        "peekOfCode": "text = \"Please contact us at aayushjoshi.dev@gmail.com or joshi.aayush@yash.com or merlin%jennifer@neobrite.uk. Thank you.\"\nemails = extract_emails(text)\nprint(emails)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_3",
        "documentation": {}
    },
    {
        "label": "emails",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_3",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_3",
        "peekOfCode": "emails = extract_emails(text)\nprint(emails)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_3",
        "documentation": {}
    },
    {
        "label": "password_strength",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "peekOfCode": "def password_strength(password):\n    if len(password) < 8:\n        return \"Very weak - Less than 8 characters\"\n    has_upper = any(c.isupper() for c in password)\n    if not has_upper:\n        return \"Weak - No uppercase letter\"\n    has_lower = any(c.islower() for c in password)\n    if not has_lower:\n        return \"Weak - No lowercase letter\"\n    has_digit = any(c.isdigit() for c in password)",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "documentation": {}
    },
    {
        "label": "check_password_strength",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "peekOfCode": "def check_password_strength(password):\n    if len(password) < 8:\n        return \"Very weak - Less than 8 characters\"\n    if not re.search(\"[a-z]\", password):\n        return \"Weak - No lowercase letter\"\n    if not re.search(\"[A-Z]\", password):\n        return \"Weak - No uppercase letter\"\n    if not re.search(\"[0-9]\", password):\n        return \"Weak - No digit\"\n    if not re.search(\"[!@#$%^&*(),.?\\\":{}|<>]\", password):",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "peekOfCode": "password = input(\"Enter your password: \")\nprint(password_strength(password))\npassword = input(\"Enter the password: \")\nprint(check_password_strength(password))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "peekOfCode": "password = input(\"Enter the password: \")\nprint(check_password_strength(password))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_4",
        "documentation": {}
    },
    {
        "label": "remove_punctuation",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_5",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_5",
        "peekOfCode": "def remove_punctuation(input_string):\n    # Create an empty string to store the result\n    result = \"\"\n    # Iterating through each character in the input string\n    for char in input_string:\n        # If the character is not a punctuation, add it to the result\n        if char not in string.punctuation:\n            result += char\n    return result\n# Example usage:",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_5",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_5",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_5",
        "peekOfCode": "text = \"Hello, World! This is a test string. We're processing user input for a search feature.\"\nprint(remove_punctuation(text))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_5",
        "documentation": {}
    },
    {
        "label": "format_phone_number",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_6",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_6",
        "peekOfCode": "def format_phone_number(string):\n    # Remove all non-numeric characters from the string\n    numeric_filter = filter(str.isdigit, string)\n    numeric_string = \"\".join(numeric_filter)\n    # Format the string as a phone number (XXX) XXX-XXXX\n    return f\"({numeric_string[:3]}) {numeric_string[3:6]}-{numeric_string[6:10]}\"\n# Example usage\nphone_number = input(\"Enter a phone number: \")\nformatted_phone_number = format_phone_number(phone_number)\nprint(f\"Formatted phone number: {formatted_phone_number}\")",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_6",
        "documentation": {}
    },
    {
        "label": "phone_number",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_6",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_6",
        "peekOfCode": "phone_number = input(\"Enter a phone number: \")\nformatted_phone_number = format_phone_number(phone_number)\nprint(f\"Formatted phone number: {formatted_phone_number}\")",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_6",
        "documentation": {}
    },
    {
        "label": "formatted_phone_number",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_6",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_6",
        "peekOfCode": "formatted_phone_number = format_phone_number(phone_number)\nprint(f\"Formatted phone number: {formatted_phone_number}\")",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_6",
        "documentation": {}
    },
    {
        "label": "extract_words",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_7",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_7",
        "peekOfCode": "def extract_words(text):\n    # Replace punctuation characters with a space and convert to lowercase\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation)).lower()\n    # Split the text into words using space as a separator\n    words = text.split()\n    return words\ndef most_frequent_word(text):\n    # Extract words from the text string\n    words = extract_words(text)\n    # Count the occurrences of each word",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_7",
        "documentation": {}
    },
    {
        "label": "most_frequent_word",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_7",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_7",
        "peekOfCode": "def most_frequent_word(text):\n    # Extract words from the text string\n    words = extract_words(text)\n    # Count the occurrences of each word\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_7",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_7",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_7",
        "peekOfCode": "text = \"Hello, World! This is a test string. We're processing user input for a search feature. Hello, again!\"\nprint(most_frequent_word(text))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_7",
        "documentation": {}
    },
    {
        "label": "longest_vowel_substring",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_8",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_8",
        "peekOfCode": "def longest_vowel_substring(s):\n    vowels = set('aeiou')\n    longest = ''\n    current = ''\n    for char in s:\n        if char.lower() in vowels:\n            current += char\n        else:\n            if len(current) > len(longest):\n                longest = current",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_8",
        "documentation": {}
    },
    {
        "label": "extract_username",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_9",
        "description": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_9",
        "peekOfCode": "def extract_username(email):\n    match = re.match(r'^[^@]+', email)\n    if match:\n        return match.group(0)\n    else:\n        return ''\nif __name__ == '__main__':\n    username = input(\"Enter your email address: \")\n    print(extract_username(username))",
        "detail": "M-05(May).Week-01.08 May.Prods.Assignment.Use_cases.Use_case_9",
        "documentation": {}
    },
    {
        "label": "validate_username",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "peekOfCode": "def validate_username(username):\n    userlist = username.split(' ')\n    if userlist[0] == USER:\n        return True\n    else:\n        return False\ndef without_validation(username):\n    if username == USER:\n        return True\n    else:",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "documentation": {}
    },
    {
        "label": "without_validation",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "peekOfCode": "def without_validation(username):\n    if username == USER:\n        return True\n    else:\n        return False\ndef check_username():\n    username = input('Please enter your username: ')\n    print(without_validation(username))\n    if validate_username(username):\n        return True",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "documentation": {}
    },
    {
        "label": "check_username",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "peekOfCode": "def check_username():\n    username = input('Please enter your username: ')\n    print(without_validation(username))\n    if validate_username(username):\n        return True\n    else:\n        return False\nprint(check_username())",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "documentation": {}
    },
    {
        "label": "USER",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "peekOfCode": "USER = 'aayush'\ndef validate_username(username):\n    userlist = username.split(' ')\n    if userlist[0] == USER:\n        return True\n    else:\n        return False\ndef without_validation(username):\n    if username == USER:\n        return True",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.Check_Username_space",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.remove_duplicates_from_string",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.remove_duplicates_from_string",
        "peekOfCode": "input_string = input(\"Enter the the string you want : \")\nresult = ''\nfor char in input_string:\n    if char not in result:\n        result = result + char\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.remove_duplicates_from_string",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.remove_duplicates_from_string",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.remove_duplicates_from_string",
        "peekOfCode": "result = ''\nfor char in input_string:\n    if char not in result:\n        result = result + char\nprint(result)",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.remove_duplicates_from_string",
        "documentation": {}
    },
    {
        "label": "reverse_sentence",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.Reverse_sentences",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.Reverse_sentences",
        "peekOfCode": "def reverse_sentence(s):\n    return \" \".join(s.split(\" \")[::-1])\nprint(reverse_sentence(\"Hello World and I am Aayush\"))",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.Reverse_sentences",
        "documentation": {}
    },
    {
        "label": "get_name",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "peekOfCode": "def get_name():\n    name = input(\"Enter your name: \")\n    if len(name) >= 3:\n        return name\n    else:\n        print(\"Your name should be greater than 3 characters\")\n        get_name()\ndef get_usermail(name):\n    usermail = input(\"Enter your usermail: \")\n    if name in usermail[:len(name)]:",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "documentation": {}
    },
    {
        "label": "get_usermail",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "peekOfCode": "def get_usermail(name):\n    usermail = input(\"Enter your usermail: \")\n    if name in usermail[:len(name)]:\n        return usermail, name\n    else:\n        print(\"Your usermail should start with your name\")\n        get_usermail(name)\ndef get_password(func):\n    usermail, name = func\n    password = input(\"Enter your password: \")",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "documentation": {}
    },
    {
        "label": "get_password",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "peekOfCode": "def get_password(func):\n    usermail, name = func\n    password = input(\"Enter your password: \")\n    if name not in password and usermail not in password:\n        return password\n    else:\n        print(\"Your password should not contain your name or usermail\")\n        get_password(func)\ndef signup():\n    get_password(get_usermail(get_name()))",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "peekOfCode": "def signup():\n    get_password(get_usermail(get_name()))\nif __name__ == '__main__':\n    signup()",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.Signup",
        "documentation": {}
    },
    {
        "label": "new",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.String_demo",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.String_demo",
        "peekOfCode": "new = \"Hello\"\nprint(new)\nnew = new + \"Worlds\"\nprint(new)",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.String_demo",
        "documentation": {}
    },
    {
        "label": "new",
        "kind": 5,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.String_demo",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.String_demo",
        "peekOfCode": "new = new + \"Worlds\"\nprint(new)",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.String_demo",
        "documentation": {}
    },
    {
        "label": "get_input_string",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "peekOfCode": "def get_input_string():\n    return input(\"Enter the string: \")\ndef reverse_string(string):  # to reverse the string\n    reverse_string = string[::-1]\n    return reverse_string\ndef consonant_vowel_count(string):  # Count the Vowels and Consonants and return both\n    consonant_count = 0\n    vowel_count = 0\n    for char in string:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "documentation": {}
    },
    {
        "label": "reverse_string",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "peekOfCode": "def reverse_string(string):  # to reverse the string\n    reverse_string = string[::-1]\n    return reverse_string\ndef consonant_vowel_count(string):  # Count the Vowels and Consonants and return both\n    consonant_count = 0\n    vowel_count = 0\n    for char in string:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            vowel_count += 1\n        else:",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "documentation": {}
    },
    {
        "label": "consonant_vowel_count",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "peekOfCode": "def consonant_vowel_count(string):  # Count the Vowels and Consonants and return both\n    consonant_count = 0\n    vowel_count = 0\n    for char in string:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return consonant_count, vowel_count\ndef count_total_count(string):  # count the characters in a string",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "documentation": {}
    },
    {
        "label": "count_total_count",
        "kind": 2,
        "importPath": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "description": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "peekOfCode": "def count_total_count(string):  # count the characters in a string\n    total_count = 0\n    for char in string:\n        total_count += 1\n    return total_count\nif __name__ == '__main__':\n    string = get_input_string()\n    print(f\"The reversed string is: {reverse_string(string)}\")\n    consonant, vowel = consonant_vowel_count(string)\n    print(f\"The Count Consonant: {consonant} and Count vowel: {vowel}\")",
        "detail": "M-05(May).Week-01.08 May.Prods.Class Codes.string_operations",
        "documentation": {}
    },
    {
        "label": "collect_survey_responses",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_1",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_1",
        "peekOfCode": "def collect_survey_responses():\n    responses = []\n    while True:\n        user_input = input(\"Please enter your response (or 'quit' to finish): \")\n        if user_input.lower() == 'quit':\n            break\n        response_data = {\n            'response_text': user_input,\n            'response_number': len(responses) + 1\n        }",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_1",
        "documentation": {}
    },
    {
        "label": "print_survey_responses",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_1",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_1",
        "peekOfCode": "def print_survey_responses(responses):\n    print(\"Survey responses:\")\n    for response in responses:\n        print(f\"Response {response['response_number']}: {response['response_text']}\")\nif __name__ == '__main__':\n    responses = collect_survey_responses()\n    print_survey_responses(responses)",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_1",
        "documentation": {}
    },
    {
        "label": "merge_sort_appointments",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_10",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_10",
        "peekOfCode": "def merge_sort_appointments(appointments1, appointments2):\n    merged_appointments = appointments1 + appointments2\n    merged_appointments.sort(key=lambda x: x['start_time'])\n    return merged_appointments\nif __name__ == '__main__':\n    appointments1 = [\n        {'name': 'Meeting with John', 'start_time': datetime.datetime(2023, 3, 15, 10, 0),\n         'end_time': datetime.datetime(2023, 3, 15, 11, 0)},\n        {'name': 'Lunch with Sarah', 'start_time': datetime.datetime(2023, 3, 15, 12, 0),\n         'end_time': datetime.datetime(2023, 3, 15, 13, 0)}",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_10",
        "documentation": {}
    },
    {
        "label": "find_items_to_restock",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_11",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_11",
        "peekOfCode": "def find_items_to_restock(items, min_threshold):\n    items_to_restock = []\n    for item in items:\n        if item['quantity'] < min_threshold:\n            items_to_restock.append(item)\n    return items_to_restock\nif __name__ == '__main__':\n    items = [\n        {'name': 'item1', 'quantity': 15},\n        {'name': 'item2', 'quantity': 5},",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_11",
        "documentation": {}
    },
    {
        "label": "calculate_total_duration",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_12",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_12",
        "peekOfCode": "def calculate_total_duration(tasks):\n    total_duration = 0\n    for task in tasks:\n        total_duration += task['duration']\n    return total_duration\nif __name__ == '__main__':\n    tasks = [\n        {'duration': 3},\n        {'duration': 2},\n        {'duration': 5},",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_12",
        "documentation": {}
    },
    {
        "label": "most_frequent_products",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_13",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_13",
        "peekOfCode": "def most_frequent_products(orders):\n    # Flatten the list of orders into a single list of products\n    products = [product for order in orders for product in order]\n    # Count the occurrences of each product\n    product_counts = Counter(products)\n    # Return the n most frequent products\n    return product_counts.most_common()\nif __name__ == '__main__':\n    orders = [\n        ['product1', 'product2', 'product3'],",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_13",
        "documentation": {}
    },
    {
        "label": "correlation_coefficient",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_14",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_14",
        "peekOfCode": "def correlation_coefficient(list1, list2):\n    n = len(list1)\n    sum_x = sum(list1)\n    sum_y = sum(list2)\n    sum_xy = sum([x * y for x, y in zip(list1, list2)])\n    sum_x2 = sum([x ** 2 for x in list1])\n    sum_y2 = sum([y ** 2 for y in list2])\n    #            n(Σxy)−(Σx)(Σy)\n    # r = ----------------------------\n    #    (√[nΣx2−(Σx)^2][nΣy2−(Σy)^2])",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_14",
        "documentation": {}
    },
    {
        "label": "filter_sequences_by_length",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_15",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_15",
        "peekOfCode": "def filter_sequences_by_length(sequences, min_length):\n    filtered_sequences = []\n    for sequence in sequences:\n        if len(sequence) >= min_length:\n            filtered_sequences.append(sequence)\n    return filtered_sequences\nif __name__ == '__main__':\n    sequences = [\n        'ATGCGATCGATCGATCGATCGATCG',\n        'ATG',",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_15",
        "documentation": {}
    },
    {
        "label": "total_hours_worked",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_16",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_16",
        "peekOfCode": "def total_hours_worked(shifts):\n    total_hours = {}\n    for shift in shifts:\n        employee_id, hours = shift\n        if employee_id not in total_hours:\n            total_hours[employee_id] = 0\n        total_hours[employee_id] += hours\n    return total_hours\nif __name__ == '__main__':\n    shifts = [(1, 8), (2, 6), (1, 4), (3, 7), (2, 3)]",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_16",
        "documentation": {}
    },
    {
        "label": "mode",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_17",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_17",
        "peekOfCode": "def mode(responses):\n    from collections import Counter\n    counter = Counter(responses)\n    mode = counter.most_common(1)\n    if mode:\n        return mode[0][0]\n    else:\n        return None\nif __name__ == '__main__':\n    responses = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_17",
        "documentation": {}
    },
    {
        "label": "most_popular_courses",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_18",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_18",
        "peekOfCode": "def most_popular_courses(enrollments):\n    course_counts = {}\n    for enrollment in enrollments:\n        course = enrollment['course']\n        if course not in course_counts:\n            course_counts[course] = 0\n        course_counts[course] += 1\n    most_popular_course = max(course_counts, key=course_counts.get)\n    return most_popular_course, course_counts[most_popular_course]\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_18",
        "documentation": {}
    },
    {
        "label": "percentage_of_mobile_users",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_19",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_19",
        "peekOfCode": "def percentage_of_mobile_users(user_agents):\n    mobile_user_agents = [ua for ua in user_agents if \"Mobile\" in ua]\n    total_user_agents = len(user_agents)\n    mobile_user_agents_count = len(mobile_user_agents)\n    percentage = (mobile_user_agents_count / total_user_agents) * 100\n    return percentage\nif __name__ == '__main__':\n    user_agents = [\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\",\n        \"Mozilla/5.0 (iPhone; CPU iPhone OS 15_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/115.0.0.0 Mobile/15E148 Safari/604.1\",",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_19",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_2",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_2",
        "peekOfCode": "def add_task(tasks, task):\n    tasks.append(task)\ndef remove_task(tasks, task_index):\n    if 0 <= task_index < len(tasks):\n        tasks.pop(task_index)\n    else:\n        print(\"Invalid task index.\")\ndef view_tasks(tasks):\n    print(\"Tasks:\")\n    for i, task in enumerate(tasks, start=1):",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_2",
        "documentation": {}
    },
    {
        "label": "remove_task",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_2",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_2",
        "peekOfCode": "def remove_task(tasks, task_index):\n    if 0 <= task_index < len(tasks):\n        tasks.pop(task_index)\n    else:\n        print(\"Invalid task index.\")\ndef view_tasks(tasks):\n    print(\"Tasks:\")\n    for i, task in enumerate(tasks, start=1):\n        print(f\"{i}. {task}\")\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_2",
        "documentation": {}
    },
    {
        "label": "view_tasks",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_2",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_2",
        "peekOfCode": "def view_tasks(tasks):\n    print(\"Tasks:\")\n    for i, task in enumerate(tasks, start=1):\n        print(f\"{i}. {task}\")\nif __name__ == '__main__':\n    tasks = []\n    while True:\n        user_input = input(\"Enter 'add', 'remove', 'view', or 'quit': \")\n        if user_input.lower() == 'quit':\n            break",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_2",
        "documentation": {}
    },
    {
        "label": "add_grades",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_3",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_3",
        "peekOfCode": "def add_grades(grades, new_grades):\n    grades.extend(new_grades)\ndef calculate_average(grades):\n    if len(grades) == 0:\n        return 0\n    return sum(grades) / len(grades)\nif __name__ == '__main__':\n    grades = []\n    while True:\n        user_input = input(\"Enter 'add', 'Calculator', or 'quit': \")",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_3",
        "documentation": {}
    },
    {
        "label": "calculate_average",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_3",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_3",
        "peekOfCode": "def calculate_average(grades):\n    if len(grades) == 0:\n        return 0\n    return sum(grades) / len(grades)\nif __name__ == '__main__':\n    grades = []\n    while True:\n        user_input = input(\"Enter 'add', 'Calculator', or 'quit': \")\n        if user_input.lower() == 'quit':\n            break",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_3",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_4",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_4",
        "peekOfCode": "def add_task(tasks, task):\n    tasks.append(task)\ndef remove_task(tasks, task):\n    if task in tasks:\n        tasks.remove(task)\ndef mark_task_completed(tasks, task):\n    if task in tasks:\n        tasks[tasks.index(task)] = f\"{task} (completed)\"\nif __name__ == '__main__':\n    tasks = []",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_4",
        "documentation": {}
    },
    {
        "label": "remove_task",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_4",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_4",
        "peekOfCode": "def remove_task(tasks, task):\n    if task in tasks:\n        tasks.remove(task)\ndef mark_task_completed(tasks, task):\n    if task in tasks:\n        tasks[tasks.index(task)] = f\"{task} (completed)\"\nif __name__ == '__main__':\n    tasks = []\n    while True:\n        user_input = input(\"Enter 'add', 'remove', 'mark', or 'quit': \")",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_4",
        "documentation": {}
    },
    {
        "label": "mark_task_completed",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_4",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_4",
        "peekOfCode": "def mark_task_completed(tasks, task):\n    if task in tasks:\n        tasks[tasks.index(task)] = f\"{task} (completed)\"\nif __name__ == '__main__':\n    tasks = []\n    while True:\n        user_input = input(\"Enter 'add', 'remove', 'mark', or 'quit': \")\n        if user_input.lower() == 'quit':\n            break\n        elif user_input.lower() == 'add':",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_4",
        "documentation": {}
    },
    {
        "label": "add_customer",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_5",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_5",
        "peekOfCode": "def add_customer(queue, customer):\n    queue.append(customer)\ndef remove_customer(queue):\n    if len(queue) > 0:\n        return queue.pop(0)\n    else:\n        return None\ndef serve_customer(queue):\n    customer = remove_customer(queue)\n    if customer is not None:",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_5",
        "documentation": {}
    },
    {
        "label": "remove_customer",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_5",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_5",
        "peekOfCode": "def remove_customer(queue):\n    if len(queue) > 0:\n        return queue.pop(0)\n    else:\n        return None\ndef serve_customer(queue):\n    customer = remove_customer(queue)\n    if customer is not None:\n        print(f\"Now serving {customer}.\")\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_5",
        "documentation": {}
    },
    {
        "label": "serve_customer",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_5",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_5",
        "peekOfCode": "def serve_customer(queue):\n    customer = remove_customer(queue)\n    if customer is not None:\n        print(f\"Now serving {customer}.\")\nif __name__ == '__main__':\n    queue = []\n    while True:\n        user_input = input(\"Enter 'add', 'serve', or 'quit': \")\n        if user_input.lower() == 'quit':\n            break",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_5",
        "documentation": {}
    },
    {
        "label": "remove_book",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_6",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_6",
        "peekOfCode": "def remove_book(books, title):\n    for i, book in enumerate(books):\n        if book[\"title\"] == title:\n            del books[i]\n            print(f\"'{title}' has been removed from the inventory.\")\n            return\n    print(f\"'{title}' not found in the inventory.\")\nif __name__ == '__main__':\n    books = [\n        {\"title\": \"The Great Gatsby\", \"author\": \"F. Scott Fitzgerald\"},",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_6",
        "documentation": {}
    },
    {
        "label": "median",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_7",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_7",
        "peekOfCode": "def median(scores):\n    scores.sort()\n    n = len(scores)\n    if n % 2 == 0:\n        median = (scores[n // 2 - 1] + scores[n // 2]) / 2\n    else:\n        median = scores[n // 2]\n    return median\nif __name__ == '__main__':\n    scores = [85, 90, 78, 92, 88, 76, 95, 89]",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_7",
        "documentation": {}
    },
    {
        "label": "shuffle_questions",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_8",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_8",
        "peekOfCode": "def shuffle_questions(questions):\n    random.shuffle(questions)\n    return questions\nif __name__ == '__main__':\n    questions = [\n        \"What is the capital of France?\",\n        \"What is the capital of India?\",\n        \"What is the capital of Germany?\",\n        \"What is the capital of China?\",\n        \"What is the capital of United States?\",",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_8",
        "documentation": {}
    },
    {
        "label": "average_price",
        "kind": 2,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_9",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_9",
        "peekOfCode": "def average_price(menu, section):\n    items = menu.get(section, [])\n    total_price = sum(item['price'] for item in items)\n    average_price = total_price / len(items) if items else 0\n    return average_price\nif __name__ == '__main__':\n    menu = {\n        'Appetizers': [\n            {'name': 'Bruschetta', 'price': 7.99},\n            {'name': 'Calamari', 'price': 9.99},",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.usecases.Use_case_9",
        "documentation": {}
    },
    {
        "label": "TaskManager",
        "kind": 6,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.task_management_application",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.task_management_application",
        "peekOfCode": "class TaskManager:\n    \"\"\"Task manager class\"\"\"\n    def __init__(self):\n        self.tasks = []\n    def add_task(self, task_title: str, status: str) -> None:\n        \"\"\"Add a new task\"\"\"\n        self.tasks.append({\"id\": len(self.tasks) + 1, \"title\": task_title.lower(), \"status\": status.lower()})\n    def remove_task(self, task_id: int) -> None:\n        \"\"\"Remove a task by ID\"\"\"\n        self.tasks = [task for task in self.tasks if task[\"id\"] != task_id]",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.task_management_application",
        "documentation": {}
    },
    {
        "label": "Login",
        "kind": 6,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.task_management_application",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.task_management_application",
        "peekOfCode": "class Login:\n    \"\"\"Login class\"\"\"\n    def sign_in(self) -> bool:\n        \"\"\"Sign in with username and password\"\"\"\n        username, password = self.get_user_pass()\n        return username == \"admin\" and password == \"123456\"\n    @staticmethod\n    def get_user_pass() -> tuple:\n        \"\"\"Get username and password from user\"\"\"\n        username = input(\"Enter your username: \")",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.task_management_application",
        "documentation": {}
    },
    {
        "label": "ServiceManager",
        "kind": 6,
        "importPath": "M-05(May).Week-01.09 May.Prods.Assignment.task_management_application",
        "description": "M-05(May).Week-01.09 May.Prods.Assignment.task_management_application",
        "peekOfCode": "class ServiceManager:\n    \"\"\"Service manager class\"\"\"\n    def __init__(self):\n        self.task_manager = TaskManager()\n        self.login = Login()\n    @staticmethod\n    def print_services() -> None:\n        \"\"\"Print available services\"\"\"\n        print(\"--------------------------------------------\")\n        print(\"1: Add Task\")",
        "detail": "M-05(May).Week-01.09 May.Prods.Assignment.task_management_application",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "M-05(May).Week-01.09 May.Prods.Class Codes.comprehensions",
        "description": "M-05(May).Week-01.09 May.Prods.Class Codes.comprehensions",
        "peekOfCode": "items = []\nfor val in range(1, 11):\n    items.append(val * val)\nprint(items)\nprint([item * item for item in range(1, 11) if item % 2 == 0])",
        "detail": "M-05(May).Week-01.09 May.Prods.Class Codes.comprehensions",
        "documentation": {}
    },
    {
        "label": "emp_name",
        "kind": 5,
        "importPath": "M-05(May).Week-01.09 May.Prods.Class Codes.nested_list",
        "description": "M-05(May).Week-01.09 May.Prods.Class Codes.nested_list",
        "peekOfCode": "emp_name = [\n    'amit',\n    [\n        'dept', 'IT', 'email', 'amit@gmail.com'\n    ],\n    'aarvi',\n    [\n        'dept', 'MECH', 'email', 'aarvi@gmail.com'\n    ],\n    'aayush',",
        "detail": "M-05(May).Week-01.09 May.Prods.Class Codes.nested_list",
        "documentation": {}
    },
    {
        "label": "task_manager",
        "kind": 6,
        "importPath": "M-05(May).Week-01.09 May.Prods.Class Codes.task_management_application",
        "description": "M-05(May).Week-01.09 May.Prods.Class Codes.task_management_application",
        "peekOfCode": "class task_manager:\n    task_id = []\n    task_list = []\n    task_status = []\n    def add_task(self, id, task, status):\n        self.task_id.append(id)\n        self.task_list.append(task.lower())\n        self.task_status.append(status.lower())\n    def remove_task(self, id):\n        index = self.task_id.remove(id)",
        "detail": "M-05(May).Week-01.09 May.Prods.Class Codes.task_management_application",
        "documentation": {}
    },
    {
        "label": "services",
        "kind": 6,
        "importPath": "M-05(May).Week-01.09 May.Prods.Class Codes.task_management_application",
        "description": "M-05(May).Week-01.09 May.Prods.Class Codes.task_management_application",
        "peekOfCode": "class services:\n    def print_services(self):\n        print(\"1: Add Task \")\n        print(\"2: Update Task Status \")\n        print(\"3: Remove Task \")\n        print(\"4: Show Task \")\n        print(\"5: Find Task with Id \")\n        print(\"6: Update Task Substring \")\n        print(\"7: Find Task with Status \")\n    def get_services(self):",
        "detail": "M-05(May).Week-01.09 May.Prods.Class Codes.task_management_application",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 6,
        "importPath": "M-05(May).Week-01.09 May.Prods.Class Codes.task_management_application",
        "description": "M-05(May).Week-01.09 May.Prods.Class Codes.task_management_application",
        "peekOfCode": "class login:\n    def sign_in(self):\n        username, password = self.get_user_pass()\n        if username == \"admin\" and password == \"123456\":\n            return True\n        else:\n            return False\n    def get_user_pass(self):\n        username = input(\"Enter your username: \")\n        password = input(\"Enter your password: \")",
        "detail": "M-05(May).Week-01.09 May.Prods.Class Codes.task_management_application",
        "documentation": {}
    },
    {
        "label": "EmployeeManagementSystem",
        "kind": 6,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dict UseCases.Employees",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dict UseCases.Employees",
        "peekOfCode": "class EmployeeManagementSystem:\n    def __init__(self):\n        self.employees = {}\n    def add_employee(self):\n        while True:\n            try:\n                e_id = int(input(\"Enter employee ID: \"))\n                if e_id in self.employees:\n                    print(\"Employee ID already exists!\")\n                else:",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dict UseCases.Employees",
        "documentation": {}
    },
    {
        "label": "list_to_dict",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q1",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q1",
        "peekOfCode": "def list_to_dict(lst):\n    groups = {}\n    for item in lst:\n        if item in groups:\n            groups[item].append(item)\n        else:\n            groups[item] = [item]\n    return groups\ntest_list = [4, 6, 6, 4, 2, 2, 4, 8, 5, 8]\nresult = list_to_dict(test_list)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q1",
        "documentation": {}
    },
    {
        "label": "test_list",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q1",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q1",
        "peekOfCode": "test_list = [4, 6, 6, 4, 2, 2, 4, 8, 5, 8]\nresult = list_to_dict(test_list)\nprint(result)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q1",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q1",
        "peekOfCode": "result = list_to_dict(test_list)\nprint(result)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q1",
        "documentation": {}
    },
    {
        "label": "segregate",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q2",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q2",
        "peekOfCode": "def segregate(dicts_list):\n    result = []\n    for d in dicts_list:\n        result.extend(list(d.items()))\n    return result\ninput_list = [{'Gfg': 123, 'best': 10}, {'Gfg': 51, 'best': 7}]\nresult = segregate(input_list)\nprint(result)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q2",
        "documentation": {}
    },
    {
        "label": "input_list",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q2",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q2",
        "peekOfCode": "input_list = [{'Gfg': 123, 'best': 10}, {'Gfg': 51, 'best': 7}]\nresult = segregate(input_list)\nprint(result)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q2",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q2",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q2",
        "peekOfCode": "result = segregate(input_list)\nprint(result)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q2",
        "documentation": {}
    },
    {
        "label": "print_distinct_values",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q3",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q3",
        "peekOfCode": "def print_distinct_values(dct):\n    values = set()\n    for d in dct:\n        values.add(list(d.values())[0])\n    print(values)\ninput_dict = [{'V': 'S001'}, {'V': 'S002'}, {'VI': 'S001'}, {'VI': 'S005'}, {'VII': 'S005'}, {'V': 'S009'},\n              {'VIII': 'S007'}]\nprint_distinct_values(input_dict)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q3",
        "documentation": {}
    },
    {
        "label": "input_dict",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q3",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q3",
        "peekOfCode": "input_dict = [{'V': 'S001'}, {'V': 'S002'}, {'VI': 'S001'}, {'VI': 'S005'}, {'VII': 'S005'}, {'V': 'S009'},\n              {'VIII': 'S007'}]\nprint_distinct_values(input_dict)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q3",
        "documentation": {}
    },
    {
        "label": "find_highest_values",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q4",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q4",
        "peekOfCode": "def find_highest_values(dct, n=3):\n    values = list(dct.values())\n    max_values = sorted(values, reverse=True)[:n]\n    keys = [k for k, v in dct.items() if v in max_values]\n    return keys\nmy_dict = {'a': 500, 'b': 5874, 'c': 560, 'd': 400, 'e': 5874, 'f': 20}\nresult = find_highest_values(my_dict)\nprint(result)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q4",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q4",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q4",
        "peekOfCode": "my_dict = {'a': 500, 'b': 5874, 'c': 560, 'd': 400, 'e': 5874, 'f': 20}\nresult = find_highest_values(my_dict)\nprint(result)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q4",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q4",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q4",
        "peekOfCode": "result = find_highest_values(my_dict)\nprint(result)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q4",
        "documentation": {}
    },
    {
        "label": "combine_values",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q5",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q5",
        "peekOfCode": "def combine_values(item_list):\n    result = {}\n    for item in item_list:\n        result[item['item']] = result.get(item['item'], 0) + item['amount']\n    return result\nif __name__ == '__main__':\n    item_list = [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, {'item': 'item1', 'amount': 750}]\n    print(combine_values(item_list))",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q5",
        "documentation": {}
    },
    {
        "label": "sort_list_in_dict",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q6",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q6",
        "peekOfCode": "def sort_list_in_dict(dictionary):\n    result = {}\n    for key, value in dictionary.items():\n        result[key] = sorted(value)\n    return result\nif __name__ == '__main__':\n    num = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}\n    print(sort_list_in_dict(num))",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q6",
        "documentation": {}
    },
    {
        "label": "count_items_in_list",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q7",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q7",
        "peekOfCode": "def count_items_in_list(d):\n    return sum(len(v) for v in d.values())\nif __name__ == '__main__':\n    dict = {'Alex': ['subj1', 'subj2', 'subj3'], 'David': ['subj1', 'subj2']}\n    print(count_items_in_list(dict))",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q7",
        "documentation": {}
    },
    {
        "label": "remove_duplicates_in_dict_values",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q8",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q8",
        "peekOfCode": "def remove_duplicates_in_dict_values(dictionary):\n    result = {}\n    for key, value in dictionary.items():\n        unique_values = list(set(value))\n        if unique_values:\n            result[key] = unique_values[-1] if len(unique_values) == 1 else unique_values[1:]\n        else:\n            result[key] = []\n    return result\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q8",
        "documentation": {}
    },
    {
        "label": "count_frequencies",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q9",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q9",
        "peekOfCode": "def count_frequencies(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\nif __name__ == '__main__':\n    input_list = [1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Practice.Q9",
        "documentation": {}
    },
    {
        "label": "add_student",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q1",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q1",
        "peekOfCode": "def add_student(name, age, grade, student_records):\n    new_student = {'name': name, 'age': age, 'grade': grade}\n    student_records[name] = new_student\ndef modify_student(name, age=None, grade=None, student_records=None):\n    if student_records is None:\n        student_records = student_records\n    if age is not None:\n        student_records[name]['age'] = age\n    if grade is not None:\n        student_records[name]['grade'] = grade",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q1",
        "documentation": {}
    },
    {
        "label": "modify_student",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q1",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q1",
        "peekOfCode": "def modify_student(name, age=None, grade=None, student_records=None):\n    if student_records is None:\n        student_records = student_records\n    if age is not None:\n        student_records[name]['age'] = age\n    if grade is not None:\n        student_records[name]['grade'] = grade\ndef remove_student(name, student_records=None):\n    if student_records is None:\n        student_records = student_records",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q1",
        "documentation": {}
    },
    {
        "label": "remove_student",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q1",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q1",
        "peekOfCode": "def remove_student(name, student_records=None):\n    if student_records is None:\n        student_records = student_records\n    del student_records[name]\nif __name__ == '__main__':\n    student_records = {\n        'aayush': {'age': 18, 'grade': 'A'},\n        'prankur': {'age': 17, 'grade': 'B'},\n        'aaditya': {'age': 16, 'grade': 'A-'}\n    }",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q1",
        "documentation": {}
    },
    {
        "label": "calculate_total_revenue",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q10",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q10",
        "peekOfCode": "def calculate_total_revenue(sales_data):\n    total_revenue = 0\n    for sale in sales_data:\n        total_revenue += sale['price'] * sale['quantity_sold']\n    return total_revenue\ndef get_best_selling_product(sales_data):\n    best_selling_product = None\n    max_quantity_sold = 0\n    for sale in sales_data:\n        if sale['quantity_sold'] > max_quantity_sold:",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q10",
        "documentation": {}
    },
    {
        "label": "get_best_selling_product",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q10",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q10",
        "peekOfCode": "def get_best_selling_product(sales_data):\n    best_selling_product = None\n    max_quantity_sold = 0\n    for sale in sales_data:\n        if sale['quantity_sold'] > max_quantity_sold:\n            max_quantity_sold = sale['quantity_sold']\n            best_selling_product = sale\n    return best_selling_product\ndef calculate_total_profit_margin(sales_data):\n    total_profit_margin = 0",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q10",
        "documentation": {}
    },
    {
        "label": "calculate_total_profit_margin",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q10",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q10",
        "peekOfCode": "def calculate_total_profit_margin(sales_data):\n    total_profit_margin = 0\n    for sale in sales_data:\n        profit_margin = (sale['price'] - sale['cost_price']) * sale['quantity_sold']\n        total_profit_margin += profit_margin\n    return total_profit_margin\nif __name__ == '__main__':\n    sales_data = [\n        {'product_id': 1001, 'product_name': 'Laptop', 'quantity_sold': 10, 'price': 800, 'cost_price': 600},\n        {'product_id': 1002, 'product_name': 'Smartphone', 'quantity_sold': 20, 'price': 600, 'cost_price': 400},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q10",
        "documentation": {}
    },
    {
        "label": "search_products",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q11",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q11",
        "peekOfCode": "def search_products(products, search_criteria):\n    matching_products = []\n    for product in products:\n        for key, value in search_criteria.items():\n            if key == 'price_range':\n                if product['price'] >= value[0] and product['price'] <= value[1]:\n                    matching_products.append(product)\n                    break\n            else:\n                if product[key] == value:",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q11",
        "documentation": {}
    },
    {
        "label": "calculate_total_amount",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q12",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q12",
        "peekOfCode": "def calculate_total_amount(order):\n    total_amount = 0\n    for item in order['items']:\n        total_amount += item['price'] * item['quantity'] * (1 - item['discount'])\n    return total_amount\ndef calculate_total_discount(order):\n    total_discount = 0\n    for item in order['items']:\n        total_discount += item['price'] * item['quantity'] * item['discount']\n    return total_discount",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q12",
        "documentation": {}
    },
    {
        "label": "calculate_total_discount",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q12",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q12",
        "peekOfCode": "def calculate_total_discount(order):\n    total_discount = 0\n    for item in order['items']:\n        total_discount += item['price'] * item['quantity'] * item['discount']\n    return total_discount\nif __name__ == '__main__':\n    order = {\n        'order_id': 1001,\n        'customer_name': 'John Doe',\n        'items': [",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q12",
        "documentation": {}
    },
    {
        "label": "add_student",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "peekOfCode": "def add_student(students, student):\n    students.append(student)\ndef update_student(students, student_id, new_name, new_gpa):\n    for student in students:\n        if student['student_id'] == student_id:\n            student['name'] = new_name\n            student['gpa'] = new_gpa\n            break\ndef remove_student(students, student_id):\n    for i, student in enumerate(students):",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "documentation": {}
    },
    {
        "label": "update_student",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "peekOfCode": "def update_student(students, student_id, new_name, new_gpa):\n    for student in students:\n        if student['student_id'] == student_id:\n            student['name'] = new_name\n            student['gpa'] = new_gpa\n            break\ndef remove_student(students, student_id):\n    for i, student in enumerate(students):\n        if student['student_id'] == student_id:\n            del students[i]",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "documentation": {}
    },
    {
        "label": "remove_student",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "peekOfCode": "def remove_student(students, student_id):\n    for i, student in enumerate(students):\n        if student['student_id'] == student_id:\n            del students[i]\n            break\ndef get_student_with_highest_gpa(students):\n    return max(students, key=lambda x: x['gpa'])\nif __name__ == '__main__':\n    students = [\n        {'student_id': 1001, 'name': 'aayush', 'gpa': 3.8},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "documentation": {}
    },
    {
        "label": "get_student_with_highest_gpa",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "peekOfCode": "def get_student_with_highest_gpa(students):\n    return max(students, key=lambda x: x['gpa'])\nif __name__ == '__main__':\n    students = [\n        {'student_id': 1001, 'name': 'aayush', 'gpa': 3.8},\n        {'student_id': 1002, 'name': 'prankur', 'gpa': 3.6},\n        {'student_id': 1003, 'name': 'ishaan', 'gpa': 3.9},\n        {'student_id': 1004, 'name': 'aaditya', 'gpa': 3.7},\n    ]\n    new_student = {'student_id': 1005, 'name': 'aaditya', 'gpa': 3.9}",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q13",
        "documentation": {}
    },
    {
        "label": "get_library_summary",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q14",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q14",
        "peekOfCode": "def get_library_summary(books):\n    total_books = len(books)\n    total_rating = sum(book['rating'] for book in books)\n    average_rating = total_rating / total_books\n    highest_rated_book = max(books, key=lambda x: x['rating'])\n    return {\n        'total_books': total_books,\n        'average_rating': average_rating,\n        'highest_rated_book': highest_rated_book,\n    }",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q14",
        "documentation": {}
    },
    {
        "label": "search_books_by_genre",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q14",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q14",
        "peekOfCode": "def search_books_by_genre(books, genre):\n    return [book for book in books if book['genre'] == genre]\nif __name__ == '__main__':\n    books = [\n        {'title': 'To Kill a Mockingbird', 'author': 'Harper Lee', 'rating': 4.5, 'genre': 'Fiction'},\n        {'title': '1984', 'author': 'George Orwell', 'rating': 4.2, 'genre': 'Science Fiction'},\n        {'title': 'The Great Gatsby', 'author': 'F. Scott Fitzgerald', 'rating': 4.3, 'genre': 'Fiction'},\n        {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger', 'rating': 4.0, 'genre': 'Fiction'},\n        {'title': 'Brave New World', 'author': 'Aldous Huxley', 'rating': 4.1, 'genre': 'Science Fiction'},\n    ]",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q14",
        "documentation": {}
    },
    {
        "label": "display_vehicles",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q15",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q15",
        "peekOfCode": "def display_vehicles(vehicles):\n    for vehicle in vehicles:\n        print(f\"Type: {vehicle['type']}, Model: {vehicle['model']}, Status: {vehicle['status']}\")\ndef update_vehicle_status(vehicles, vehicle_id, new_status):\n    for vehicle in vehicles:\n        if vehicle['model'] == vehicle_id:\n            vehicle['status'] = new_status\n            break\ndef remove_vehicle(vehicles, vehicle_id):\n    for i, vehicle in enumerate(vehicles):",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q15",
        "documentation": {}
    },
    {
        "label": "update_vehicle_status",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q15",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q15",
        "peekOfCode": "def update_vehicle_status(vehicles, vehicle_id, new_status):\n    for vehicle in vehicles:\n        if vehicle['model'] == vehicle_id:\n            vehicle['status'] = new_status\n            break\ndef remove_vehicle(vehicles, vehicle_id):\n    for i, vehicle in enumerate(vehicles):\n        if vehicle['model'] == vehicle_id:\n            del vehicles[i]\n            break",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q15",
        "documentation": {}
    },
    {
        "label": "remove_vehicle",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q15",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q15",
        "peekOfCode": "def remove_vehicle(vehicles, vehicle_id):\n    for i, vehicle in enumerate(vehicles):\n        if vehicle['model'] == vehicle_id:\n            del vehicles[i]\n            break\nif __name__ == '__main__':\n    vehicles = [\n        {'type': 'Car', 'model': 'Tesla Model S', 'status': 'Available'},\n        {'type': 'Van', 'model': 'Ford Transit', 'status': 'On Delivery'},\n        {'type': 'Truck', 'model': 'Volvo FH16', 'status': 'Under Maintenance'},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q15",
        "documentation": {}
    },
    {
        "label": "get_investment_overview",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q16",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q16",
        "peekOfCode": "def get_investment_overview(investments):\n    total_value = sum(investment['value'] for investment in investments)\n    total_return = sum(investment['value'] * investment['return'] for investment in investments)\n    average_return = total_return / sum(investment['value'] for investment in investments)\n    highest_return_investment = max(investments, key=lambda x: x['return'])\n    return {\n        'total_value': total_value,\n        'average_return': average_return,\n        'highest_return_investment': highest_return_investment,\n    }",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q16",
        "documentation": {}
    },
    {
        "label": "search_investments_by_type",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q16",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q16",
        "peekOfCode": "def search_investments_by_type(investments, investment_type):\n    return [investment for investment in investments if investment['type'] == investment_type]\nif __name__ == '__main__':\n    investments = [\n        {'type': 'Stock', 'name': 'Apple Inc.', 'value': 10000, 'return': 0.05},\n        {'type': 'Bond', 'name': 'US Treasury Bond', 'value': 5000, 'return': 0.02},\n        {'type': 'Mutual Fund', 'name': 'Vanguard 500 Index Fund', 'value': 20000, 'return': 0.07},\n        {'type': 'Real Estate', 'name': 'Apartment Building', 'value': 150000, 'return': 0.03},\n    ]\n    investment_overview = get_investment_overview(investments)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q16",
        "documentation": {}
    },
    {
        "label": "highest_paid_employee",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "peekOfCode": "def highest_paid_employee(employees):\n    return max(employees, key=lambda x: employees[x]['salary'])\ndef lowest_paid_employee(employees):\n    return min(employees, key=lambda x: employees[x]['salary'])\ndef count_salaries_in_range(employees, low, high):\n    return sum(1 for e in employees if low <= employees[e]['salary'] <= high)\ndef sort_by_date_ascending(employees):\n    return sorted(employees, key=lambda x: employees[x]['date_of_joining'])\ndef sort_by_date_descending(employees):\n    return sorted(employees, key=lambda x: employees[x]['date_of_joining'], reverse=True)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "documentation": {}
    },
    {
        "label": "lowest_paid_employee",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "peekOfCode": "def lowest_paid_employee(employees):\n    return min(employees, key=lambda x: employees[x]['salary'])\ndef count_salaries_in_range(employees, low, high):\n    return sum(1 for e in employees if low <= employees[e]['salary'] <= high)\ndef sort_by_date_ascending(employees):\n    return sorted(employees, key=lambda x: employees[x]['date_of_joining'])\ndef sort_by_date_descending(employees):\n    return sorted(employees, key=lambda x: employees[x]['date_of_joining'], reverse=True)\nif __name__ == '__main__':\n    employees = {",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "documentation": {}
    },
    {
        "label": "count_salaries_in_range",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "peekOfCode": "def count_salaries_in_range(employees, low, high):\n    return sum(1 for e in employees if low <= employees[e]['salary'] <= high)\ndef sort_by_date_ascending(employees):\n    return sorted(employees, key=lambda x: employees[x]['date_of_joining'])\ndef sort_by_date_descending(employees):\n    return sorted(employees, key=lambda x: employees[x]['date_of_joining'], reverse=True)\nif __name__ == '__main__':\n    employees = {\n        1: {'id': 1, 'salary': 50000, 'date_of_joining': '2021-01-01'},\n        2: {'id': 2, 'salary': 60000, 'date_of_joining': '2021-02-01'},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "documentation": {}
    },
    {
        "label": "sort_by_date_ascending",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "peekOfCode": "def sort_by_date_ascending(employees):\n    return sorted(employees, key=lambda x: employees[x]['date_of_joining'])\ndef sort_by_date_descending(employees):\n    return sorted(employees, key=lambda x: employees[x]['date_of_joining'], reverse=True)\nif __name__ == '__main__':\n    employees = {\n        1: {'id': 1, 'salary': 50000, 'date_of_joining': '2021-01-01'},\n        2: {'id': 2, 'salary': 60000, 'date_of_joining': '2021-02-01'},\n        3: {'id': 3, 'salary': 70000, 'date_of_joining': '2021-03-01'},\n        4: {'id': 4, 'salary': 80000, 'date_of_joining': '2021-04-01'},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "documentation": {}
    },
    {
        "label": "sort_by_date_descending",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "peekOfCode": "def sort_by_date_descending(employees):\n    return sorted(employees, key=lambda x: employees[x]['date_of_joining'], reverse=True)\nif __name__ == '__main__':\n    employees = {\n        1: {'id': 1, 'salary': 50000, 'date_of_joining': '2021-01-01'},\n        2: {'id': 2, 'salary': 60000, 'date_of_joining': '2021-02-01'},\n        3: {'id': 3, 'salary': 70000, 'date_of_joining': '2021-03-01'},\n        4: {'id': 4, 'salary': 80000, 'date_of_joining': '2021-04-01'},\n        5: {'id': 5, 'salary': 90000, 'date_of_joining': '2021-05-01'},\n    }",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q17",
        "documentation": {}
    },
    {
        "label": "add_or_update_contact",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q18",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q18",
        "peekOfCode": "def add_or_update_contact(contacts, contact_number, contact_name):\n    if contact_number in contacts:\n        print(\"Contact number already exists.\")\n        print(\"1. Update contact details\")\n        print(\"2. Do not update\")\n        while True:\n            try:\n                choice = int(input(\"Enter your choice (1/2): \"))\n                if choice == 1:\n                    contacts[contact_number]['name'] = contact_name",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q18",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q2",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q2",
        "peekOfCode": "def add_task(project_name, task_name, assignee, task_management):\n    if project_name not in task_management:\n        task_management[project_name] = {'start_date': None, 'end_date': None, 'tasks': {}}\n    task_management[project_name]['tasks'][task_name] = {'assignee': assignee, 'status': 'Pending'}\ndef update_task_status(project_name, task_name, status, task_management):\n    if project_name in task_management and task_name in task_management[project_name]['tasks']:\n        task_management[project_name]['tasks'][task_name]['status'] = status\ndef mark_task_complete(project_name, task_name, task_management):\n    update_task_status(project_name, task_name, 'Completed', task_management)\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q2",
        "documentation": {}
    },
    {
        "label": "update_task_status",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q2",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q2",
        "peekOfCode": "def update_task_status(project_name, task_name, status, task_management):\n    if project_name in task_management and task_name in task_management[project_name]['tasks']:\n        task_management[project_name]['tasks'][task_name]['status'] = status\ndef mark_task_complete(project_name, task_name, task_management):\n    update_task_status(project_name, task_name, 'Completed', task_management)\nif __name__ == '__main__':\n    task_management = {\n        'Project A': {'start_date': '2024-01-01', 'end_date': '2024-06-30',\n                      'tasks': {'Task 1': {'assignee': 'aayush', 'status': 'Completed'},\n                                'Task 2': {'assignee': 'prankur', 'status': 'In Progress'},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q2",
        "documentation": {}
    },
    {
        "label": "mark_task_complete",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q2",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q2",
        "peekOfCode": "def mark_task_complete(project_name, task_name, task_management):\n    update_task_status(project_name, task_name, 'Completed', task_management)\nif __name__ == '__main__':\n    task_management = {\n        'Project A': {'start_date': '2024-01-01', 'end_date': '2024-06-30',\n                      'tasks': {'Task 1': {'assignee': 'aayush', 'status': 'Completed'},\n                                'Task 2': {'assignee': 'prankur', 'status': 'In Progress'},\n                                'Task 3': {'assignee': 'aaditya', 'status': 'Pending'}}},\n        'Project B': {'start_date': '2024-02-15', 'end_date': '2024-08-31',\n                      'tasks': {'Task 1': {'assignee': 'aayush', 'status': 'In Progress'},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q2",
        "documentation": {}
    },
    {
        "label": "add_employee",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q3",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q3",
        "peekOfCode": "def add_employee(employee_id, name, department, salary, employee_database):\n    if employee_id not in employee_database:\n        employee_database[employee_id] = {'name': name, 'department': department, 'salary': salary}\n        print(f\"Employee with ID {employee_id} added to the system.\")\n    else:\n        print(f\"Employee with ID {employee_id} already exists in the system.\")\nif __name__ == '__main__':\n    employee_database = {}\n    add_employee(1001, 'aayush', 'CSE', 50000, employee_database)\n    add_employee(1002, 'aaditya', 'Mech', 60000, employee_database)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q3",
        "documentation": {}
    },
    {
        "label": "update_inventory",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q4",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q4",
        "peekOfCode": "def update_inventory(product_id, quantity, inventory):\n    if product_id in inventory:\n        inventory[product_id]['quantity'] += quantity\n        print(f\"{quantity} units of product with ID {product_id} added to the inventory.\")\n    else:\n        print(f\"Product with ID {product_id} not found in the inventory.\")\ndef add_product(product_id, name, quantity, inventory):\n    if product_id not in inventory:\n        inventory[product_id] = {'name': name, 'quantity': quantity}\n        print(f\"Product with ID {product_id} added to the inventory.\")",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q4",
        "documentation": {}
    },
    {
        "label": "add_product",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q4",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q4",
        "peekOfCode": "def add_product(product_id, name, quantity, inventory):\n    if product_id not in inventory:\n        inventory[product_id] = {'name': name, 'quantity': quantity}\n        print(f\"Product with ID {product_id} added to the inventory.\")\n    else:\n        print(f\"Product with ID {product_id} already exists in the inventory.\")\nif __name__ == '__main__':\n    inventory = {\n        1001: {'name': 'I Phone 13', 'quantity': 50},\n        1002: {'name': 'I Pad Air', 'quantity': 75},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q4",
        "documentation": {}
    },
    {
        "label": "calculate_average_score",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q5",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q5",
        "peekOfCode": "def calculate_average_score(subject, exam_results):\n    total_score = 0\n    num_students = 0\n    for student_score in exam_results.values():\n        if subject in student_score:\n            total_score += student_score[subject]\n            num_students += 1\n    if num_students > 0:\n        average_score = total_score / num_students\n        return average_score",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q5",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q6",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q6",
        "peekOfCode": "def deposit(customer_id, amount, customer_accounts):\n    if customer_id in customer_accounts:\n        customer_accounts[customer_id]['balance'] += amount\n        transaction = {'type': 'deposit', 'amount': amount}\n        customer_accounts[customer_id]['transaction_history'].append(transaction)\n        print(f\"{amount} deposited successfully into the account of customer with ID {customer_id}.\")\n    else:\n        print(f\"Customer with ID {customer_id} not found.\")\ndef withdraw(customer_id, amount, customer_accounts):\n    if customer_id in customer_accounts:",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q6",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q6",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q6",
        "peekOfCode": "def withdraw(customer_id, amount, customer_accounts):\n    if customer_id in customer_accounts:\n        if amount <= customer_accounts[customer_id]['balance']:\n            customer_accounts[customer_id]['balance'] -= amount\n            transaction = {'type': 'withdrawal', 'amount': amount}\n            customer_accounts[customer_id]['transaction_history'].append(transaction)\n            print(f\"{amount} withdrawn successfully from the account of customer with ID {customer_id}.\")\n        else:\n            print(f\"Insufficient balance in the account of customer with ID {customer_id}.\")\n    else:",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q6",
        "documentation": {}
    },
    {
        "label": "print_order_details",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q7",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q7",
        "peekOfCode": "def print_order_details(order):\n    print(f\"Order ID: {order['id']}\")\n    print(f\"Customer ID: {order['customer_id']}\")\n    print(f\"Items:\")\n    for item in order['items']:\n        print(f\"- Product ID: {item['product_id']}, Quantity: {item['quantity']}, Price: {item['price']}\")\n    print(f\"Total Amount: {order['total_amount']}\")\nif __name__ == '__main__':\n    order = {\n        'id': 1001,",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q7",
        "documentation": {}
    },
    {
        "label": "search_by_name",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q8",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q8",
        "peekOfCode": "def search_by_name(name, products):\n    return [product for product in products if name.lower() in product['name'].lower()]\ndef search_by_category(category, products):\n    return [product for product in products if category.lower() == product['category'].lower()]\ndef search_by_price_range(min_price, max_price, products):\n    return [product for product in products if min_price <= product['price'] <= max_price]\nif __name__ == '__main__':\n    products = [\n        {'id': 1001, 'name': 'Laptop', 'category': 'Electronics', 'price': 800},\n        {'id': 1002, 'name': 'Smartphone', 'category': 'Electronics', 'price': 600},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q8",
        "documentation": {}
    },
    {
        "label": "search_by_category",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q8",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q8",
        "peekOfCode": "def search_by_category(category, products):\n    return [product for product in products if category.lower() == product['category'].lower()]\ndef search_by_price_range(min_price, max_price, products):\n    return [product for product in products if min_price <= product['price'] <= max_price]\nif __name__ == '__main__':\n    products = [\n        {'id': 1001, 'name': 'Laptop', 'category': 'Electronics', 'price': 800},\n        {'id': 1002, 'name': 'Smartphone', 'category': 'Electronics', 'price': 600},\n        {'id': 1003, 'name': 'Shirt', 'category': 'Clothing', 'price': 30},\n        {'id': 1004, 'name': 'Pants', 'category': 'Clothing', 'price': 40},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q8",
        "documentation": {}
    },
    {
        "label": "search_by_price_range",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q8",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q8",
        "peekOfCode": "def search_by_price_range(min_price, max_price, products):\n    return [product for product in products if min_price <= product['price'] <= max_price]\nif __name__ == '__main__':\n    products = [\n        {'id': 1001, 'name': 'Laptop', 'category': 'Electronics', 'price': 800},\n        {'id': 1002, 'name': 'Smartphone', 'category': 'Electronics', 'price': 600},\n        {'id': 1003, 'name': 'Shirt', 'category': 'Clothing', 'price': 30},\n        {'id': 1004, 'name': 'Pants', 'category': 'Clothing', 'price': 40},\n        {'id': 1005, 'name': 'Book', 'category': 'Books', 'price': 15},\n        {'id': 1006, 'name': 'Headphones', 'category': 'Electronics', 'price': 100},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q8",
        "documentation": {}
    },
    {
        "label": "get_total_orders_by_customer",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q9",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q9",
        "peekOfCode": "def get_total_orders_by_customer(orders):\n    order_count = {}\n    for order in orders:\n        customer_id = order['customer_id']\n        if customer_id not in order_count:\n            order_count[customer_id] = 0\n        order_count[customer_id] += 1\n    return order_count\nif __name__ == '__main__':\n    orders = [",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Dictionary Usecases.programs.Q9",
        "documentation": {}
    },
    {
        "label": "SubsetChecker",
        "kind": 6,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "peekOfCode": "class SubsetChecker:\n    def is_subset(self, set1, set2):\n        return set1.issubset(set2)\nclass DuplicateRemover:\n    def remove_duplicates(self, string_list):\n        return list(set(string_list))\nclass SetOperations:\n    def union(self, set1, set2):\n        return set1.union(set2)\n    def symmetric_difference(self, set1, set2):",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "documentation": {}
    },
    {
        "label": "DuplicateRemover",
        "kind": 6,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "peekOfCode": "class DuplicateRemover:\n    def remove_duplicates(self, string_list):\n        return list(set(string_list))\nclass SetOperations:\n    def union(self, set1, set2):\n        return set1.union(set2)\n    def symmetric_difference(self, set1, set2):\n        return set1.symmetric_difference(set2)\n    def intersection(self, set1, set2):\n        return set1.intersection(set2)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "documentation": {}
    },
    {
        "label": "SetOperations",
        "kind": 6,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "peekOfCode": "class SetOperations:\n    def union(self, set1, set2):\n        return set1.union(set2)\n    def symmetric_difference(self, set1, set2):\n        return set1.symmetric_difference(set2)\n    def intersection(self, set1, set2):\n        return set1.intersection(set2)\nclass SymmetricDifference:\n    def symmetric_diff(self, set1, set2):\n        return set1.symmetric_difference(set2)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "documentation": {}
    },
    {
        "label": "SymmetricDifference",
        "kind": 6,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "peekOfCode": "class SymmetricDifference:\n    def symmetric_diff(self, set1, set2):\n        return set1.symmetric_difference(set2)\nclass VowelCounter:\n    def count_vowels(self, string):\n        vowels = set('aeiou')\n        return len(set(string.lower()).intersection(vowels))\ndef main():\n    subset_checker = SubsetChecker()\n    duplicate_remover = DuplicateRemover()",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "documentation": {}
    },
    {
        "label": "VowelCounter",
        "kind": 6,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "peekOfCode": "class VowelCounter:\n    def count_vowels(self, string):\n        vowels = set('aeiou')\n        return len(set(string.lower()).intersection(vowels))\ndef main():\n    subset_checker = SubsetChecker()\n    duplicate_remover = DuplicateRemover()\n    set_operations = SetOperations()\n    symmetric_difference = SymmetricDifference()\n    vowel_counter = VowelCounter()",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "peekOfCode": "def main():\n    subset_checker = SubsetChecker()\n    duplicate_remover = DuplicateRemover()\n    set_operations = SetOperations()\n    symmetric_difference = SymmetricDifference()\n    vowel_counter = VowelCounter()\n    while True:\n        print(\"Set Operations Menu:\")\n        print(\"1. Check if a set is a subset of another set\")\n        print(\"2. Remove duplicates from a list of strings\")",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Assignment.Sets",
        "documentation": {}
    },
    {
        "label": "get_unique_cities",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q1",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q1",
        "peekOfCode": "def get_unique_cities(cities: list) -> list:\n    return list(set(cities))\nif __name__ == '__main__':\n    extracted_user_cities = ['delhi', 'mumbai', 'indore', 'ujjain', 'delhi', 'dehradun', 'mumbai', 'agra', 'indore']\n    print(extracted_user_cities)\n    print(get_unique_cities(extracted_user_cities))",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q1",
        "documentation": {}
    },
    {
        "label": "find_unique_exclusive_preferences",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q10",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q10",
        "peekOfCode": "def find_unique_exclusive_preferences(user_preference_data):\n    user_exclusive_preferences = {}\n    for data in user_preference_data:\n        user = data[\"username\"]\n        preferences = set(data[\"preferences\"])\n        user_exclusive_preferences[user] = preferences\n        for other_data in user_preference_data:\n            if other_data != data:\n                user_exclusive_preferences[user] -= set(other_data[\"preferences\"])\n    return user_exclusive_preferences",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q10",
        "documentation": {}
    },
    {
        "label": "find_unique_skills_across_departments",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q11",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q11",
        "peekOfCode": "def find_unique_skills_across_departments(department_employee_skills):\n    unique_skills = set()\n    for department_skills in department_employee_skills.values():\n        unique_skills.update(department_skills)\n    return unique_skills\nif __name__ == '__main__':\n    department_employee_skills = {\n        \"Java\": {\"prankur\", \"aayush\", \"ishaan\"},\n        \"Python\": {\"ishaan\", \"aaditya\", \"aayush\"},\n        \"Cloud\": {\"aayush\", \"aaditya\", \"prankur\"},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q11",
        "documentation": {}
    },
    {
        "label": "find_top_topics",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q12",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q12",
        "peekOfCode": "def find_top_topics(student_topic_scores):\n    num_students = len(student_topic_scores)\n    passing_threshold = int(num_students * 0.8)\n    top_topics = set()\n    for topic in student_topic_scores:\n        # print(sum([student_topic_scores[topic][score] for score in student_topic_scores[topic] if student_topic_scores[topic][score] >= 80]))     #Debugging Statement\n        num_passing_students = sum(\n            [1 for score in student_topic_scores[topic] if student_topic_scores[topic][score] >= 80])\n        if num_passing_students >= passing_threshold:\n            top_topics.add(topic)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q12",
        "documentation": {}
    },
    {
        "label": "find_out_of_stock_products",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q13",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q13",
        "peekOfCode": "def find_out_of_stock_products(warehouse_product_stock):\n    out_of_stock_products = set()\n    for warehouse in warehouse_product_stock:\n        out_of_stock_products.update(product for product in warehouse_product_stock[warehouse] if\n                                     product not in warehouse_product_stock[warehouse] or\n                                     warehouse_product_stock[warehouse][product] <= 0)\n    return out_of_stock_products\nif __name__ == '__main__':\n    warehouse_product_stock = {\n        \"warehouse1\": {",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q13",
        "documentation": {}
    },
    {
        "label": "find_completed_modules",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q14",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q14",
        "peekOfCode": "def find_completed_modules(employee_training_records):\n    completed_modules = set()\n    num_employees = len(employee_training_records)\n    for module in employee_training_records[0]:\n        if all(module in employee_training_records[i] and employee_training_records[i][module] for i in\n               range(num_employees)):\n            completed_modules.add(module)\n    return completed_modules\nif __name__ == '__main__':\n    employee_training_records = [",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q14",
        "documentation": {}
    },
    {
        "label": "find_pages_with_long_visit_duration",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q15",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q15",
        "peekOfCode": "def find_pages_with_long_visit_duration(traffic_data):\n    visit_duration_threshold = 5 * 60  # 5 minutes in seconds\n    long_visits = [visit for visit in traffic_data if visit['duration'] > visit_duration_threshold]\n    unique_pages = {visit['page'] for visit in long_visits}\n    return unique_pages\nif __name__ == '__main__':\n    traffic_data = [\n        {'user': 'user1', 'page': 'page1', 'duration': 300},\n        {'user': 'user2', 'page': 'page2', 'duration': 420},\n        {'user': 'user3', 'page': 'page1', 'duration': 360},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q15",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q2",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q2",
        "peekOfCode": "class Student:\n    def __init__(self, name, rollno, courses):\n        self.name = name\n        self.rollno = rollno\n        self.courses = courses\ndef get_unique_courses(students: list) -> set:\n    unique_courses = set()\n    for student in students:\n        unique_courses.update(student.courses)\n    return unique_courses",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q2",
        "documentation": {}
    },
    {
        "label": "get_unique_courses",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q2",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q2",
        "peekOfCode": "def get_unique_courses(students: list) -> set:\n    unique_courses = set()\n    for student in students:\n        unique_courses.update(student.courses)\n    return unique_courses\nif __name__ == '__main__':\n    students = [\n        Student('aayush', 1, {'Math', 'Science', 'Astronomy'}),\n        Student('prankur', 2, {'English', 'Science', 'History'}),\n        Student('kaustaubh', 3, {'Math', 'English', 'Astronomy'})",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q2",
        "documentation": {}
    },
    {
        "label": "segregate_positive_words",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q3",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q3",
        "peekOfCode": "def segregate_positive_words(reviews: list) -> list:\n    review_words = set()\n    for review in reviews:\n        extracted_words = extract_words(review)\n        for words in extracted_words:\n            review_words.add(words.lower())\n    result = list(review_words.intersection(POSITIVE_WORDS))\n    return result\ndef extract_words(review):\n    return review.split()",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q3",
        "documentation": {}
    },
    {
        "label": "extract_words",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q3",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q3",
        "peekOfCode": "def extract_words(review):\n    return review.split()\nif __name__ == '__main__':\n    reviews = [\"It's a great product\", \"Amazing to use\", \"Nice feel to it\", \"Good Quality stuff\", \"Quality is amazing\",\n               \"Feels Great to Use\"]\n    print(segregate_positive_words(reviews))",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q3",
        "documentation": {}
    },
    {
        "label": "POSITIVE_WORDS",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q3",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q3",
        "peekOfCode": "POSITIVE_WORDS = {'good', 'nice', 'great', 'amazing'}\ndef segregate_positive_words(reviews: list) -> list:\n    review_words = set()\n    for review in reviews:\n        extracted_words = extract_words(review)\n        for words in extracted_words:\n            review_words.add(words.lower())\n    result = list(review_words.intersection(POSITIVE_WORDS))\n    return result\ndef extract_words(review):",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q3",
        "documentation": {}
    },
    {
        "label": "get_unique_users",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q4",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q4",
        "peekOfCode": "def get_unique_users(post):\n    users_who_liked = set(like['user'] for like in post['likes'])\n    users_who_commented = set(comment['user'] for comment in post['comments'])\n    return users_who_liked | users_who_commented\nif __name__ == '__main__':\n    post = {\n        'id': 12345,\n        'title': 'A great post',\n        'likes': [\n            {'user': 'aayush'},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q4",
        "documentation": {}
    },
    {
        "label": "get_unique_preferences",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q5",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q5",
        "peekOfCode": "def get_unique_preferences(user_preferences):\n    return set().union(*user_preferences.values())\nif __name__ == '__main__':\n    user_preferences = {\n        \"user1\": [\"preference1\", \"preference2\", \"preference3\"],\n        \"user2\": [\"preference2\", \"preference3\", \"preference4\"],\n        \"user3\": [\"preference1\", \"preference4\", \"preference5\"],\n    }\n    unique_preferences = get_unique_preferences(user_preferences)\n    print(unique_preferences)",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q5",
        "documentation": {}
    },
    {
        "label": "find_frequent_products",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q6",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q6",
        "peekOfCode": "def find_frequent_products(transactions):\n    unique_products = set()\n    for transaction in transactions:\n        unique_products.update(transaction)\n    return unique_products\nif __name__ == '__main__':\n    transactions = [\n        [\"product1\", \"product2\", \"product3\"],\n        [\"product2\", \"product3\", \"product4\"],\n        [\"product1\", \"product3\", \"product4\"],",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q6",
        "documentation": {}
    },
    {
        "label": "find_unique_sensor_types",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q7",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q7",
        "peekOfCode": "def find_unique_sensor_types(sensor_data):\n    unique_sensor_types = set()\n    for data in sensor_data:\n        unique_sensor_types.add(data[\"sensor_type\"])\n    return unique_sensor_types\nif __name__ == '__main__':\n    sensor_data = [\n        {\"device_id\": \"1\", \"sensor_type\": \"temperature\", \"value\": 23.5},\n        {\"device_id\": \"2\", \"sensor_type\": \"humidity\", \"value\": 45.6},\n        {\"device_id\": \"3\", \"sensor_type\": \"pressure\", \"value\": 1234.5},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q7",
        "documentation": {}
    },
    {
        "label": "find_unique_users_with_permissions",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q8",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q8",
        "peekOfCode": "def find_unique_users_with_permissions(user_data, read_permission, write_permission):\n    unique_users = set()\n    for data in user_data:\n        if read_permission in data[\"permissions\"] and write_permission in data[\"permissions\"]:\n            unique_users.add(data[\"username\"])\n    return unique_users\nif __name__ == '__main__':\n    user_data = [\n        {\"username\": \"user1\", \"permissions\": [\"read\", \"write\"]},\n        {\"username\": \"user2\", \"permissions\": [\"read\"]},",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q8",
        "documentation": {}
    },
    {
        "label": "find_unique_categories_in_departments",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q9",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q9",
        "peekOfCode": "def find_unique_categories_in_departments(product_data, department1, department2):\n    categories_in_department1 = set()\n    categories_in_department2 = set()\n    for data in product_data:\n        if data[\"department\"] == department1:\n            categories_in_department1.add(data[\"category\"])\n        elif data[\"department\"] == department2:\n            categories_in_department2.add(data[\"category\"])\n    return categories_in_department1 & categories_in_department2\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Python Set Usecases.Programs.Q9",
        "documentation": {}
    },
    {
        "label": "EmployeeAttendanceSystem",
        "kind": 6,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Set Usecases.Employee_Management",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Set Usecases.Employee_Management",
        "peekOfCode": "class EmployeeAttendanceSystem:\n    def __init__(self):\n        self.present_employees = set()\n        self.absent_employees = set()\n        self.check_ins = set()\n        self.check_outs = set()\n        self.morning_shift = set()\n        self.evening_shift = set()\n    @staticmethod\n    def display_menu() -> None:",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Set Usecases.Employee_Management",
        "documentation": {}
    },
    {
        "label": "Membership",
        "kind": 6,
        "importPath": "M-05(May).Week-01.10 May.Prods.Assignments.Set Usecases.Membership",
        "description": "M-05(May).Week-01.10 May.Prods.Assignments.Set Usecases.Membership",
        "peekOfCode": "class Membership:\n    def __init__(self):\n        self.member_ids = set()\n        self.member_plans = {\n            \"basic_membership\": {\"Gym Access\", \"Cardio Equipment\", \"Locker Room Access\"},\n            \"premium_membership\": {\n                \"Gym Access\",\n                \"Cardio Equipment\",\n                \"Strength Training Equipment\",\n                \"Group Classes\",",
        "detail": "M-05(May).Week-01.10 May.Prods.Assignments.Set Usecases.Membership",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionaries_demo",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionaries_demo",
        "peekOfCode": "values = {'name': ['aayush', 'raounak'], 'phone': ['990121', '123712']}\nprint(type(values.items()))\nprint(values.items())\nprint(values.keys())\nprint(values.values())\nfor val in values.items():\n    print(type(val))\n    print(val)",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionaries_demo",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "peekOfCode": "def get_input(id: int) -> tuple[str, str, int]:\n    \"\"\"Get employee details from user input\"\"\"\n    emp_name = input(f\"Enter the employee {id} name: \")\n    emp_salary = int(input(f\"Enter the salary for employee {id} in whole numbers: \"))\n    return str(id), emp_name, emp_salary\ndef insert_employees(number_of_employees: int) -> None:\n    \"\"\"Insert employee details into the list\"\"\"\n    for id in range(1, number_of_employees + 1):\n        id, name, salary = get_input(id)\n        EMP_LIST.append({'id': id, 'name': name, 'salary': salary})",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "documentation": {}
    },
    {
        "label": "insert_employees",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "peekOfCode": "def insert_employees(number_of_employees: int) -> None:\n    \"\"\"Insert employee details into the list\"\"\"\n    for id in range(1, number_of_employees + 1):\n        id, name, salary = get_input(id)\n        EMP_LIST.append({'id': id, 'name': name, 'salary': salary})\ndef sum_of_salaries() -> int:\n    \"\"\"Find Sum of all Salaries\"\"\"\n    sum = 0\n    for emp in EMP_LIST:\n        sum += emp['salary']",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "documentation": {}
    },
    {
        "label": "sum_of_salaries",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "peekOfCode": "def sum_of_salaries() -> int:\n    \"\"\"Find Sum of all Salaries\"\"\"\n    sum = 0\n    for emp in EMP_LIST:\n        sum += emp['salary']\n    return sum\ndef get_salaries() -> list[int]:\n    \"\"\"Get all the Fields\"\"\"\n    sal = []\n    for emp in EMP_LIST:",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "documentation": {}
    },
    {
        "label": "get_salaries",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "peekOfCode": "def get_salaries() -> list[int]:\n    \"\"\"Get all the Fields\"\"\"\n    sal = []\n    for emp in EMP_LIST:\n        sal.append(emp['salary'])\n    return sal\ndef get_highest_and_lowest_salaries() -> tuple[int, int]:\n    \"\"\"Get Highest and Lowest Salaries\"\"\"\n    sal = get_salaries()\n    return max(sal), min(sal)",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "documentation": {}
    },
    {
        "label": "get_highest_and_lowest_salaries",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "peekOfCode": "def get_highest_and_lowest_salaries() -> tuple[int, int]:\n    \"\"\"Get Highest and Lowest Salaries\"\"\"\n    sal = get_salaries()\n    return max(sal), min(sal)\ndef update_employee(id: str, new_name: str = None, new_salary: int = None) -> None:\n    \"\"\"Update an employee's details\"\"\"\n    for emp in EMP_LIST:\n        if emp['id'] == id:\n            if new_name:\n                emp['name'] = new_name",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "documentation": {}
    },
    {
        "label": "update_employee",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "peekOfCode": "def update_employee(id: str, new_name: str = None, new_salary: int = None) -> None:\n    \"\"\"Update an employee's details\"\"\"\n    for emp in EMP_LIST:\n        if emp['id'] == id:\n            if new_name:\n                emp['name'] = new_name\n            if new_salary:\n                emp['salary'] = new_salary\n            break\n    else:",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "peekOfCode": "def update() -> None:\n    \"\"\"Update an employee\"\"\"\n    emp_id = input(\"Enter the employee id to update: \")\n    update_key = input(\"Enter what do you want to update 0 for name and 1 for salary: \")\n    new_name = ''\n    new_salary = ''\n    if update_key:\n        new_name = input(\"Enter the new name: \")\n    else:\n        new_salary = int(input(\"Enter the new salary:  \"))",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "documentation": {}
    },
    {
        "label": "EMP_LIST",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "peekOfCode": "EMP_LIST = []\ndef get_input(id: int) -> tuple[str, str, int]:\n    \"\"\"Get employee details from user input\"\"\"\n    emp_name = input(f\"Enter the employee {id} name: \")\n    emp_salary = int(input(f\"Enter the salary for employee {id} in whole numbers: \"))\n    return str(id), emp_name, emp_salary\ndef insert_employees(number_of_employees: int) -> None:\n    \"\"\"Insert employee details into the list\"\"\"\n    for id in range(1, number_of_employees + 1):\n        id, name, salary = get_input(id)",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.dictionary_emp_demp",
        "documentation": {}
    },
    {
        "label": "animals",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.frozen_set_demo",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.frozen_set_demo",
        "peekOfCode": "animals = frozenset([\"cat\", \"dog\", \"lion\"])\nprint(type(animals))\nprint(animals)",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.frozen_set_demo",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "peekOfCode": "def get_input(id: int) -> tuple[str, str, int]:\n    emp_name = input(\"Enter the employee name: \")\n    emp_salary = int(input(\"Enter the salary in whole numbers: \"))\n    return str(id), emp_name, emp_salary\ndef insert_employees(number_of_employees: int) -> None:\n    for id in range(1, number_of_employees + 1):\n        EMP_LIST.append(get_input(id))\ndef sum_of_salaries() -> int:\n    sum = 0\n    for emp in EMP_LIST:",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "documentation": {}
    },
    {
        "label": "insert_employees",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "peekOfCode": "def insert_employees(number_of_employees: int) -> None:\n    for id in range(1, number_of_employees + 1):\n        EMP_LIST.append(get_input(id))\ndef sum_of_salaries() -> int:\n    sum = 0\n    for emp in EMP_LIST:\n        sum += emp[2]\n    return sum\ndef get_salaries() -> list[int]:\n    sal = []",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "documentation": {}
    },
    {
        "label": "sum_of_salaries",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "peekOfCode": "def sum_of_salaries() -> int:\n    sum = 0\n    for emp in EMP_LIST:\n        sum += emp[2]\n    return sum\ndef get_salaries() -> list[int]:\n    sal = []\n    for emp in EMP_LIST:\n        sal.append(emp[2])\n    return sal",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "documentation": {}
    },
    {
        "label": "get_salaries",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "peekOfCode": "def get_salaries() -> list[int]:\n    sal = []\n    for emp in EMP_LIST:\n        sal.append(emp[2])\n    return sal\ndef get_highest_and_lowest_salaries() -> tuple[int, int]:\n    sal = get_salaries()\n    return max(sal), min(sal)\nif __name__ == '__main__':\n    number_of_employees = int(input(\"Enter the number of employees you want to enter: \"))",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "documentation": {}
    },
    {
        "label": "get_highest_and_lowest_salaries",
        "kind": 2,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "peekOfCode": "def get_highest_and_lowest_salaries() -> tuple[int, int]:\n    sal = get_salaries()\n    return max(sal), min(sal)\nif __name__ == '__main__':\n    number_of_employees = int(input(\"Enter the number of employees you want to enter: \"))\n    insert_employees(number_of_employees)\n    print(EMP_LIST)\n    print(f\"The sum of salaries is : {sum_of_salaries()}\")\n    highest, lowest = get_highest_and_lowest_salaries()\n    print(f\"Highest is {highest}, and lowest is  {lowest}\")",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "documentation": {}
    },
    {
        "label": "EMP_LIST",
        "kind": 5,
        "importPath": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "description": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "peekOfCode": "EMP_LIST = []\ndef get_input(id: int) -> tuple[str, str, int]:\n    emp_name = input(\"Enter the employee name: \")\n    emp_salary = int(input(\"Enter the salary in whole numbers: \"))\n    return str(id), emp_name, emp_salary\ndef insert_employees(number_of_employees: int) -> None:\n    for id in range(1, number_of_employees + 1):\n        EMP_LIST.append(get_input(id))\ndef sum_of_salaries() -> int:\n    sum = 0",
        "detail": "M-05(May).Week-01.10 May.Prods.Class Codes.task",
        "documentation": {}
    },
    {
        "label": "count_vowels",
        "kind": 2,
        "importPath": "M-05(May).Week-02.14 May.Prods.Class Codes.count_vowel",
        "description": "M-05(May).Week-02.14 May.Prods.Class Codes.count_vowel",
        "peekOfCode": "def count_vowels(sentence: str) -> dict:\n    sentence = sentence.lower()\n    vowel = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    for word in sentence:\n        if word in vowel.keys():\n            vowel[word] += 1\n    return vowel\nif __name__ == '__main__':\n    sentence = \"Hello Worlds I am here\"\n    print(count_vowels(sentence))",
        "detail": "M-05(May).Week-02.14 May.Prods.Class Codes.count_vowel",
        "documentation": {}
    },
    {
        "label": "dict1",
        "kind": 5,
        "importPath": "M-05(May).Week-02.14 May.Prods.Class Codes.dictionary_sorted",
        "description": "M-05(May).Week-02.14 May.Prods.Class Codes.dictionary_sorted",
        "peekOfCode": "dict1 = {'a': 24, 'b': 56, 'c': 25}\nprint(sorted(dict1))\nprint(sorted(dict1.keys()))\nprint(sorted(dict1.values()))\nprint(dict(sorted(dict1.items())))",
        "detail": "M-05(May).Week-02.14 May.Prods.Class Codes.dictionary_sorted",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "M-05(May).Week-02.14 May.Prods.Class Codes.functions",
        "description": "M-05(May).Week-02.14 May.Prods.Class Codes.functions",
        "peekOfCode": "def func() -> tuple:\n    print(\"In the Function\")\n    return 1, 2\nif __name__ == '__main__':\n    print(func())\n    print(help(func()))",
        "detail": "M-05(May).Week-02.14 May.Prods.Class Codes.functions",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "M-05(May).Week-02.14 May.Prods.Class Codes.list_string_integer",
        "description": "M-05(May).Week-02.14 May.Prods.Class Codes.list_string_integer",
        "peekOfCode": "def func(example):\n    for iterator in range(len(example)):\n        arg = str(example[iterator])\n        if arg.isdigit():\n            if sum(int(digit) for digit in str(arg)) % 2 != 0:\n                example[iterator] = \"even\"\n        elif isinstance(arg, str) and len(arg) > 5:\n            example.remove(arg)\n    return example\nif __name__ == '__main__':",
        "detail": "M-05(May).Week-02.14 May.Prods.Class Codes.list_string_integer",
        "documentation": {}
    },
    {
        "label": "frequency",
        "kind": 2,
        "importPath": "M-05(May).Week-02.14 May.Prods.Class Codes.occurences",
        "description": "M-05(May).Week-02.14 May.Prods.Class Codes.occurences",
        "peekOfCode": "def frequency(arg: dict, val: str) -> int:\n    return sum(1 for argument in arg.values() if argument == val)\nif __name__ == '__main__':\n    print(frequency({1: 'hello', 2: 'hello', 3: 'hi'}, 'hello'))",
        "detail": "M-05(May).Week-02.14 May.Prods.Class Codes.occurences",
        "documentation": {}
    },
    {
        "label": "print_table_of_a_number",
        "kind": 2,
        "importPath": "M-05(May).Week-02.14 May.Prods.Class Codes.table",
        "description": "M-05(May).Week-02.14 May.Prods.Class Codes.table",
        "peekOfCode": "def print_table_of_a_number(argument):\n    for num in range(2, argument + 1):\n        if num % 2 == 0:\n            for iterator in range(1, 11):\n                # if iterator % 2 == 0:\n                print(f\"{num}\" + \" X \" + f\"{iterator} = {num * iterator}\")\n        print()\nif __name__ == '__main__':\n    number = int(input(\"Enter the number for which you want to print the table: \"))\n    print_table_of_a_number(number)",
        "detail": "M-05(May).Week-02.14 May.Prods.Class Codes.table",
        "documentation": {}
    },
    {
        "label": "KBCGame",
        "kind": 6,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC",
        "peekOfCode": "class KBCGame:\n    def __init__(self):\n        self.questions = []\n        self.lifelines = {\"double_dip\": 1, \"50-50\": 1, \"flip_question\": 1}\n        self.current_question = 'Q1'\n        self.checkpoints = ['Q5', 'Q10', 'Q15']\n        self.final_earnings = 0\n    def start_game(self):\n        print(\"Welcome to Kaun Banega Crorepati!\")\n        print(\"You will be asked a series of questions, and you can use lifelines to help you.\")",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC",
        "documentation": {}
    },
    {
        "label": "question_data",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC",
        "peekOfCode": "question_data = {\n    \"easy\": [\n        {\n            \"question\": \"What is the capital of India?\",\n            \"options\": [\"Delhi\", \"Mumbai\", \"Chennai\", \"Kolkata\"],\n            \"answer\": \"a\"\n        },\n        {\n            \"question\": \"Who is the CEO of Tesla?\",\n            \"options\": [\"Elon Musk\", \"Jeff Bezos\", \"Mark Zuckerberg\", \"Bill Gates\"],",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC",
        "documentation": {}
    },
    {
        "label": "question_amount",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC",
        "peekOfCode": "question_amount = {\n    \"Q1\": 1000,\n    \"Q2\": 2000,\n    \"Q3\": 3000,\n    \"Q4\": 5000,\n    \"Q5\": 10000,\n    \"Q6\": 20000,\n    \"Q7\": 40000,\n    \"Q8\": 80000,\n    \"Q9\": 160000,",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC",
        "documentation": {}
    },
    {
        "label": "lifeline",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "def lifeline(ran, opts, op):\n    m = 1\n    lifelines = ['Audience Poll', 'Fifty Fifty',\n                 'Double dip', 'Flip the question']\n    print(\"Lifelines are \\t\", lifelines[0], '\\t', lifelines[1],\n          '\\t', lifelines[2], '\\t', lifelines[3], '\\n\\n')\n    if list_life == []:\n        print(\"You don't have lifelines remaining\\t\")\n        return None\n    print(\"Press 1 for audience,2 for 50:50, 3 for double dip\\",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "audience",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "def audience(ran, opts):\n    # graphical audience poll using pandas\n    print(\"According to audience\\n\")\n    s = pd.Series([opt1[ran], opt2[ran], opt3[ran], opt4[ran]],\n                  index=['1', '2', '3', '4'])\n    s.plot.bar(figsize=(20, 10))\n    plt.xlabel('Options')\n    plt.ylabel('%')\n    plt.title(\"Audience Poll\")\n    plt.show()",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "fifty",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "def fifty(ran, op):\n    print(\"Q.\" + questions[ran])\n    for num, option in enumerate(op):\n        print(str(num + 1) + \".\" + option[ran])\n    choice_fifty = int(input(\"enter your choice \\t\"))\n    if choice_fifty == answer[ran]:\n        print(\"Correct Answer.....\")\n        great = 1\n    else:\n        great = 0",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "doubleDip",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "def doubleDip(ran):\n    # double dip gives 2 chances\n    print(\"Select two options\\n\")\n    trial1 = int(input())\n    if answer[ran] == trial1:\n        great = 1\n        print(\"Correct Answer,well done....\")\n    else:\n        print(\"Your first trial is wrong, choose another\\t\")\n        trial2 = int(input())",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "flip",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "def flip():\n    return -1\ndef amount(correct_ans):\n    print(amount_won[correct_ans - 1])\n    if amount_won[correct_ans - 1] == 10000:\n        print(\"Completed 1st stage\")\n    elif amount_won[correct_ans - 1] == 320000:\n        print(\"Completed 2nd stage\")\n    elif amount_won[correct_ans - 1] == 70000000:\n        print(\"You have won Rs 7 CRORE\")",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "amount",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "def amount(correct_ans):\n    print(amount_won[correct_ans - 1])\n    if amount_won[correct_ans - 1] == 10000:\n        print(\"Completed 1st stage\")\n    elif amount_won[correct_ans - 1] == 320000:\n        print(\"Completed 2nd stage\")\n    elif amount_won[correct_ans - 1] == 70000000:\n        print(\"You have won Rs 7 CRORE\")\n    return amount_won[correct_ans - 1]\nquestions = [",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "amount_won",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "amount_won = [1000, 2000, 3000, 5000, 10000,\n              20000, 40000, 80000, 160000,\n              320000, 640000, 1250000, 2500000,\n              5000000, 10000000, 70000000]\n# Options for 50:50 lifeline\nop1 = ['     ', '        ', '    ', 'Srinagar',\n       '     ', 'Cricket', '1920', '     ', '    ',\n       '        ', '   ', 'Cricket', '       ',\n       'Kolkata', 'Wrestling', '          ', '       ',\n       '     ', 'China', 'Thar', '         ', '      ',",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "op1",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "op1 = ['     ', '        ', '    ', 'Srinagar',\n       '     ', 'Cricket', '1920', '     ', '    ',\n       '        ', '   ', 'Cricket', '       ',\n       'Kolkata', 'Wrestling', '          ', '       ',\n       '     ', 'China', 'Thar', '         ', '      ',\n       'Israel', '      ', '           ', 'Arjan Singh',\n       'Parliament of India', '       ', '     ',\n       'Mohd Hamid Ansari ', '    ', 'Mahatma Gandhi',\n       'Hanuman']\nop2 = ['AB De Villiers', '     ', '9', '       ',",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "op2",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "op2 = ['AB De Villiers', '     ', '9', '       ',\n       '      ', '    ', '1928', '     ', 'Cricket',\n       'Yuvraj Singh', 'Cricket', 'Football', 'West Indies',\n       'Mumbai', 'Swimming', '             ', '      ',\n       '        ', '       ', 'Sahara', 'Mahishmati', '       ',\n       'Jordan', '       ', 'Che Guevera', '               ',\n       '       ', '      ', '     ', '     ', '    ', '    ',\n       '              ']\nop3 = ['Shahid Afridi', 'Dishonest', '   ', 'Amritsar',\n       'Sindhi', '      ', '    ', 'Pakistan', '     ',",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "op3",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "op3 = ['Shahid Afridi', 'Dishonest', '   ', 'Amritsar',\n       'Sindhi', '      ', '    ', 'Pakistan', '     ',\n       'MS Dhoni', '    ', '       ', 'South Africa', '    ',\n       '      ', 'Henry Becquerel', 'Tephrosia', 'Dermatitis',\n       'Japan', '    ', '       ', 'Bypass', '         ',\n       'Mridangam', '         ', '             ', '     ',\n       'darjeeling', 'Japanese Encephalitis ', 'Mohd Hidayatullah ',\n       'Saina Nehwal', '      ', 'Shiva']\nop4 = ['        ', 'Miserly', '8', '       ', 'English', 'Hockey',\n       '     ', 'Australia', 'Football', '       ', 'Polo', '     ',",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "op4",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "op4 = ['        ', 'Miserly', '8', '       ', 'English', 'Hockey',\n       '     ', 'Australia', 'Football', '       ', 'Polo', '     ',\n       '      ', '     ', '       ', 'None of these', 'Indigofera',\n       'Cholera', '        ', '        ', 'Badami', 'Debridement',\n       '     ', 'Dafli', 'Vladimir Lenin', 'Aspy Engineer',\n       'Mangalyaan', 'Kohima', 'Plague', '       ', 'Jwala Gutta',\n       'Mother Teresa', '   ']\nop = [op1, op2, op3, op4]\n# list of lifelines\nlist_life = [1, 2, 3, 4]",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "op",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "op = [op1, op2, op3, op4]\n# list of lifelines\nlist_life = [1, 2, 3, 4]\ndef lifeline(ran, opts, op):\n    m = 1\n    lifelines = ['Audience Poll', 'Fifty Fifty',\n                 'Double dip', 'Flip the question']\n    print(\"Lifelines are \\t\", lifelines[0], '\\t', lifelines[1],\n          '\\t', lifelines[2], '\\t', lifelines[3], '\\n\\n')\n    if list_life == []:",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "list_life",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "list_life = [1, 2, 3, 4]\ndef lifeline(ran, opts, op):\n    m = 1\n    lifelines = ['Audience Poll', 'Fifty Fifty',\n                 'Double dip', 'Flip the question']\n    print(\"Lifelines are \\t\", lifelines[0], '\\t', lifelines[1],\n          '\\t', lifelines[2], '\\t', lifelines[3], '\\n\\n')\n    if list_life == []:\n        print(\"You don't have lifelines remaining\\t\")\n        return None",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "questions = [\n    'In ODI Cricket, who created the record of scoring the \\\n    fastest century in just 31 balls ?',\n    ' If you call someone ‘Makkhichoos’ then what are you \\\n    calling him ?',\n    'How many players of a Kho-Kho team can play on the field\\\n    during the match ?',\n    'Which of these Indian cities is closest to the Pakistani \\\n    city of Lahore ?',\n    'The language spoken by the people by Pakistan is ?',",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "option1",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "option1 = ['Corey Anderson', 'Evil', '10', 'Srinagar', 'Hindi',\n           'Cricket', '1920', 'Bangladesh', 'polo', 'Virat Kohli',\n           'Tennis', 'Cricket', 'Australia', 'Kolkata', 'Wrestling',\n           'Bessemer', 'Sida', 'Polio', 'China', 'Thar', 'Magadh',\n           'Cataract', 'Israel', 'Tabla', 'Antonio Gramsci ',\n           'Arjan Singh', 'Parliament of India', 'Gangtok', 'Rabies',\n           ' Mohd Hamid Ansari', 'P V Sindhu', 'Mahatma Gandhi', 'Hanuman']\noption2 = ['AB De Villiers', 'Humble', '9', 'Jaisalmer', 'Palauan',\n           'Football', '1928', 'Kenya', 'Cricket', 'Yuvraj Singh',\n           'Cricket', 'Football', 'West Indies', 'Mumbai', 'Swimming',",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "option2",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "option2 = ['AB De Villiers', 'Humble', '9', 'Jaisalmer', 'Palauan',\n           'Football', '1928', 'Kenya', 'Cricket', 'Yuvraj Singh',\n           'Cricket', 'Football', 'West Indies', 'Mumbai', 'Swimming',\n           'Rane Laennec', 'Tridax', 'Malaria', 'Taiwan', 'Sahara',\n           'Mahishmati', 'Gastric', 'Jordan', 'Santoor', 'Che Guevera',\n           'Pratap Chandra Lal', 'Tractor', 'Aizawl', 'Tetanus', ' I K Gujral',\n           'Aparna Balan', 'Swami Vivekananda ', 'Vishnu']\noption3 = ['Shahid Afridi', 'Dishonest', '7', 'Amritsar', 'Sindhi',\n           'Badminton', '1972', 'Pakistan', 'Hockey', 'MS Dhoni',\n           'Hockey', 'Hockey', 'South Africa', 'Delhi', 'Boxing',",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "option3",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "option3 = ['Shahid Afridi', 'Dishonest', '7', 'Amritsar', 'Sindhi',\n           'Badminton', '1972', 'Pakistan', 'Hockey', 'MS Dhoni',\n           'Hockey', 'Hockey', 'South Africa', 'Delhi', 'Boxing',\n           'Henry Becquerel', 'Tephrosia', 'Dermatitis', 'Japan',\n           'Gobi', 'Kalinga', 'Bypass', 'Saudi Arabia', 'Mridangam',\n           ' Leon Trotsky ', 'Subroto Mukarjee', 'Red Fort', 'darjeeling',\n           'Japanese Encephalitis', 'Mohd Hidayatullah ', 'Saina Nehwal',\n           'Rabindranath Tagore ', 'Shiva']\noption4 = ['Rohit Sharma', 'Miserly', '8', 'Udhampur', 'English', 'Hockey',\n           '1976', 'Australia', 'Football', 'Zaheer Khan', 'Polo', 'Tennis',",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "option4",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "option4 = ['Rohit Sharma', 'Miserly', '8', 'Udhampur', 'English', 'Hockey',\n           '1976', 'Australia', 'Football', 'Zaheer Khan', 'Polo', 'Tennis',\n           'India', 'Jaipur', 'Running', 'None of these', 'Indigofera',\n           'Cholera', 'Australia', 'None of these', 'Badami', 'Debridement',\n           'Qatar', 'Dafli', 'Vladimir Lenin', 'Aspy Engineer', 'Mangalyaan',\n           'Kohima', 'Plague', 'Zakir Hussain', 'Jwala Gutta', 'Mother Teresa',\n           'Kamadeva']\noptions = [option1, option2, option3, option4]\n# answer key\nanswer = [2, 4, 2, 3, 3, 1, 1, 4, 2, 2, 2, 2, 2, 2, 1,",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "options = [option1, option2, option3, option4]\n# answer key\nanswer = [2, 4, 2, 3, 3, 1, 1, 4, 2, 2, 2, 2, 2, 2, 1,\n          3, 4, 3, 3, 1, 2, 3, 1, 4, 4, 1, 4, 3, 3, 1,\n          3, 4, 3]\nwrong = False\n# correct variable for total correct answer\ncorrect = 0\ntotal_amt = 0\n# option list for audience poll",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "answer = [2, 4, 2, 3, 3, 1, 1, 4, 2, 2, 2, 2, 2, 2, 1,\n          3, 4, 3, 3, 1, 2, 3, 1, 4, 4, 1, 4, 3, 3, 1,\n          3, 4, 3]\nwrong = False\n# correct variable for total correct answer\ncorrect = 0\ntotal_amt = 0\n# option list for audience poll\nopt1 = [30, 24, 10, 0, 1, 72, 99, 0, 9, 2, 0, 2, 10, 1,\n        100, 1, 0, 3, 2, 98, 21, 35, 50, 40, 45, 65, 50,",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "wrong",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "wrong = False\n# correct variable for total correct answer\ncorrect = 0\ntotal_amt = 0\n# option list for audience poll\nopt1 = [30, 24, 10, 0, 1, 72, 99, 0, 9, 2, 0, 2, 10, 1,\n        100, 1, 0, 3, 2, 98, 21, 35, 50, 40, 45, 65, 50,\n        48, 5, 70, 20, 30, 20]\nopt2 = [60, 32, 80, 0, 2, 5, 1, 1, 91, 94, 95, 87, 90, 96,\n        0, 0, 2, 12, 13, 1, 60, 20, 30, 2, 0, 20, 0, 1, 10,",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "correct",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "correct = 0\ntotal_amt = 0\n# option list for audience poll\nopt1 = [30, 24, 10, 0, 1, 72, 99, 0, 9, 2, 0, 2, 10, 1,\n        100, 1, 0, 3, 2, 98, 21, 35, 50, 40, 45, 65, 50,\n        48, 5, 70, 20, 30, 20]\nopt2 = [60, 32, 80, 0, 2, 5, 1, 1, 91, 94, 95, 87, 90, 96,\n        0, 0, 2, 12, 13, 1, 60, 20, 30, 2, 0, 20, 0, 1, 10,\n        12, 20, 20, 10]\nopt3 = [2, 4, 0, 100, 97, 0, 0, 1, 0, 2, 5, 11, 0, 3, 0, 99,",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "total_amt",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "total_amt = 0\n# option list for audience poll\nopt1 = [30, 24, 10, 0, 1, 72, 99, 0, 9, 2, 0, 2, 10, 1,\n        100, 1, 0, 3, 2, 98, 21, 35, 50, 40, 45, 65, 50,\n        48, 5, 70, 20, 30, 20]\nopt2 = [60, 32, 80, 0, 2, 5, 1, 1, 91, 94, 95, 87, 90, 96,\n        0, 0, 2, 12, 13, 1, 60, 20, 30, 2, 0, 20, 0, 1, 10,\n        12, 20, 20, 10]\nopt3 = [2, 4, 0, 100, 97, 0, 0, 1, 0, 2, 5, 11, 0, 3, 0, 99,\n        2, 82, 82, 0, 18, 40, 10, 4, 1, 10, 0, 50, 70, 15,",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "opt1",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "opt1 = [30, 24, 10, 0, 1, 72, 99, 0, 9, 2, 0, 2, 10, 1,\n        100, 1, 0, 3, 2, 98, 21, 35, 50, 40, 45, 65, 50,\n        48, 5, 70, 20, 30, 20]\nopt2 = [60, 32, 80, 0, 2, 5, 1, 1, 91, 94, 95, 87, 90, 96,\n        0, 0, 2, 12, 13, 1, 60, 20, 30, 2, 0, 20, 0, 1, 10,\n        12, 20, 20, 10]\nopt3 = [2, 4, 0, 100, 97, 0, 0, 1, 0, 2, 5, 11, 0, 3, 0, 99,\n        2, 82, 82, 0, 18, 40, 10, 4, 1, 10, 0, 50, 70, 15,\n        35, 10, 64]\nopt4 = [8, 40, 10, 0, 0, 23, 0, 98, 0, 2, 0, 0, 0, 0, 0, 0,",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "opt2",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "opt2 = [60, 32, 80, 0, 2, 5, 1, 1, 91, 94, 95, 87, 90, 96,\n        0, 0, 2, 12, 13, 1, 60, 20, 30, 2, 0, 20, 0, 1, 10,\n        12, 20, 20, 10]\nopt3 = [2, 4, 0, 100, 97, 0, 0, 1, 0, 2, 5, 11, 0, 3, 0, 99,\n        2, 82, 82, 0, 18, 40, 10, 4, 1, 10, 0, 50, 70, 15,\n        35, 10, 64]\nopt4 = [8, 40, 10, 0, 0, 23, 0, 98, 0, 2, 0, 0, 0, 0, 0, 0,\n        96, 3, 3, 1, 1, 5, 10, 54, 54, 5, 50, 1, 15, 3, 25,\n        40, 6]\nopts = [opt1, opt2, opt3, opt4]",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "opt3",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "opt3 = [2, 4, 0, 100, 97, 0, 0, 1, 0, 2, 5, 11, 0, 3, 0, 99,\n        2, 82, 82, 0, 18, 40, 10, 4, 1, 10, 0, 50, 70, 15,\n        35, 10, 64]\nopt4 = [8, 40, 10, 0, 0, 23, 0, 98, 0, 2, 0, 0, 0, 0, 0, 0,\n        96, 3, 3, 1, 1, 5, 10, 54, 54, 5, 50, 1, 15, 3, 25,\n        40, 6]\nopts = [opt1, opt2, opt3, opt4]\ncondition, ques_no = 1, 0\nwhile (wrong != True):\n    ques_no += 1",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "opt4",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "opt4 = [8, 40, 10, 0, 0, 23, 0, 98, 0, 2, 0, 0, 0, 0, 0, 0,\n        96, 3, 3, 1, 1, 5, 10, 54, 54, 5, 50, 1, 15, 3, 25,\n        40, 6]\nopts = [opt1, opt2, opt3, opt4]\ncondition, ques_no = 1, 0\nwhile (wrong != True):\n    ques_no += 1\n    ran = random.randint(0, len(questions) - 1)\n    print(\"\\n\\nQ.\", ques_no, \":-\", end=\"\")\n    print(questions[ran])",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "opts",
        "kind": 5,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "peekOfCode": "opts = [opt1, opt2, opt3, opt4]\ncondition, ques_no = 1, 0\nwhile (wrong != True):\n    ques_no += 1\n    ran = random.randint(0, len(questions) - 1)\n    print(\"\\n\\nQ.\", ques_no, \":-\", end=\"\")\n    print(questions[ran])\n    for num, option in enumerate(options):\n        print(str(num + 1) + \".\" + option[ran])\n    print(\"Would you like to take lifeline, if yes, press\\",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.KBC.KBC2.0",
        "documentation": {}
    },
    {
        "label": "deal_card",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "peekOfCode": "def deal_card():\n    cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n    card = random.choice(cards)\n    return card\ndef calculate_score(cards):\n    if sum(cards) == 21 and len(cards) == 2:\n        return 0\n    if 11 in cards and sum(cards) > 21:\n        cards.remove(11)\n        cards.append(1)",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "documentation": {}
    },
    {
        "label": "calculate_score",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "peekOfCode": "def calculate_score(cards):\n    if sum(cards) == 21 and len(cards) == 2:\n        return 0\n    if 11 in cards and sum(cards) > 21:\n        cards.remove(11)\n        cards.append(1)\n    return sum(cards)\ndef compare():\n    if user_score > 21 and computer_score > 21:\n        return \"You went over. You lose 😤\"",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "documentation": {}
    },
    {
        "label": "compare",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "peekOfCode": "def compare():\n    if user_score > 21 and computer_score > 21:\n        return \"You went over. You lose 😤\"\n    if user_score == computer_score:\n        return \"Draw 🙃\"\n    elif computer_score == 0:\n        return \"Lose, opponent has Blackjack 😱\"\n    elif user_score == 0:\n        return \"Win with a Blackjack 😎\"\n    elif user_score > 21:",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "documentation": {}
    },
    {
        "label": "play_game",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "description": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "peekOfCode": "def play_game():\n    global computer_score, user_score\n    user_cards = []\n    computer_cards = []\n    is_game_over = False\n    for _ in range(2):\n        user_cards.append(deal_card())\n        computer_cards.append(deal_card())\n    while not is_game_over:\n        user_score = calculate_score(user_cards)",
        "detail": "M-05(May).Week-02.15 May.Prods.Assignments.BlackJack",
        "documentation": {}
    },
    {
        "label": "outer_function",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Class Codes.demo_funcs",
        "description": "M-05(May).Week-02.15 May.Prods.Class Codes.demo_funcs",
        "peekOfCode": "def outer_function():\n    print(\"Outer Function\")\n    def inner_function():\n        print(\"Inner Function\")\n    return inner_function\nif __name__ == '__main__':\n    func = outer_function()()",
        "detail": "M-05(May).Week-02.15 May.Prods.Class Codes.demo_funcs",
        "documentation": {}
    },
    {
        "label": "setup_towers",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "description": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "peekOfCode": "def setup_towers():\n    screen = turtle.Screen()\n    screen.bgcolor(\"white\")\n    # Set up the rods\n    rod_a = turtle.Turtle()\n    rod_a.speed(0)\n    rod_a.color(\"black\")\n    rod_a.goto(-200, 0)\n    rod_b = turtle.Turtle()\n    rod_b.speed(0)",
        "detail": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "documentation": {}
    },
    {
        "label": "tower_of_hanoi",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "description": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "peekOfCode": "def tower_of_hanoi(n, source, destination, auxiliary, count):\n    if n == 1:\n        print(\"Move disk 1 from\", source, \"to\", destination)\n        return count\n    input(\"Press Enter to continue...\")\n    # Draw the current state before moving\n    draw_state(n, source, auxiliary, destination)\n    input(\"Press Enter to continue...\")\n    tower_of_hanoi(n - 1, source, auxiliary, destination, count + 1)\n    input(\"Press Enter to continue...\")",
        "detail": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "documentation": {}
    },
    {
        "label": "draw_state",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "description": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "peekOfCode": "def draw_state(n, source, auxiliary, destination):\n    # Clear previous drawings\n    source.clear()\n    auxiliary.clear()\n    destination.clear()\n    # Draw the rods\n    source.penup()\n    source.goto(-200, 0)\n    source.pendown()\n    auxiliary.penup()",
        "detail": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "description": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "peekOfCode": "def main():\n    rod_a, rod_b, rod_c = setup_towers()\n    tower_of_hanoi(5, rod_a, rod_b, rod_c, 0)\n    turtle.done()\nif __name__ == '__main__':\n    main()",
        "detail": "M-05(May).Week-02.15 May.Prods.Class Codes.tower_of_hanoi",
        "documentation": {}
    },
    {
        "label": "get_integer_input",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q1",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q1",
        "peekOfCode": "def get_integer_input(prompt):\n    while True:\n        try:\n            value = int(input(prompt))\n            return value\n        except ValueError:\n            print(\"Invalid input. Please enter an integer.\")\ndef divide_numbers():\n    print(\"Welcome to the division calculator!\")\n    numerator = get_integer_input(\"Please enter the numerator (an integer): \")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q1",
        "documentation": {}
    },
    {
        "label": "divide_numbers",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q1",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q1",
        "peekOfCode": "def divide_numbers():\n    print(\"Welcome to the division calculator!\")\n    numerator = get_integer_input(\"Please enter the numerator (an integer): \")\n    denominator = get_integer_input(\"Please enter the denominator (an integer): \")\n    try:\n        result = numerator / denominator\n    except ZeroDivisionError:\n        print(\"Error: Division by zero is not allowed.\")\n    else:\n        print(f\"The result of {numerator} divided by {denominator} is {result}\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q1",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "peekOfCode": "class MenuItem:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\nclass Menu:\n    def __init__(self):\n        self.menu_items = {}\n    def add_item(self, item):\n        self.menu_items[item.name] = item\n    def display_menu(self):",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "peekOfCode": "class Menu:\n    def __init__(self):\n        self.menu_items = {}\n    def add_item(self, item):\n        self.menu_items[item.name] = item\n    def display_menu(self):\n        print(\"Menu:\")\n        for item in self.menu_items.values():\n            print(f\"{item.name}: ${item.price:.2f}\")\nclass Order:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "peekOfCode": "class Order:\n    def __init__(self):\n        self.items = {}\n    def add_item(self, item, quantity):\n        if item.name in self.items:\n            self.items[item.name]['quantity'] += quantity\n        else:\n            self.items[item.name] = {'item': item, 'quantity': quantity}\n    def calculate_total(self):\n        total = sum(item_info['item'].price * item_info['quantity'] for item_info in self.items.values())",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "peekOfCode": "def main():\n    menu = Menu()\n    menu.add_item(MenuItem(\"Burger\", 5.99))\n    menu.add_item(MenuItem(\"Pizza\", 8.99))\n    menu.add_item(MenuItem(\"Salad\", 3.99))\n    menu.add_item(MenuItem(\"Drink\", 1.99))\n    order = Order()\n    while True:\n        print(\"\\nRestaurant Order Handling System:\")\n        print(\"1. View Menu\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q10",
        "documentation": {}
    },
    {
        "label": "PostNotFoundException",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q11",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q11",
        "peekOfCode": "class PostNotFoundException(Exception):\n    pass\nclass SocialMediaPlatform:\n    def __init__(self):\n        self.posts = []\n    def create_post(self, content):\n        self.posts.append(content)\n        print(\"Post created successfully.\")\n    def view_posts(self):\n        if not self.posts:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q11",
        "documentation": {}
    },
    {
        "label": "SocialMediaPlatform",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q11",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q11",
        "peekOfCode": "class SocialMediaPlatform:\n    def __init__(self):\n        self.posts = []\n    def create_post(self, content):\n        self.posts.append(content)\n        print(\"Post created successfully.\")\n    def view_posts(self):\n        if not self.posts:\n            print(\"No posts available.\")\n        else:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q11",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q11",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q11",
        "peekOfCode": "def main():\n    social_media = SocialMediaPlatform()\n    while True:\n        print(\"\\nSocial Media Platform:\")\n        print(\"1. Create Post\")\n        print(\"2. View Posts\")\n        print(\"3. Delete Post\")\n        print(\"4. Exit\")\n        choice = input(\"Enter the number of your choice: \")\n        if choice == '1':",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q11",
        "documentation": {}
    },
    {
        "label": "AppointmentNotFoundException",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q12",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q12",
        "peekOfCode": "class AppointmentNotFoundException(Exception):\n    pass\nclass Calendar:\n    def __init__(self):\n        self.appointments = {}\n    def schedule_appointment(self, date, time, description):\n        if date not in self.appointments:\n            self.appointments[date] = []\n        self.appointments[date].append({'time': time, 'description': description})\n        print(\"Appointment scheduled successfully.\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q12",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q12",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q12",
        "peekOfCode": "class Calendar:\n    def __init__(self):\n        self.appointments = {}\n    def schedule_appointment(self, date, time, description):\n        if date not in self.appointments:\n            self.appointments[date] = []\n        self.appointments[date].append({'time': time, 'description': description})\n        print(\"Appointment scheduled successfully.\")\n    def view_appointments(self):\n        if not self.appointments:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q12",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q12",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q12",
        "peekOfCode": "def main():\n    calendar = Calendar()\n    while True:\n        print(\"\\nCalendar Application:\")\n        print(\"1. Schedule Appointment\")\n        print(\"2. View Appointments\")\n        print(\"3. Cancel Appointment\")\n        print(\"4. Exit\")\n        choice = input(\"Enter the number of your choice: \")\n        if choice == '1':",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q12",
        "documentation": {}
    },
    {
        "label": "get_number_input",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "peekOfCode": "def get_number_input(prompt):\n    while True:\n        try:\n            value = float(input(prompt))\n            return value\n        except ValueError:\n            print(\"Invalid input. Please enter a valid number.\")\ndef get_operation_input():\n    valid_operations = ['+', '-', '*', '/']\n    while True:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "documentation": {}
    },
    {
        "label": "get_operation_input",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "peekOfCode": "def get_operation_input():\n    valid_operations = ['+', '-', '*', '/']\n    while True:\n        operation = input(\"Please enter an arithmetic operation (+, -, *, /): \")\n        if operation in valid_operations:\n            return operation\n        else:\n            print(\"Invalid operation. Please enter one of +, -, *, /.\")\ndef perform_operation(num1, num2, operation):\n    if operation == '+':",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "documentation": {}
    },
    {
        "label": "perform_operation",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "peekOfCode": "def perform_operation(num1, num2, operation):\n    if operation == '+':\n        return num1 + num2\n    elif operation == '-':\n        return num1 - num2\n    elif operation == '*':\n        return num1 * num2\n    elif operation == '/':\n        if num2 == 0:\n            raise ZeroDivisionError(\"Error: Division by zero is not allowed.\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "peekOfCode": "def main():\n    print(\"Welcome to the arithmetic calculator!\")\n    num1 = get_number_input(\"Please enter the first number: \")\n    num2 = get_number_input(\"Please enter the second number: \")\n    operation = get_operation_input()\n    try:\n        result = perform_operation(num1, num2, operation)\n    except ZeroDivisionError as e:\n        print(e)\n    else:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q2",
        "documentation": {}
    },
    {
        "label": "validate_length",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "peekOfCode": "def validate_length(input_str, max_length, field_name):\n    if len(input_str) > max_length:\n        raise ValueError(f\"{field_name} must be {max_length} characters or fewer.\")\n    return input_str\ndef get_username():\n    while True:\n        try:\n            username = input(\"Enter a username (max 20 characters): \")\n            validate_length(username, 20, \"Username\")\n            return username",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "documentation": {}
    },
    {
        "label": "get_username",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "peekOfCode": "def get_username():\n    while True:\n        try:\n            username = input(\"Enter a username (max 20 characters): \")\n            validate_length(username, 20, \"Username\")\n            return username\n        except ValueError as e:\n            print(e)\ndef get_password():\n    while True:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "documentation": {}
    },
    {
        "label": "get_password",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "peekOfCode": "def get_password():\n    while True:\n        try:\n            password = input(\"Enter a password (max 50 characters): \")\n            validate_length(password, 50, \"Password\")\n            return password\n        except ValueError as e:\n            print(e)\ndef get_email():\n    while True:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "documentation": {}
    },
    {
        "label": "get_email",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "peekOfCode": "def get_email():\n    while True:\n        try:\n            email = input(\"Enter an email (max 50 characters): \")\n            validate_length(email, 50, \"Email\")\n            return email\n        except ValueError as e:\n            print(e)\ndef main():\n    print(\"Welcome to the sensitive data validation program!\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "peekOfCode": "def main():\n    print(\"Welcome to the sensitive data validation program!\")\n    username = get_username()\n    password = get_password()\n    email = get_email()\n    print(\"All inputs are valid.\")\n    print(f\"Username: {username}\")\n    print(f\"Password: {password}\")\n    print(f\"Email: {email}\")\nif __name__ == \"__main__\":",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q3",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundException",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "peekOfCode": "class AccountNotFoundException(Exception):\n    pass\nclass InsufficientBalanceException(Exception):\n    pass\nclass BankAccount:\n    def __init__(self, account_number, balance=0):\n        self.account_number = account_number\n        self.balance = balance\n    def deposit(self, amount):\n        self.balance += amount",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "documentation": {}
    },
    {
        "label": "InsufficientBalanceException",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "peekOfCode": "class InsufficientBalanceException(Exception):\n    pass\nclass BankAccount:\n    def __init__(self, account_number, balance=0):\n        self.account_number = account_number\n        self.balance = balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        if amount > self.balance:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "peekOfCode": "class BankAccount:\n    def __init__(self, account_number, balance=0):\n        self.account_number = account_number\n        self.balance = balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise InsufficientBalanceException(f\"Account {self.account_number} has insufficient balance.\")\n        self.balance -= amount",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "peekOfCode": "class Bank:\n    def __init__(self):\n        self.accounts = {}\n    def add_account(self, account):\n        self.accounts[account.account_number] = account\n    def find_account(self, account_number):\n        if account_number not in self.accounts:\n            raise AccountNotFoundException(f\"Account {account_number} not found.\")\n        return self.accounts[account_number]\n    def transfer(self, from_account_number, to_account_number, amount):",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "peekOfCode": "def main():\n    bank = Bank()\n    # Adding accounts to the bank\n    bank.add_account(BankAccount('123', 500))\n    bank.add_account(BankAccount('456', 300))\n    bank.add_account(BankAccount('789', 1000))\n    print(\"Initial Account Balances:\")\n    for account in bank.accounts.values():\n        print(account)\n    try:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q4",
        "documentation": {}
    },
    {
        "label": "get_positive_number",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "peekOfCode": "def get_positive_number(prompt):\n    while True:\n        try:\n            value = float(input(prompt))\n            if value <= 0:\n                raise ValueError(\"The value must be positive.\")\n            return value\n        except ValueError as e:\n            print(f\"Invalid input: {e}\")\ndef calculate_rectangle_area():",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "documentation": {}
    },
    {
        "label": "calculate_rectangle_area",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "peekOfCode": "def calculate_rectangle_area():\n    width = get_positive_number(\"Enter the width of the rectangle: \")\n    height = get_positive_number(\"Enter the height of the rectangle: \")\n    return width * height\ndef calculate_circle_area():\n    radius = get_positive_number(\"Enter the radius of the circle: \")\n    return math.pi * radius * radius\ndef calculate_triangle_area():\n    base = get_positive_number(\"Enter the base of the triangle: \")\n    height = get_positive_number(\"Enter the height of the triangle: \")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "documentation": {}
    },
    {
        "label": "calculate_circle_area",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "peekOfCode": "def calculate_circle_area():\n    radius = get_positive_number(\"Enter the radius of the circle: \")\n    return math.pi * radius * radius\ndef calculate_triangle_area():\n    base = get_positive_number(\"Enter the base of the triangle: \")\n    height = get_positive_number(\"Enter the height of the triangle: \")\n    return 0.5 * base * height\ndef main():\n    while True:\n        print(\"Choose a shape to Calculator the area:\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "documentation": {}
    },
    {
        "label": "calculate_triangle_area",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "peekOfCode": "def calculate_triangle_area():\n    base = get_positive_number(\"Enter the base of the triangle: \")\n    height = get_positive_number(\"Enter the height of the triangle: \")\n    return 0.5 * base * height\ndef main():\n    while True:\n        print(\"Choose a shape to Calculator the area:\")\n        print(\"1. Rectangle\")\n        print(\"2. Circle\")\n        print(\"3. Triangle\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "peekOfCode": "def main():\n    while True:\n        print(\"Choose a shape to Calculator the area:\")\n        print(\"1. Rectangle\")\n        print(\"2. Circle\")\n        print(\"3. Triangle\")\n        print(\"4. Exit\")\n        choice = input(\"Enter the number of your choice: \")\n        if choice == '1':\n            area = calculate_rectangle_area()",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q5",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q6",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q6",
        "peekOfCode": "class BankAccount:\n    def __init__(self, initial_balance=0.0):\n        self.balance = initial_balance\n    def deposit(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Deposit amount must be positive.\")\n        self.balance += amount\n        return self.balance\n    def withdraw(self, amount):\n        if amount <= 0:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q6",
        "documentation": {}
    },
    {
        "label": "get_positive_number",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q6",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q6",
        "peekOfCode": "def get_positive_number(prompt):\n    while True:\n        try:\n            value = float(input(prompt))\n            if value <= 0:\n                raise ValueError(\"The amount must be positive.\")\n            return value\n        except ValueError as e:\n            print(f\"Invalid input: {e}\")\ndef main():",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q6",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q6",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q6",
        "peekOfCode": "def main():\n    print(\"Welcome to the Simple Banking System!\")\n    initial_balance = 0.0\n    while True:\n        try:\n            initial_balance = float(input(\"Please enter your initial balance: \"))\n            if initial_balance < 0:\n                raise ValueError(\"Initial balance cannot be negative.\")\n            break\n        except ValueError as e:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q6",
        "documentation": {}
    },
    {
        "label": "BookNotAvailableException",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "peekOfCode": "class BookNotAvailableException(Exception):\n    pass\nclass BookNotBorrowedException(Exception):\n    pass\nclass Library:\n    def __init__(self):\n        self.books = {}\n        self.borrowed_books = {}\n    def add_book(self, title, quantity=1):\n        if title in self.books:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "documentation": {}
    },
    {
        "label": "BookNotBorrowedException",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "peekOfCode": "class BookNotBorrowedException(Exception):\n    pass\nclass Library:\n    def __init__(self):\n        self.books = {}\n        self.borrowed_books = {}\n    def add_book(self, title, quantity=1):\n        if title in self.books:\n            self.books.title += quantity\n        else:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "documentation": {}
    },
    {
        "label": "Library",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "peekOfCode": "class Library:\n    def __init__(self):\n        self.books = {}\n        self.borrowed_books = {}\n    def add_book(self, title, quantity=1):\n        if title in self.books:\n            self.books.title += quantity\n        else:\n            self.books[title] = quantity\n    def borrow_book(self, title):",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "peekOfCode": "def main():\n    library = Library()\n    # Adding some books to the library\n    library.add_book(\"1984\", 3)\n    library.add_book(\"To Kill a Mockingbird\", 2)\n    library.add_book(\"The Great Gatsby\", 1)\n    while True:\n        print(\"\\nLibrary Management System:\")\n        print(\"1. Borrow a Book\")\n        print(\"2. Return a Book\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q7",
        "documentation": {}
    },
    {
        "label": "ItemNotFoundException",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "peekOfCode": "class ItemNotFoundException(Exception):\n    pass\nclass InventoryItem:\n    def __init__(self, name, quantity):\n        self.name = name\n        self.quantity = quantity\n    def update_quantity(self, quantity):\n        if quantity < 0:\n            raise ValueError(\"Quantity cannot be negative.\")\n        self.quantity = quantity",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "documentation": {}
    },
    {
        "label": "InventoryItem",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "peekOfCode": "class InventoryItem:\n    def __init__(self, name, quantity):\n        self.name = name\n        self.quantity = quantity\n    def update_quantity(self, quantity):\n        if quantity < 0:\n            raise ValueError(\"Quantity cannot be negative.\")\n        self.quantity = quantity\n    def __str__(self):\n        return f\"{self.name}: {self.quantity} unit(s)\"",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "documentation": {}
    },
    {
        "label": "GroceryStoreInventory",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "peekOfCode": "class GroceryStoreInventory:\n    def __init__(self):\n        self.inventory = {}\n    def add_item(self, name, quantity):\n        if name in self.inventory:\n            self.inventory[name].quantity += quantity\n        else:\n            self.inventory[name] = InventoryItem(name, quantity)\n    def update_item(self, name, quantity):\n        if name not in self.inventory:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "documentation": {}
    },
    {
        "label": "get_positive_integer",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "peekOfCode": "def get_positive_integer(prompt):\n    while True:\n        try:\n            value = int(input(prompt))\n            if value < 0:\n                raise ValueError(\"The number must be non-negative.\")\n            return value\n        except ValueError as e:\n            print(f\"Invalid input: {e}\")\ndef main():",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "peekOfCode": "def main():\n    inventory = GroceryStoreInventory()\n    while True:\n        print(\"\\nGrocery Store Inventory Management System:\")\n        print(\"1. Add Item\")\n        print(\"2. Update Item Quantity\")\n        print(\"3. Remove Item\")\n        print(\"4. View Inventory\")\n        print(\"5. Search for an Item\")\n        print(\"6. Exit\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q8",
        "documentation": {}
    },
    {
        "label": "ItemOutOfStockException",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "peekOfCode": "class ItemOutOfStockException(Exception):\n    pass\nclass Item:\n    def __init__(self, name, price, stock):\n        self.name = name\n        self.price = price\n        self.stock = stock\n    def __str__(self):\n        return f\"{self.name} - ${self.price:.2f} (Stock: {self.stock})\"\nclass ShoppingCart:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "peekOfCode": "class Item:\n    def __init__(self, name, price, stock):\n        self.name = name\n        self.price = price\n        self.stock = stock\n    def __str__(self):\n        return f\"{self.name} - ${self.price:.2f} (Stock: {self.stock})\"\nclass ShoppingCart:\n    def __init__(self):\n        self.items = {}",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "kind": 6,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "peekOfCode": "class ShoppingCart:\n    def __init__(self):\n        self.items = {}\n    def add_item(self, item, quantity):\n        if item.stock < quantity:\n            raise ItemOutOfStockException(f\"Item '{item.name}' is out of stock. Available stock: {item.stock}\")\n        if item.name in self.items:\n            self.items[item.name]['quantity'] += quantity\n        else:\n            self.items[item.name] = {'item': item, 'quantity': quantity}",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "description": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "peekOfCode": "def main():\n    # Sample items in the store\n    items = [\n        Item(\"Laptop\", 999.99, 5),\n        Item(\"Headphones\", 199.99, 10),\n        Item(\"Coffee Maker\", 49.99, 2),\n        Item(\"Book\", 14.99, 0)  # Out of stock item\n    ]\n    cart = ShoppingCart()\n    while True:",
        "detail": "M-05(May).Week-02.16 May.Prods.Assignments.Exception_Handling.Q9",
        "documentation": {}
    },
    {
        "label": "display_question",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "peekOfCode": "def display_question(question, options, countdown):\n    print(question)\n    for j, option in enumerate(options, 1):\n        print(f\"{j}. {option}\")\n    if countdown is not None:\n        print(f\"Time Left for Question: {countdown} sec\")\ndef fifty_fifty_lifeline(options, correct_option_index):\n    options_copy = options[:]\n    options_copy.pop(correct_option_index)\n    incorrect_option_index = random.choice(range(len(options_copy)))",
        "detail": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "fifty_fifty_lifeline",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "peekOfCode": "def fifty_fifty_lifeline(options, correct_option_index):\n    options_copy = options[:]\n    options_copy.pop(correct_option_index)\n    incorrect_option_index = random.choice(range(len(options_copy)))\n    incorrect_option = options_copy[incorrect_option_index]\n    options_remaining = [options[correct_option_index], incorrect_option]\n    print(f\"The options have been reduced to two: {options_remaining[0]} and {options_remaining[1]}\")\n    options.remove(incorrect_option)\ndef flip_question_lifeline(flipped_questions):\n    question_index = random.randint(0, len(flipped_questions) - 1)",
        "detail": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "flip_question_lifeline",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "peekOfCode": "def flip_question_lifeline(flipped_questions):\n    question_index = random.randint(0, len(flipped_questions) - 1)\n    question = flipped_questions.pop(question_index)\n    print(\"The question has been flipped!\")\n    display_question(question['question'], question['options'], None)\n    return question\ndef double_dip_lifeline(question_number, questions):\n    print(\"You chose Double Dip! You will have two attempts to answer this question.\")\n    user_choice = int(input(\"Enter your first choice (1-4): \")) - 1\n    if user_choice == questions[question_number]['answer']:",
        "detail": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "double_dip_lifeline",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "peekOfCode": "def double_dip_lifeline(question_number, questions):\n    print(\"You chose Double Dip! You will have two attempts to answer this question.\")\n    user_choice = int(input(\"Enter your first choice (1-4): \")) - 1\n    if user_choice == questions[question_number]['answer']:\n        print(\"Correct! You still have one more attempt.\")\n        user_choice = int(input(\"Enter your second choice (1-4): \")) - 1\n        if user_choice != questions[question_number]['answer']:\n            print(\"Wrong answer. But you still have one more attempt.\")\n    else:\n        print(\"Wrong answer. Game over!\")",
        "detail": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "peekOfCode": "def timer(countdown):\n    while countdown > 0:\n        print(f\"{countdown} seconds is the time left\", end='\\r')\n        time.sleep(1)\n        countdown -= 1\n        if countdown <= 5:\n            winsound.Beep(1000, 100)\n    print(\"Time's up!\")\n    sys.exit()\n# def timer(countdown):",
        "detail": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "quiz_game",
        "kind": 2,
        "importPath": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "peekOfCode": "def quiz_game(questions):\n    score = 0\n    points = 1000\n    fifty_fifty_used = False\n    flip_question_used = False\n    double_dip_used = False\n    flipped_questions = questions[:]\n    for question_number in range(len(questions)):\n        if question_number < 5:\n            countdown = 30",
        "detail": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "peekOfCode": "questions = [\n    {\"question\": \"What is the capital of France?\",\n     \"options\": [\"Paris\", \"London\", \"Berlin\", \"Madrid\", \"Choose lifeline\"], \"answer\": 0},\n    {\"question\": \"What is the largest planet in our solar system?\",\n     \"options\": [\"Earth\", \"Jupiter\", \"Mars\", \"Venus\", \"Choose lifeline\"], \"answer\": 1},\n    {\"question\": \"Who wrote 'Romeo and Juliet'?\",\n     \"options\": [\"William Shakespeare\", \"Charles Dickens\", \"Jane Austen\", \"Mark Twain\", \"Choose lifeline\"],\n     \"answer\": 0},\n    {\"question\": \"What is the chemical symbol for gold?\", \"options\": [\"Au\", \"Ag\", \"Fe\", \"Cu\", \"Choose lifeline\"],\n     \"answer\": 0},",
        "detail": "M-05(May).Week-02.16 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "display_players_starting_with_A",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q10",
        "description": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q10",
        "peekOfCode": "def display_players_starting_with_A():\n    try:\n        with open('Assets/players.dat', 'rb') as file:\n            while True:\n                try:\n                    player = pickle.load(file)\n                    if player['name'].startswith('A'):\n                        print(player)\n                except EOFError:\n                    break",
        "detail": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q10",
        "documentation": {}
    },
    {
        "label": "count_players_from_country",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q10",
        "description": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q10",
        "peekOfCode": "def count_players_from_country(country):\n    count = 0\n    try:\n        with open('Assets/players.dat', 'rb') as file:\n            while True:\n                try:\n                    player = pickle.load(file)\n                    if player['country'] == country:\n                        count += 1\n                except EOFError:",
        "detail": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q10",
        "documentation": {}
    },
    {
        "label": "add_player_record",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q10",
        "description": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q10",
        "peekOfCode": "def add_player_record():\n    with open('Assets/players.dat', 'ab') as file:\n        player = {}\n        player['code'] = input('Enter player code: ')\n        player['name'] = input('Enter player name: ')\n        player['country'] = input('Enter player country: ')\n        player['total runs'] = int(input('Enter total runs: '))\n        pickle.dump(player, file)\nadd_player_record()\ndisplay_players_starting_with_A()",
        "detail": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q10",
        "documentation": {}
    },
    {
        "label": "JTOI",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q6",
        "description": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q6",
        "peekOfCode": "def JTOI():\n    with open('WORDS.TXT', 'r') as file:\n        text = file.read()\n    corrected_text = text.replace('J', 'I')\n    print('Corrected content:')\n    print(corrected_text)\nJTOI()",
        "detail": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q6",
        "documentation": {}
    },
    {
        "label": "createFile",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q7",
        "description": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q7",
        "peekOfCode": "def createFile():\n    with open('Assets/Book.dat', 'ab') as file:\n        book = {}\n        book['BookNo'] = input('Enter book number: ')\n        book['Book_Name'] = input('Enter book name: ')\n        book['Author'] = input('Enter author name: ')\n        book['Price'] = float(input('Enter price: '))\n        pickle.dump(book, file)\ndef countRec(author):\n    count = 0",
        "detail": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q7",
        "documentation": {}
    },
    {
        "label": "countRec",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q7",
        "description": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q7",
        "peekOfCode": "def countRec(author):\n    count = 0\n    try:\n        with open('Assets/Book.dat', 'rb') as file:\n            while True:\n                try:\n                    book = pickle.load(file)\n                    if book['Author'] == author:\n                        count += 1\n                except EOFError:",
        "detail": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q7",
        "documentation": {}
    },
    {
        "label": "count_rec",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q8",
        "description": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q8",
        "peekOfCode": "def count_rec():\n    count = 0\n    try:\n        with open('Assets/student.dat', 'rb') as file:\n            while True:\n                try:\n                    student = pickle.load(file)\n                    if student['Percentage'] > 75:\n                        print(student)\n                        count += 1",
        "detail": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q8",
        "documentation": {}
    },
    {
        "label": "add_employee_record",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q9",
        "description": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q9",
        "peekOfCode": "def add_employee_record():\n    with open('Assets/employee.dat', 'ab') as file:\n        employee = {}\n        employee['empcode'] = input('Enter employee code: ')\n        employee['name'] = input('Enter name: ')\n        employee['salary'] = float(input('Enter salary: '))\n        pickle.dump(employee, file)\ndef display_high_salary_employees():\n    try:\n        with open('Assets/employee.dat', 'rb') as file:",
        "detail": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q9",
        "documentation": {}
    },
    {
        "label": "display_high_salary_employees",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q9",
        "description": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q9",
        "peekOfCode": "def display_high_salary_employees():\n    try:\n        with open('Assets/employee.dat', 'rb') as file:\n            while True:\n                try:\n                    employee = pickle.load(file)\n                    if employee['salary'] > 30000:\n                        print(employee)\n                except EOFError:\n                    break",
        "detail": "M-05(May).Week-03.20 May.Prods.Assignments.Codes.Q9",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-03.20 May.Prods.Class Codes.demo",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')  # Replace 'en' with your desired language code\n    filename = 'output.mp3'  # Specify the output filename\n    tts.save(filename)\n    # Play the generated audio\n    playsound(filename)\n    os.remove(filename)\nconvert_text_to_speech(\"Hello World\")",
        "detail": "M-05(May).Week-03.20 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "arrange_emp_acc_to_doj",
        "kind": 2,
        "importPath": "M-05(May).Week-03.20 May.Prods.Class Codes.emp_data",
        "description": "M-05(May).Week-03.20 May.Prods.Class Codes.emp_data",
        "peekOfCode": "def arrange_emp_acc_to_doj(emp_list: list) -> list:\n    return sorted(emp_list, key=lambda date: date[\"DOJ\"])\nif __name__ == '__main__':\n    emp = [\n        {\"name\": \"aayush\", \"DOJ\": datetime.datetime(2024, 4, 8)},\n        {\"name\": \"vikrant\", \"DOJ\": datetime.datetime(2022, 2, 8)},\n        {\"name\": \"prankur\", \"DOJ\": datetime.datetime(2023, 12, 5)},\n        {\"name\": \"aaditya\", \"DOJ\": datetime.datetime(2022, 1, 8)}\n    ]\n    for temps in emp:",
        "detail": "M-05(May).Week-03.20 May.Prods.Class Codes.emp_data",
        "documentation": {}
    },
    {
        "label": "emp",
        "kind": 5,
        "importPath": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "description": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "peekOfCode": "emp = {'name': 'aayush', 'number': '9910132767'}\nwith open('data.txt', 'wb') as file:\n    pick.dump(emp, file)\nwith open('data.txt', 'rb') as file:\n    emp_d = pick.load(file)\n    print(emp_d)\nemp = {'name': 'aayush', 'age': 22}\nemp_str = pick.dumps(emp)\nprint(emp_str)\nemp_obj = pick.loads(emp_str)",
        "detail": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "documentation": {}
    },
    {
        "label": "emp",
        "kind": 5,
        "importPath": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "description": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "peekOfCode": "emp = {'name': 'aayush', 'age': 22}\nemp_str = pick.dumps(emp)\nprint(emp_str)\nemp_obj = pick.loads(emp_str)\nprint(emp_obj)",
        "detail": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "documentation": {}
    },
    {
        "label": "emp_str",
        "kind": 5,
        "importPath": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "description": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "peekOfCode": "emp_str = pick.dumps(emp)\nprint(emp_str)\nemp_obj = pick.loads(emp_str)\nprint(emp_obj)",
        "detail": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "documentation": {}
    },
    {
        "label": "emp_obj",
        "kind": 5,
        "importPath": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "description": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "peekOfCode": "emp_obj = pick.loads(emp_str)\nprint(emp_obj)",
        "detail": "M-05(May).Week-03.20 May.Prods.Class Codes.Packing_and_Unpacking",
        "documentation": {}
    },
    {
        "label": "add_message",
        "kind": 2,
        "importPath": "M-05(May).Week-03.21 May.Prods.Class Codes.Decorators",
        "description": "M-05(May).Week-03.21 May.Prods.Class Codes.Decorators",
        "peekOfCode": "def add_message(func):\n    # Define a wrapper function that will execute the original function and add the messages\n    def wrapper():\n        print(\"Before calling the function\")\n        func()\n        print(\"After calling the function\")\n    # Return the wrapper function as the modified version of the original function\n    return wrapper\n# Define a simple function that prints \"Hello world\"\n# def hello():",
        "detail": "M-05(May).Week-03.21 May.Prods.Class Codes.Decorators",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "M-05(May).Week-03.21 May.Prods.Class Codes.Decorators",
        "description": "M-05(May).Week-03.21 May.Prods.Class Codes.Decorators",
        "peekOfCode": "def hello():\n    print(\"Hello world\")\n# Call the decorated hello function\nhello()\n# Output:\n# Before calling the function\n# Hello world\n# After calling the function\n# \"\"\" In programming decorators is a design pattern that add additional responsiblities to an object dynamically\n# Decorator is a function, decorator is always going to take a fuction as argument and do some enhancements and return the same output fucntion",
        "detail": "M-05(May).Week-03.21 May.Prods.Class Codes.Decorators",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 2,
        "importPath": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "description": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "peekOfCode": "def timer():\n    for i in range(10):\n        time.sleep(1)\n        print(\"\\r\", end=\"\", flush=True)\n        print(f\"Timer: {i + 1} seconds have passed\", end=\"\", flush=True)\ndef other_code():\n    here = input(\"Enter your answer: \")\n    print(here)\n# Create threads\ntimer_thread = threading.Thread(target=timer)",
        "detail": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "documentation": {}
    },
    {
        "label": "other_code",
        "kind": 2,
        "importPath": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "description": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "peekOfCode": "def other_code():\n    here = input(\"Enter your answer: \")\n    print(here)\n# Create threads\ntimer_thread = threading.Thread(target=timer)\nother_code_thread = threading.Thread(target=other_code)\n# Start threads\ntimer_thread.start()\nother_code_thread.start()\n# Wait for threads to complete",
        "detail": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "documentation": {}
    },
    {
        "label": "timer_thread",
        "kind": 5,
        "importPath": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "description": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "peekOfCode": "timer_thread = threading.Thread(target=timer)\nother_code_thread = threading.Thread(target=other_code)\n# Start threads\ntimer_thread.start()\nother_code_thread.start()\n# Wait for threads to complete\ntimer_thread.join()\nother_code_thread.join()\nprint(\"Both threads have finished execution\")",
        "detail": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "documentation": {}
    },
    {
        "label": "other_code_thread",
        "kind": 5,
        "importPath": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "description": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "peekOfCode": "other_code_thread = threading.Thread(target=other_code)\n# Start threads\ntimer_thread.start()\nother_code_thread.start()\n# Wait for threads to complete\ntimer_thread.join()\nother_code_thread.join()\nprint(\"Both threads have finished execution\")",
        "detail": "M-05(May).Week-03.21 May.Prods.Class Codes.demonew",
        "documentation": {}
    },
    {
        "label": "gen",
        "kind": 2,
        "importPath": "M-05(May).Week-03.22 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-03.22 May.Prods.Class Codes.demo",
        "peekOfCode": "def gen(num):\n    for i in range(num):\n        yield i\n# n = gen(10)\n# for i in n:\n#     print(i)\ndef non_gen(num):\n    l = []\n    for i in range(num):\n        l.append(i)",
        "detail": "M-05(May).Week-03.22 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "non_gen",
        "kind": 2,
        "importPath": "M-05(May).Week-03.22 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-03.22 May.Prods.Class Codes.demo",
        "peekOfCode": "def non_gen(num):\n    l = []\n    for i in range(num):\n        l.append(i)\n    return l\nn = non_gen(10)\nfor i in n:\n    print(i)",
        "detail": "M-05(May).Week-03.22 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "M-05(May).Week-03.22 May.Prods.Class Codes.demo",
        "description": "M-05(May).Week-03.22 May.Prods.Class Codes.demo",
        "peekOfCode": "n = non_gen(10)\nfor i in n:\n    print(i)",
        "detail": "M-05(May).Week-03.22 May.Prods.Class Codes.demo",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "M-05(May).Week-03.23 May.Prods.Class Codes.OOP_approach",
        "description": "M-05(May).Week-03.23 May.Prods.Class Codes.OOP_approach",
        "peekOfCode": "class Person(object):\n    pass\nclass Male(Person):\n    pass\nclass Female(Person):\n    pass\nif __name__ == '__main__':\n    m = Male()\n    mm = Male()\n    print(id(m))",
        "detail": "M-05(May).Week-03.23 May.Prods.Class Codes.OOP_approach",
        "documentation": {}
    },
    {
        "label": "Male",
        "kind": 6,
        "importPath": "M-05(May).Week-03.23 May.Prods.Class Codes.OOP_approach",
        "description": "M-05(May).Week-03.23 May.Prods.Class Codes.OOP_approach",
        "peekOfCode": "class Male(Person):\n    pass\nclass Female(Person):\n    pass\nif __name__ == '__main__':\n    m = Male()\n    mm = Male()\n    print(id(m))\n    print(id(mm))",
        "detail": "M-05(May).Week-03.23 May.Prods.Class Codes.OOP_approach",
        "documentation": {}
    },
    {
        "label": "Female",
        "kind": 6,
        "importPath": "M-05(May).Week-03.23 May.Prods.Class Codes.OOP_approach",
        "description": "M-05(May).Week-03.23 May.Prods.Class Codes.OOP_approach",
        "peekOfCode": "class Female(Person):\n    pass\nif __name__ == '__main__':\n    m = Male()\n    mm = Male()\n    print(id(m))\n    print(id(mm))",
        "detail": "M-05(May).Week-03.23 May.Prods.Class Codes.OOP_approach",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "description": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "peekOfCode": "class Item:\n    \"\"\"\n    This is a custom defined Data Type 'Item'\n    with 2 instance attributes name and price.\n    \"\"\"\n    def __init__(self, name: str, price: float):\n        \"\"\"\n        Initializes an Item instance.\n        :param name: The name of the item.\n        :param price: The price of the item.",
        "detail": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "kind": 6,
        "importPath": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "description": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "peekOfCode": "class ShoppingCart:\n    \"\"\"\n    This is the shopping cart storing all the items to be saved in the cart for item management.\n    \"\"\"\n    DISCOUNT_THRESHOLD_1 = 10000\n    DISCOUNT_RATE_1 = 0.10\n    DISCOUNT_THRESHOLD_2 = 30000\n    DISCOUNT_RATE_2 = 0.15\n    def __init__(self):\n        \"\"\"",
        "detail": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "documentation": {}
    },
    {
        "label": "Mart",
        "kind": 6,
        "importPath": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "description": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "peekOfCode": "class Mart:\n    \"\"\"\n    This class represents the mart with prebuilt data loaded from a JSON file.\n    \"\"\"\n    def __init__(self, filename: str = \"shopping_mart.json\"):\n        \"\"\"\n        Initializes a Mart instance and loads products from a JSON file.\n        :param filename: The name of the JSON file containing the mart data.\n        \"\"\"\n        self.filename = filename",
        "detail": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "description": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "peekOfCode": "class Menu:\n    \"\"\"\n    This is the menu class for a menu-driven program with menu management methods.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes a Menu instance with a shopping cart and a mart.\n        \"\"\"\n        self.cart = ShoppingCart()\n        self.mart = Mart()",
        "detail": "M-05(May).Week-04.28 May.Prods.Assignments.Shopping",
        "documentation": {}
    },
    {
        "label": "SBI",
        "kind": 6,
        "importPath": "M-05(May).Week-04.28 May.Prods.Class Codes.OOP_demo",
        "description": "M-05(May).Week-04.28 May.Prods.Class Codes.OOP_demo",
        "peekOfCode": "class SBI:\n    \"\"\"\n    Class for a Bank\n        Methods include:\n        - deposit\n        - withdraw\n        - check_balance\n    \"\"\"\n    def __init__(self, name: str, balance: float, account_type) -> None:\n        self._account_number = random.randint(500000, 1000000)",
        "detail": "M-05(May).Week-04.28 May.Prods.Class Codes.OOP_demo",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.routes.urls",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.routes.urls",
        "peekOfCode": "def route(url: str, *args, **kwargs) -> None | Callable:\n    \"\"\"\n        Routes a URL to a view function.\n        Args:\n            url (str): The URL to route.\n            *args: Variable length arguments to pass to the view function.\n            **kwargs: Variable keyword arguments to pass to the view function.\n        Raises:\n            Exception: If the URL is not found.\n        Returns:",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.routes.urls",
        "documentation": {}
    },
    {
        "label": "AccountError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "peekOfCode": "class AccountError(Exception):\n    \"\"\"\n    Base class for all account-related exceptions.\n    \"\"\"\n    pass\nclass AccountNotFoundError(AccountError):\n    \"\"\"\n    Raised when an account is not found.\n    Attributes:\n        message (str): The error message.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "peekOfCode": "class AccountNotFoundError(AccountError):\n    \"\"\"\n    Raised when an account is not found.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass InsufficientFundsError(AccountError):\n    \"\"\"\n    Raised when an account does not have sufficient funds.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "peekOfCode": "class InsufficientFundsError(AccountError):\n    \"\"\"\n    Raised when an account does not have sufficient funds.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass AccountAlreadyExistsError(AccountError):\n    \"\"\"\n    Raised when an account with the same account number already exists.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountAlreadyExistsError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "peekOfCode": "class AccountAlreadyExistsError(AccountError):\n    \"\"\"\n    Raised when an account with the same account number already exists.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass InvalidInitialBalanceError(AccountError):\n    \"\"\"\n    Raised when the initial balance of an account is invalid.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidInitialBalanceError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "peekOfCode": "class InvalidInitialBalanceError(AccountError):\n    \"\"\"\n    Raised when the initial balance of an account is invalid.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.account",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.account",
        "peekOfCode": "class Account:\n    \"\"\"\n    Represents a bank account.\n    Attributes:\n        account_number (str): The account number.\n        name (str): The account holder's name.\n        ifsc_code (str): The IFSC code of the branch.\n        branch_name (str): The name of the branch.\n        state (str): The state where the branch is located.\n        district (str): The district where the branch is located.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.account",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.bank",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.bank",
        "peekOfCode": "class Bank:\n    \"\"\"\n            A class that provides a static interface to the `Transactions` class for managing bank accounts.\n            Args:\n                None\n            \"\"\"\n    @staticmethod\n    def create_account(account_number: str, name: str, ifsc_code: str, branch_name: str, state: str, district: str,\n                       country: str, account_type: str, initial_balance: float = 0) -> None:\n        \"\"\"",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.bank",
        "documentation": {}
    },
    {
        "label": "BankingSystem",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.interface",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.interface",
        "peekOfCode": "class BankingSystem:\n    \"\"\"\n            A banking system that allows users to create accounts, deposit/credit money,\n            view statements, transfer money, and view transactions.\n            \"\"\"\n    @staticmethod\n    def main() -> None:\n        \"\"\"\n        The main function that runs the banking system.\n        \"\"\"",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.interface",
        "documentation": {}
    },
    {
        "label": "Transactions",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.transactions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.transactions",
        "peekOfCode": "class Transactions:\n    \"\"\"\n        Handles transactions and account operations.\n        Attributes:\n            transactions_file (str): The file where transactions are stored.\n        \"\"\"\n    transactions_file = \"Data/transactions.json\"\n    @staticmethod\n    def load_transactions() -> dict:\n        \"\"\"",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.BMS_Final_version.transactions",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Bank_Utility.account",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Bank_Utility.account",
        "peekOfCode": "class Account:\n    \"\"\"\n    Represents a bank account.\n    Attributes:\n        account_number (str): The account number.\n        name (str): The account holder's name.\n        ifsc_code (str): The IFSC code of the branch.\n        branch_name (str): The name of the branch.\n        state (str): The state where the branch is located.\n        district (str): The district where the branch is located.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Bank_Utility.account",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Bank_Utility.bank",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Bank_Utility.bank",
        "peekOfCode": "class Bank:\n    \"\"\"\n            A class that provides a static interface to the `Transactions` class for managing bank accounts.\n            Args:\n                None\n            \"\"\"\n    @staticmethod\n    def create_account(account_number: str, name: str, ifsc_code: str, branch_name: str, state: str, district: str,\n                       country: str, account_type: str, initial_balance: float = 0) -> None:\n        \"\"\"",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Bank_Utility.bank",
        "documentation": {}
    },
    {
        "label": "Transactions",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Bank_Utility.transactions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Bank_Utility.transactions",
        "peekOfCode": "class Transactions:\n    \"\"\"\n        Handles transactions and account operations.\n        Attributes:\n            transactions_file (str): The file where transactions are stored.\n        \"\"\"\n    transactions_file = \"transactions.json\"\n    @staticmethod\n    def load_transactions() -> dict:\n        \"\"\"",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Bank_Utility.transactions",
        "documentation": {}
    },
    {
        "label": "save_accounts_decorator",
        "kind": 2,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.decorators",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.decorators",
        "peekOfCode": "def save_accounts_decorator(func):\n    \"\"\"\n    A decorator that saves the accounts after calling the decorated function.\n    Args:\n        func: The function to decorate.\n    Returns:\n        A wrapped function that saves the accounts after calling the decorated function.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.decorators",
        "documentation": {}
    },
    {
        "label": "log_transaction_decorator",
        "kind": 2,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.decorators",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.decorators",
        "peekOfCode": "def log_transaction_decorator(transaction_type):\n    \"\"\"\n    A decorator that logs a transaction after calling the decorated function.\n    Args:\n        transaction_type: The type of transaction to log.\n    Returns:\n        A decorator function that logs the transaction after calling the decorated function.\n    \"\"\"\n    def decorator(func):\n        @wraps(func)",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.decorators",
        "documentation": {}
    },
    {
        "label": "AccountError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "peekOfCode": "class AccountError(Exception):\n    \"\"\"\n    Base class for all account-related exceptions.\n    \"\"\"\n    pass\nclass AccountNotFoundError(AccountError):\n    \"\"\"\n    Raised when an account is not found.\n    Attributes:\n        message (str): The error message.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "peekOfCode": "class AccountNotFoundError(AccountError):\n    \"\"\"\n    Raised when an account is not found.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass InsufficientFundsError(AccountError):\n    \"\"\"\n    Raised when an account does not have sufficient funds.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "peekOfCode": "class InsufficientFundsError(AccountError):\n    \"\"\"\n    Raised when an account does not have sufficient funds.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass AccountAlreadyExistsError(AccountError):\n    \"\"\"\n    Raised when an account with the same account number already exists.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountAlreadyExistsError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "peekOfCode": "class AccountAlreadyExistsError(AccountError):\n    \"\"\"\n    Raised when an account with the same account number already exists.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass InvalidInitialBalanceError(AccountError):\n    \"\"\"\n    Raised when the initial balance of an account is invalid.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidInitialBalanceError",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "peekOfCode": "class InvalidInitialBalanceError(AccountError):\n    \"\"\"\n    Raised when the initial balance of an account is invalid.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.exceptions",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.urls",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.urls",
        "peekOfCode": "def route(url: str, *args, **kwargs) -> None:\n    \"\"\"\n        Routes a URL to a view function.\n        Args:\n            url (str): The URL to route.\n            *args: Variable length arguments to pass to the view function.\n            **kwargs: Variable keyword arguments to pass to the view function.\n        Raises:\n            Exception: If the URL is not found.\n        Returns:",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.Utility.urls",
        "documentation": {}
    },
    {
        "label": "BankingSystem",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.interface",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.interface",
        "peekOfCode": "class BankingSystem:\n    \"\"\"\n            A banking system that allows users to create accounts, deposit/credit money,\n            view statements, transfer money, and view transactions.\n            \"\"\"\n    def __init__(self):\n        self.bank = Bank()\n    def main(self) -> None:\n        \"\"\"\n        The main function that runs the banking system.",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.temp.interface",
        "documentation": {}
    },
    {
        "label": "save_accounts_decorator",
        "kind": 2,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.Updates.decorators",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.Updates.decorators",
        "peekOfCode": "def save_accounts_decorator(func):\n    \"\"\"\n    A decorator that saves the accounts after calling the decorated function.\n    Args:\n        func: The function to decorate.\n    Returns:\n        A wrapped function that saves the accounts after calling the decorated function.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.Updates.decorators",
        "documentation": {}
    },
    {
        "label": "log_transaction_decorator",
        "kind": 2,
        "importPath": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.Updates.decorators",
        "description": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.Updates.decorators",
        "peekOfCode": "def log_transaction_decorator(transaction_type):\n    \"\"\"\n    A decorator that logs a transaction after calling the decorated function.\n    Args:\n        transaction_type: The type of transaction to log.\n    Returns:\n        A decorator function that logs the transaction after calling the decorated function.\n    \"\"\"\n    def decorator(func):\n        @wraps(func)",
        "detail": "M-05(May).Week-04.29 May.Prods.Assignments.Bank_Management_System.Updates.decorators",
        "documentation": {}
    },
    {
        "label": "Voters",
        "kind": 6,
        "importPath": "M-05(May).Week-04.29 May.Prods.Class Codes.voting",
        "description": "M-05(May).Week-04.29 May.Prods.Class Codes.voting",
        "peekOfCode": "class Voters:\n    variable = \"Variable\"\n    def __init__(self, name: str, voter_id: int, state: str, district: str) -> None:\n        self.r_id = id(self)\n        self.name = name\n        self.voter_id = voter_id\n        self.state = state\n        self.district = district\n        self.vote = None\n    def __str__(self) -> str:",
        "detail": "M-05(May).Week-04.29 May.Prods.Class Codes.voting",
        "documentation": {}
    },
    {
        "label": "voter1",
        "kind": 5,
        "importPath": "M-05(May).Week-04.29 May.Prods.Class Codes.voting",
        "description": "M-05(May).Week-04.29 May.Prods.Class Codes.voting",
        "peekOfCode": "voter1 = Voters(\"aayush\", 1100673, \"Madhya Pradesh\", \"Ujjain\")\nvoter2 = Voters(\"prankur\", 110000, \"Uttar Pradesh\", \"Ghaziabad\")",
        "detail": "M-05(May).Week-04.29 May.Prods.Class Codes.voting",
        "documentation": {}
    },
    {
        "label": "voter2",
        "kind": 5,
        "importPath": "M-05(May).Week-04.29 May.Prods.Class Codes.voting",
        "description": "M-05(May).Week-04.29 May.Prods.Class Codes.voting",
        "peekOfCode": "voter2 = Voters(\"prankur\", 110000, \"Uttar Pradesh\", \"Ghaziabad\")",
        "detail": "M-05(May).Week-04.29 May.Prods.Class Codes.voting",
        "documentation": {}
    },
    {
        "label": "CelestialObject",
        "kind": 6,
        "importPath": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "description": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "peekOfCode": "class CelestialObject:\n    def __init__(self, name, mass):\n        self.name = name\n        self.mass = mass\n    def describe(self):\n        return f\"{self.name} has a mass of {self.mass} kg.\"\n# Single Inheritance\nclass Star(CelestialObject):\n    def __init__(self, name, mass, spectral_type):\n        super().__init__(name, mass)",
        "detail": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "documentation": {}
    },
    {
        "label": "Star",
        "kind": 6,
        "importPath": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "description": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "peekOfCode": "class Star(CelestialObject):\n    def __init__(self, name, mass, spectral_type):\n        super().__init__(name, mass)\n        self.spectral_type = spectral_type\n    def describe(self):\n        return f\"{super().describe()} It is a {self.spectral_type} type star.\"\n# Multilevel Inheritance\nclass Planet(Star):\n    def __init__(self, name, mass, spectral_type, orbital_period):\n        super().__init__(name, mass, spectral_type)",
        "detail": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "documentation": {}
    },
    {
        "label": "Planet",
        "kind": 6,
        "importPath": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "description": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "peekOfCode": "class Planet(Star):\n    def __init__(self, name, mass, spectral_type, orbital_period):\n        super().__init__(name, mass, spectral_type)\n        self.orbital_period = orbital_period\n    def describe(self):\n        return f\"{super().describe()} It orbits its star every {self.orbital_period} days.\"\n# Hierarchical Inheritance\nclass Moon(CelestialObject):\n    def __init__(self, name, mass, host_planet):\n        super().__init__(name, mass)",
        "detail": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "documentation": {}
    },
    {
        "label": "Moon",
        "kind": 6,
        "importPath": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "description": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "peekOfCode": "class Moon(CelestialObject):\n    def __init__(self, name, mass, host_planet):\n        super().__init__(name, mass)\n        self.host_planet = host_planet\n    def describe(self):\n        return f\"{super().describe()} It orbits the planet {self.host_planet}.\"\n# Multiple Inheritance\nclass SpaceStation:\n    def __init__(self, name, mass, country):\n        self.name = name",
        "detail": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "documentation": {}
    },
    {
        "label": "SpaceStation",
        "kind": 6,
        "importPath": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "description": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "peekOfCode": "class SpaceStation:\n    def __init__(self, name, mass, country):\n        self.name = name\n        self.mass = mass\n        self.country = country\n    def describe(self):\n        return f\"{self.name} is a space station with a mass of {self.mass} kg, operated by {self.country}.\"\nclass OrbitingStation(CelestialObject, SpaceStation):\n    def __init__(self, name, mass, country, orbital_period):\n        CelestialObject.__init__(self, name, mass)",
        "detail": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "documentation": {}
    },
    {
        "label": "OrbitingStation",
        "kind": 6,
        "importPath": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "description": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "peekOfCode": "class OrbitingStation(CelestialObject, SpaceStation):\n    def __init__(self, name, mass, country, orbital_period):\n        CelestialObject.__init__(self, name, mass)\n        SpaceStation.__init__(self, name, mass, country)\n        self.orbital_period = orbital_period\n    def describe(self):\n        return (f\"{CelestialObject.describe(self)} It orbits every {self.orbital_period} days. Operated by \"\n                f\"{self.country}.\")\n# Hybrid Inheritance\nclass Comet(CelestialObject):",
        "detail": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "documentation": {}
    },
    {
        "label": "Comet",
        "kind": 6,
        "importPath": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "description": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "peekOfCode": "class Comet(CelestialObject):\n    def __init__(self, name, mass, orbital_period, tail_length):\n        super().__init__(name, mass)\n        self.orbital_period = orbital_period\n        self.tail_length = tail_length\n    def describe(self):\n        return (f\"{super().describe()} It has an orbital period of {self.orbital_period} days and a tail length of \"\n                f\"{self.tail_length} km.\")\nif __name__ == '__main__':\n    # Creating objects of different classes to demonstrate inheritance",
        "detail": "M-05(May).Week-04.30 May.Prods.Assignments.Inheritance",
        "documentation": {}
    },
    {
        "label": "EmployeeDatabase",
        "kind": 6,
        "importPath": "M-06(June).Week-05.05 June.Prods.Assignment.CRUD_DB",
        "description": "M-06(June).Week-05.05 June.Prods.Assignment.CRUD_DB",
        "peekOfCode": "class EmployeeDatabase:\n    def __init__(self, host=\"localhost\", user=\"root\", password=\"root\", database=\"employee_db\"):\n        self.conn = pymysql.connect(\n            host=host,\n            user=user,\n            password=password\n        )\n        self.cursor = self.conn.cursor()\n        self.create_database()\n        self.conn.select_db(database)",
        "detail": "M-06(June).Week-05.05 June.Prods.Assignment.CRUD_DB",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-06(June).Week-05.05 June.Prods.Assignment.CRUD_DB",
        "description": "M-06(June).Week-05.05 June.Prods.Assignment.CRUD_DB",
        "peekOfCode": "def main():\n    password = input(\"Enter your MySQL password: \")\n    db = EmployeeDatabase(host=\"localhost\", user=\"root\", password=password, database=\"employee_db\")\n    while True:\n        print(\"\\nEmployee Management System\")\n        print(\"1. Add Employee\")\n        print(\"2. View Employees\")\n        print(\"3. Update Employee\")\n        print(\"4. Delete Employee\")\n        print(\"5. Exit\")",
        "detail": "M-06(June).Week-05.05 June.Prods.Assignment.CRUD_DB",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def create_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(\"Account created\")\ndef update_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(f\"Account {account_number} updated\")\ndef deposit(account_number, amount):\n    accounts[account_number]['balance'] += amount\ndef withdraw(account_number, amount):\n    accounts[account_number]['balance'] -= amount",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "update_account",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def update_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(f\"Account {account_number} updated\")\ndef deposit(account_number, amount):\n    accounts[account_number]['balance'] += amount\ndef withdraw(account_number, amount):\n    accounts[account_number]['balance'] -= amount\ndef create_account_ops():\n    account_number = input(\"Enter account number: \")\n    name = input(\"Enter name: \")",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def deposit(account_number, amount):\n    accounts[account_number]['balance'] += amount\ndef withdraw(account_number, amount):\n    accounts[account_number]['balance'] -= amount\ndef create_account_ops():\n    account_number = input(\"Enter account number: \")\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")\n    create_account(account_number, name, balance, account_type)",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def withdraw(account_number, amount):\n    accounts[account_number]['balance'] -= amount\ndef create_account_ops():\n    account_number = input(\"Enter account number: \")\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")\n    create_account(account_number, name, balance, account_type)\ndef update_account_ops(account_number):\n    name = input(\"Enter name: \")",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "create_account_ops",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def create_account_ops():\n    account_number = input(\"Enter account number: \")\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")\n    create_account(account_number, name, balance, account_type)\ndef update_account_ops(account_number):\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "update_account_ops",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def update_account_ops(account_number):\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\ndef deposit_ops(account_number):\n    amount = input(\"Enter amount: \")\n    deposit(account_number, amount)\ndef withdraw_ops(account_number):\n    amount = input(\"Enter amount: \")",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "deposit_ops",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def deposit_ops(account_number):\n    amount = input(\"Enter amount: \")\n    deposit(account_number, amount)\ndef withdraw_ops(account_number):\n    amount = input(\"Enter amount: \")\n    withdraw(account_number, amount)\ndef main():\n    while True:\n        print(\"1. Create account\")\n        print(\"2. Update account\")",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "withdraw_ops",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def withdraw_ops(account_number):\n    amount = input(\"Enter amount: \")\n    withdraw(account_number, amount)\ndef main():\n    while True:\n        print(\"1. Create account\")\n        print(\"2. Update account\")\n        print(\"3. Deposit\")\n        print(\"4. Withdraw\")\n        print(\"5. Exit\")",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def main():\n    while True:\n        print(\"1. Create account\")\n        print(\"2. Update account\")\n        print(\"3. Deposit\")\n        print(\"4. Withdraw\")\n        print(\"5. Exit\")\n        choice = input(\"Enter choice: \")\n        if choice == \"1\":\n            create_account_ops()",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "accounts",
        "kind": 5,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "accounts = {}\ndef create_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(\"Account created\")\ndef update_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(f\"Account {account_number} updated\")\ndef deposit(account_number, amount):\n    accounts[account_number]['balance'] += amount\ndef withdraw(account_number, amount):",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "test_create_account",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "peekOfCode": "def test_create_account():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    assert accounts[\"1234\"] == {\"name\": \"John Doe\", \"balance\": 1000, \"account_type\": \"Savings\"}\n@pytest.mark.account_update\ndef test_update_account():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    update_account(\"1234\", \"Jane Doe\", 2000, \"Checking\")\n    assert accounts[\"1234\"] == {\"name\": \"Jane Doe\", \"balance\": 2000, \"account_type\": \"Checking\"}\n@pytest.mark.transaction\ndef test_deposit():",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "documentation": {}
    },
    {
        "label": "test_update_account",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "peekOfCode": "def test_update_account():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    update_account(\"1234\", \"Jane Doe\", 2000, \"Checking\")\n    assert accounts[\"1234\"] == {\"name\": \"Jane Doe\", \"balance\": 2000, \"account_type\": \"Checking\"}\n@pytest.mark.transaction\ndef test_deposit():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    deposit(\"1234\", 500)\n    assert accounts[\"1234\"][\"balance\"] == 1500\n@pytest.mark.transaction",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "documentation": {}
    },
    {
        "label": "test_deposit",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "peekOfCode": "def test_deposit():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    deposit(\"1234\", 500)\n    assert accounts[\"1234\"][\"balance\"] == 1500\n@pytest.mark.transaction\ndef test_withdraw():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    withdraw(\"1234\", 500)\n    assert accounts[\"1234\"][\"balance\"] == 500\nif __name__ == \"__main__\":",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "documentation": {}
    },
    {
        "label": "test_withdraw",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "peekOfCode": "def test_withdraw():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    withdraw(\"1234\", 500)\n    assert accounts[\"1234\"][\"balance\"] == 500\nif __name__ == \"__main__\":\n    pytest.main([__file__, \"-v\", \"-m\", \"account_creation or account_update or transaction\"])",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.accounts.test_accounts",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "peekOfCode": "def addition(num1: int, num2: int):\n    return num1 + num2\ndef subtraction(num1: int, num2: int):\n    return num1 - num2\ndef multiplication(num1: int, num2: int):\n    return num1 * num2\ndef division(num1: int, num2: int):\n    return num1 / num2\ndef main():\n    while True:",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "documentation": {}
    },
    {
        "label": "subtraction",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "peekOfCode": "def subtraction(num1: int, num2: int):\n    return num1 - num2\ndef multiplication(num1: int, num2: int):\n    return num1 * num2\ndef division(num1: int, num2: int):\n    return num1 / num2\ndef main():\n    while True:\n        print(\"Welcome to the arithmetic calculator!\")\n        num1 = int(input(\"Enter the first number: \"))",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "documentation": {}
    },
    {
        "label": "multiplication",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "peekOfCode": "def multiplication(num1: int, num2: int):\n    return num1 * num2\ndef division(num1: int, num2: int):\n    return num1 / num2\ndef main():\n    while True:\n        print(\"Welcome to the arithmetic calculator!\")\n        num1 = int(input(\"Enter the first number: \"))\n        num2 = int(input(\"Enter the second number: \"))\n        operation = input(\"Enter the operation you want to perform (+, -, *, /): \")",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "documentation": {}
    },
    {
        "label": "division",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "peekOfCode": "def division(num1: int, num2: int):\n    return num1 / num2\ndef main():\n    while True:\n        print(\"Welcome to the arithmetic calculator!\")\n        num1 = int(input(\"Enter the first number: \"))\n        num2 = int(input(\"Enter the second number: \"))\n        operation = input(\"Enter the operation you want to perform (+, -, *, /): \")\n        if operation == '+':\n            print(addition(num1, num2))",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "peekOfCode": "def main():\n    while True:\n        print(\"Welcome to the arithmetic calculator!\")\n        num1 = int(input(\"Enter the first number: \"))\n        num2 = int(input(\"Enter the second number: \"))\n        operation = input(\"Enter the operation you want to perform (+, -, *, /): \")\n        if operation == '+':\n            print(addition(num1, num2))\n        elif operation == '-':\n            print(subtraction(num1, num2))",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.calculator",
        "documentation": {}
    },
    {
        "label": "test_addition",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "peekOfCode": "def test_addition():\n    assert addition(2, 3) == 5\n    assert addition(-2, 3) == 1\n    assert addition(-2, -3) == -5\n    # assert addition(2, -3) == 0\ndef test_subtraction():\n    assert subtraction(5, 3) == 2\n    assert subtraction(-5, 3) == -8\n    assert subtraction(-5, -3) == -2\ndef test_multiplication():",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "documentation": {}
    },
    {
        "label": "test_subtraction",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "peekOfCode": "def test_subtraction():\n    assert subtraction(5, 3) == 2\n    assert subtraction(-5, 3) == -8\n    assert subtraction(-5, -3) == -2\ndef test_multiplication():\n    assert multiplication(2, 3) == 6\n    assert multiplication(-2, 3) == -6\n    assert multiplication(-2, -3) == 6\ndef test_division():\n    assert division(6, 3) == 2",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "documentation": {}
    },
    {
        "label": "test_multiplication",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "peekOfCode": "def test_multiplication():\n    assert multiplication(2, 3) == 6\n    assert multiplication(-2, 3) == -6\n    assert multiplication(-2, -3) == 6\ndef test_division():\n    assert division(6, 3) == 2\n    assert division(-6, 3) == -2\n    assert division(-6, -3) == 2\n    with pytest.raises(ZeroDivisionError):\n        division(6, 0)",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "documentation": {}
    },
    {
        "label": "test_division",
        "kind": 2,
        "importPath": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "description": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "peekOfCode": "def test_division():\n    assert division(6, 3) == 2\n    assert division(-6, 3) == -2\n    assert division(-6, -3) == 2\n    with pytest.raises(ZeroDivisionError):\n        division(6, 0)",
        "detail": "M-06(June).Week-06.10 June.Prods.Class Codes.Calculator.test_arithmetic_calculator",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def create_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(\"Account created\")\ndef update_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(f\"Account {account_number} updated\")\ndef deposit(account_number, amount):\n    accounts[account_number]['balance'] += amount\ndef withdraw(account_number, amount):\n    accounts[account_number]['balance'] -= amount",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "update_account",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def update_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(f\"Account {account_number} updated\")\ndef deposit(account_number, amount):\n    accounts[account_number]['balance'] += amount\ndef withdraw(account_number, amount):\n    accounts[account_number]['balance'] -= amount\ndef create_account_ops():\n    account_number = input(\"Enter account number: \")\n    name = input(\"Enter name: \")",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def deposit(account_number, amount):\n    accounts[account_number]['balance'] += amount\ndef withdraw(account_number, amount):\n    accounts[account_number]['balance'] -= amount\ndef create_account_ops():\n    account_number = input(\"Enter account number: \")\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")\n    create_account(account_number, name, balance, account_type)",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def withdraw(account_number, amount):\n    accounts[account_number]['balance'] -= amount\ndef create_account_ops():\n    account_number = input(\"Enter account number: \")\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")\n    create_account(account_number, name, balance, account_type)\ndef update_account_ops(account_number):\n    name = input(\"Enter name: \")",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "create_account_ops",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def create_account_ops():\n    account_number = input(\"Enter account number: \")\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")\n    create_account(account_number, name, balance, account_type)\ndef update_account_ops(account_number):\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "update_account_ops",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def update_account_ops(account_number):\n    name = input(\"Enter name: \")\n    balance = input(\"Enter balance: \")\n    account_type = input(\"Enter account type: \")\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\ndef deposit_ops(account_number):\n    amount = input(\"Enter amount: \")\n    deposit(account_number, amount)\ndef withdraw_ops(account_number):\n    amount = input(\"Enter amount: \")",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "deposit_ops",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def deposit_ops(account_number):\n    amount = input(\"Enter amount: \")\n    deposit(account_number, amount)\ndef withdraw_ops(account_number):\n    amount = input(\"Enter amount: \")\n    withdraw(account_number, amount)\ndef main():\n    while True:\n        print(\"1. Create account\")\n        print(\"2. Update account\")",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "withdraw_ops",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def withdraw_ops(account_number):\n    amount = input(\"Enter amount: \")\n    withdraw(account_number, amount)\ndef main():\n    while True:\n        print(\"1. Create account\")\n        print(\"2. Update account\")\n        print(\"3. Deposit\")\n        print(\"4. Withdraw\")\n        print(\"5. Exit\")",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "def main():\n    while True:\n        print(\"1. Create account\")\n        print(\"2. Update account\")\n        print(\"3. Deposit\")\n        print(\"4. Withdraw\")\n        print(\"5. Exit\")\n        choice = input(\"Enter choice: \")\n        if choice == \"1\":\n            create_account_ops()",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "accounts",
        "kind": 5,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "peekOfCode": "accounts = {}\ndef create_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(\"Account created\")\ndef update_account(account_number, name, balance, account_type):\n    accounts[account_number] = {'name': name, 'balance': balance, 'account_type': account_type}\n    print(f\"Account {account_number} updated\")\ndef deposit(account_number, amount):\n    accounts[account_number]['balance'] += amount\ndef withdraw(account_number, amount):",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.accounts_ops",
        "documentation": {}
    },
    {
        "label": "test_version_account",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "peekOfCode": "def test_version_account():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    assert accounts[\"1234\"] == {\"name\": \"John Doe\", \"balance\": 1000, \"account_type\": \"Savings\"}\n@pytest.mark.account\ndef test_create_account():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    assert accounts[\"1234\"] == {\"name\": \"John Doe\", \"balance\": 1000, \"account_type\": \"Savings\"}\n@pytest.mark.account\ndef test_update_account():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "documentation": {}
    },
    {
        "label": "test_create_account",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "peekOfCode": "def test_create_account():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    assert accounts[\"1234\"] == {\"name\": \"John Doe\", \"balance\": 1000, \"account_type\": \"Savings\"}\n@pytest.mark.account\ndef test_update_account():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    update_account(\"1234\", \"Jane Doe\", 2000, \"Checking\")\n    assert accounts[\"1234\"] == {\"name\": \"Jane Doe\", \"balance\": 2000, \"account_type\": \"Checking\"}\n@pytest.mark.transaction\ndef test_deposit():",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "documentation": {}
    },
    {
        "label": "test_update_account",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "peekOfCode": "def test_update_account():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    update_account(\"1234\", \"Jane Doe\", 2000, \"Checking\")\n    assert accounts[\"1234\"] == {\"name\": \"Jane Doe\", \"balance\": 2000, \"account_type\": \"Checking\"}\n@pytest.mark.transaction\ndef test_deposit():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    deposit(\"1234\", 500)\n    assert accounts[\"1234\"][\"balance\"] == 1500\n@pytest.mark.transaction",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "documentation": {}
    },
    {
        "label": "test_deposit",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "peekOfCode": "def test_deposit():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    deposit(\"1234\", 500)\n    assert accounts[\"1234\"][\"balance\"] == 1500\n@pytest.mark.transaction\ndef test_withdraw():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    withdraw(\"1234\", 500)\n    assert accounts[\"1234\"][\"balance\"] == 500\nif __name__ == \"__main__\":",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "documentation": {}
    },
    {
        "label": "test_withdraw",
        "kind": 2,
        "importPath": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "description": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "peekOfCode": "def test_withdraw():\n    create_account(\"1234\", \"John Doe\", 1000, \"Savings\")\n    withdraw(\"1234\", 500)\n    assert accounts[\"1234\"][\"balance\"] == 500\nif __name__ == \"__main__\":\n    pytest.main([__file__, \"-v\", \"-m\", \"account_creation or account_update or transaction\"])",
        "detail": "M-06(June).Week-06.11 June.Prods.Class Codes.accounts.test_accounts",
        "documentation": {}
    },
    {
        "label": "Demo",
        "kind": 6,
        "importPath": "M-06(June).Week-06.13 June.Prods.Class Code.Destructor",
        "description": "M-06(June).Week-06.13 June.Prods.Class Code.Destructor",
        "peekOfCode": "class Demo:\n    def __init__(self, value):\n        self.value = value\n    def __del__(self):\n        print(f\"Object {self.value} is deleted\")\nif __name__ == '__main__':\n    obj1 = Demo(1)\n    obj2 = Demo(2)\n    obj3 = Demo(3)\n    del obj1",
        "detail": "M-06(June).Week-06.13 June.Prods.Class Code.Destructor",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "description": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "peekOfCode": "y = 42\nz = 42\nx = 42\nprint(id(x))\nprint(id(y))\nprint(id(z))\nref_count = sys.getrefcount(id(x))\nprint(\"Reference count of x:\", ref_count)",
        "detail": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "description": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "peekOfCode": "z = 42\nx = 42\nprint(id(x))\nprint(id(y))\nprint(id(z))\nref_count = sys.getrefcount(id(x))\nprint(\"Reference count of x:\", ref_count)",
        "detail": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "description": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "peekOfCode": "x = 42\nprint(id(x))\nprint(id(y))\nprint(id(z))\nref_count = sys.getrefcount(id(x))\nprint(\"Reference count of x:\", ref_count)",
        "detail": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "documentation": {}
    },
    {
        "label": "ref_count",
        "kind": 5,
        "importPath": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "description": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "peekOfCode": "ref_count = sys.getrefcount(id(x))\nprint(\"Reference count of x:\", ref_count)",
        "detail": "M-06(June).Week-06.13 June.Prods.Class Code.Reference",
        "documentation": {}
    },
    {
        "label": "input_emp_data",
        "kind": 2,
        "importPath": "M-06(June).Week-08.28 June.Prods.employee_demo",
        "description": "M-06(June).Week-08.28 June.Prods.employee_demo",
        "peekOfCode": "def input_emp_data():\n    emp_data = {}\n    emp_data['id'] = input(\"Enter employee ID: \")\n    emp_data['name'] = input(\"Enter employee name: \")\n    emp_data['department'] = input(\"Enter employee department: \")\n    emp_data['salary'] = float(input(\"Enter employee salary: \"))\n    return emp_data\ndef sort_by_salary():\n    sorted_emp_data = sorted(EMPLOYEE, key=lambda x: x['salary'], reverse=True)\n    return sorted_emp_data",
        "detail": "M-06(June).Week-08.28 June.Prods.employee_demo",
        "documentation": {}
    },
    {
        "label": "sort_by_salary",
        "kind": 2,
        "importPath": "M-06(June).Week-08.28 June.Prods.employee_demo",
        "description": "M-06(June).Week-08.28 June.Prods.employee_demo",
        "peekOfCode": "def sort_by_salary():\n    sorted_emp_data = sorted(EMPLOYEE, key=lambda x: x['salary'], reverse=True)\n    return sorted_emp_data\nif __name__ == '__main__':\n    number_of_employees = int(input(\"Enter the number of employees: \"))\n    for i in range(int(number_of_employees)):\n        EMPLOYEE.append(input_emp_data())\n    print(sort_by_salary())",
        "detail": "M-06(June).Week-08.28 June.Prods.employee_demo",
        "documentation": {}
    },
    {
        "label": "EMPLOYEE",
        "kind": 5,
        "importPath": "M-06(June).Week-08.28 June.Prods.employee_demo",
        "description": "M-06(June).Week-08.28 June.Prods.employee_demo",
        "peekOfCode": "EMPLOYEE = []\ndef input_emp_data():\n    emp_data = {}\n    emp_data['id'] = input(\"Enter employee ID: \")\n    emp_data['name'] = input(\"Enter employee name: \")\n    emp_data['department'] = input(\"Enter employee department: \")\n    emp_data['salary'] = float(input(\"Enter employee salary: \"))\n    return emp_data\ndef sort_by_salary():\n    sorted_emp_data = sorted(EMPLOYEE, key=lambda x: x['salary'], reverse=True)",
        "detail": "M-06(June).Week-08.28 June.Prods.employee_demo",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "kind": 2,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "peekOfCode": "def data_structuring():\n    data = []\n    # Open the CSV file for reading\n    #\n    #\n    # Insert your own relative path from Titanic_CSV\n    #\n    #\n    with open('/home/user/Python_Training/Week-09/05 July/Prods/Assignment/Project_Titanic_Analysis/Titanic_CSV/titanic3.csv', 'r') as file:\n        read = csv.reader(file)",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "dtype",
        "kind": 5,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "peekOfCode": "dtype = np.dtype([\n    ('pclass', int),  # Passenger class\n    ('survived', int),  # Survival (0 = No, 1 = Yes)\n    ('name', 'U50'),  # Passenger name\n    ('sex', 'U10'),  # Passenger sex\n    ('age', float),  # Passenger age\n    ('sibsp', int),  # Number of siblings/spouses aboard\n    ('parch', int),  # Number of parents/children aboard\n    ('ticket', 'U20'),  # Ticket number\n    ('fare', float),  # Passenger fare",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "Additional_Controller",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.additional_controller",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.additional_controller",
        "peekOfCode": "class Additional_Controller:\n    @staticmethod\n    def family_relationships_and_survival(arr: np.ndarray) -> Dict[int, float]:\n        \"\"\"\n        Calculate survival rates based on family relationships (sibsp + parch + 1).\n        \"\"\"\n        family_sizes = arr['sibsp'] + arr['parch'] + 1  # Calculate family sizes for each passenger\n        unique_sizes = np.unique(family_sizes)  # Unique family sizes\n        family_survival: Dict[int, float] = {}\n        for size in unique_sizes:",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.additional_controller",
        "documentation": {}
    },
    {
        "label": "Class_Controller",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.class_controller",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.class_controller",
        "peekOfCode": "class Class_Controller:\n    @staticmethod\n    def passenger_demographics_by_class(arr: np.ndarray) -> Dict[int, Dict[str, Dict[Any, Any] | float]]:\n        \"\"\"\n        Calculate passenger demographics (mean age and sex counts) by passenger class.\n        \"\"\"\n        class_demographics = {}\n        for pclass in np.unique(arr['pclass']):  # Iterate over unique passenger classes\n            mask = arr['pclass'] == pclass  # Mask for passengers in the current class\n            mean_age = np.mean(arr['age'][mask])  # Calculate mean age for this class",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.class_controller",
        "documentation": {}
    },
    {
        "label": "Demographic_Controller",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.demographic_controller",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.demographic_controller",
        "peekOfCode": "class Demographic_Controller:\n    @staticmethod\n    def passenger_count_by_class(arr: np.ndarray) -> Dict[int, int]:\n        \"\"\"\n        Calculate the count of passengers by passenger class.\n        \"\"\"\n        class_counts = np.bincount(arr['pclass'])  # Count occurrences of each passenger class\n        passenger_count_by_class: Dict[int, int] = {}\n        for pclass in np.unique(arr['pclass']):\n            passenger_count_by_class[int(pclass)] = int(class_counts[pclass])",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.demographic_controller",
        "documentation": {}
    },
    {
        "label": "Financial_Controller",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.financial_controller",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.financial_controller",
        "peekOfCode": "class Financial_Controller:\n    @staticmethod\n    def ticket_fare_distribution(arr: np.ndarray) -> None:\n        \"\"\"\n        Plot a histogram showing the distribution of ticket fares.\n        \"\"\"\n        plt.hist(arr['fare'], bins=20, edgecolor='black')  # Plot histogram of ticket fares\n        plt.xlabel('Fare')\n        plt.ylabel('Frequency')\n        plt.title('Ticket Fare Distribution')",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.financial_controller",
        "documentation": {}
    },
    {
        "label": "C_Survival",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Survival:\n    \"\"\"\n    Controller for handling survival-related analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available survival analyses.\"\"\"\n        print(\"\\nSurvival Analysis:\")",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Demographic",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Demographic:\n    \"\"\"\n    Controller for handling demographic-related analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available demographic analyses.\"\"\"\n        print(\"\\nDemographic Analysis:\")",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Financial",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Financial:\n    \"\"\"\n    Controller for handling financial-related analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available financial analyses.\"\"\"\n        print(\"\\nFinancial Analysis:\")",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Class",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Class:\n    \"\"\"\n    Controller for handling class-related analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available class-related analyses.\"\"\"\n        print(\"\\nClass Analysis:\")",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Additional",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Additional:\n    \"\"\"\n    Controller for handling additional analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available additional analyses.\"\"\"\n        print(\"\\nAdditional Analysis:\")",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "kind": 2,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "def data_structuring():\n    data = []\n    # Open the CSV file for reading\n    #\n    #\n    # Insert your own relative path from Titanic_CSV\n    #\n    #\n    with open('/home/user/Python_Training/Week-09/05 July/Prods/Assignment/Project_Titanic_Analysis/Titanic_CSV/titanic3.csv', 'r') as file:\n        read = csv.reader(file)",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "controller_route",
        "kind": 2,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "def controller_route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    \"\"\"\n    # try:\n    view: Optional[Callable[..., Any]] = urlpatterns_controller.get(url)\n    if view:\n        return view(url, *args, **kwargs)\n    raise Exception(\"404 Not Found\\n\")\n    # except Exception as e:",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "dtype",
        "kind": 5,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "dtype = np.dtype([\n    ('pclass', int),  # Passenger class\n    ('survived', int),  # Survival (0 = No, 1 = Yes)\n    ('name', 'U50'),  # Passenger name\n    ('sex', 'U10'),  # Passenger sex\n    ('age', float),  # Passenger age\n    ('sibsp', int),  # Number of siblings/spouses aboard\n    ('parch', int),  # Number of parents/children aboard\n    ('ticket', 'U20'),  # Ticket number\n    ('fare', float),  # Passenger fare",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "Survival_Controller",
        "kind": 6,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.survival_controller",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.survival_controller",
        "peekOfCode": "class Survival_Controller:\n    @staticmethod\n    def overall_survival_rate(arr: np.ndarray) -> float:\n        \"\"\"\n        Calculate the overall survival rate of passengers.\n        \"\"\"\n        survived_count = np.sum(arr['survived'])  # Count of passengers who survived (survived = 1)\n        total_passengers = len(arr)  # Total number of passengers\n        survival_rate = (survived_count / total_passengers) * 100  # Calculate survival rate as a percentage\n        return float(survival_rate)  # Return the survival rate as a float",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.survival_controller",
        "documentation": {}
    },
    {
        "label": "titanic_logger",
        "kind": 2,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Decorators.log_generator",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Decorators.log_generator",
        "peekOfCode": "def titanic_logger(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator to log function calls with arguments, results, and nested function calls.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        logger.debug(f'Calling the {func.__name__} with args {args} and kwargs {kwargs}')\n        try:\n            result: Any = func(*args, **kwargs)\n            logger.debug(f'{func.__name__} returned {result}')",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Decorators.log_generator",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_routes.url",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_routes.url",
        "peekOfCode": "def route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    Args:\n        url (str): The URL to route.\n        *args: Variable length arguments to pass to the view function.\n        **kwargs: Variable keyword arguments to pass to the view function.\n    Raises:\n        Exception: If the URL is not found.\n    Returns:",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_routes.url",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.interface",
        "description": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.interface",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function to provide a menu-driven interface for Titanic dataset analysis.\n    \"\"\"\n    while True:\n        print(\"\\nTitanic Dataset Analysis Menu:\")\n        print(\"/survival for survival analysis\")\n        print(\"/demographic for demographic analysis\")\n        print(\"/finance for financial analysis\")\n        print(\"/class for class-based analysis\")",
        "detail": "M-07(July).Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.interface",
        "documentation": {}
    },
    {
        "label": "AnalysisController",
        "kind": 6,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Controller.analysis_controller",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Controller.analysis_controller",
        "peekOfCode": "class AnalysisController:\n    def __init__(self):\n        self.data_loader = DataLoader()\n        self.data_processor = DataProcessor()\n        self.plot_utils = PlotUtils()\n    @logger_analysis\n    def perform_descriptive_analysis(self):\n        \"\"\"\n        Performs descriptive analysis on loaded data.\n        \"\"\"",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "kind": 2,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Logger_Analysis",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Logger_Analysis",
        "peekOfCode": "def logger_analysis(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator to log function calls with arguments, results, and nested function calls.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        logger.debug(f'Calling the {func.__name__} with args {args} and kwargs {kwargs}')\n        try:\n            result: Any = func(*args, **kwargs)\n            logger.debug(f'{func.__name__} returned {result}')",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "create_db",
        "kind": 2,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def create_db():\n    \"\"\"\n    Creates the database if it does not exist.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root'\n    )\n    try:",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Establishes and returns a connection to the MySQL database.\n    :return: Connection object to the MySQL database.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root',\n        database='analysis_login',",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def initialize_db():\n    \"\"\"\n    Initializes the database by creating the necessary tables if they do not exist.\n    \"\"\"\n    create_db()  # Create the database first\n    connection = get_db_connection()\n    try:\n        with connection.cursor() as cursor:\n            # Create accounts table\n            cursor.execute(\"\"\"",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "kind": 2,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def analysis_login_system(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator that checks if the user is logged in before calling the decorated function.\n    Args:\n        func: The function to decorate.\n    Returns: the main function to execute the code\n    \"\"\"\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        choice = input(\"Do you want to sign-in or signup or exit: \")\n        while True:",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "kind": 6,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Models.data_loader",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Models.data_loader",
        "peekOfCode": "class DataLoader:\n    def __init__(self, file_path='Data/fitness_tracker_dataset.csv'):\n        self.file_path = file_path\n    @logger_analysis\n    def load_data(self):\n        try:\n            # Get the number of rows in the file\n            with open(self.file_path, 'r') as f:\n                total_rows = sum(1 for line in f) - 1  # Subtract 1 for header\n            # Load CSV into pandas DataFrame with progress bar",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "kind": 6,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Models.data_processor",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Models.data_processor",
        "peekOfCode": "class DataProcessor:\n    def __init__(self):\n        self.plot_utils = PlotUtils()\n        self.data_utils = DataUtils()\n        self.steps_model = None\n        self.hr_model = None\n        self.mood_model = None\n        self.label_encoders = {}\n    @logger_analysis\n    def load_data(self):",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Models.data_processor",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Routes.analysis_url",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Routes.analysis_url",
        "peekOfCode": "def route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    Args:\n        url (str): The URL to route.\n        *args: Variable length arguments to pass to the view function.\n        **kwargs: Variable keyword arguments to pass to the view function.\n    Raises:\n        Exception: If the URL is not found.\n    Returns:",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "DataUtils",
        "kind": 6,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Utils.data_utils",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Utils.data_utils",
        "peekOfCode": "class DataUtils:\n    def __init__(self):\n        pass\n    @logger_analysis\n    def preprocess_data(self, data):\n        # Example: Data preprocessing steps\n        # Convert date column to datetime format\n        data['date'] = pd.to_datetime(data['date'])\n        # Handle missing values (if any)\n        data.fillna(0, inplace=True)  # Replace NaN with 0 (this is a simplistic example)",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "PlotUtils",
        "kind": 6,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.Utils.plot_utils",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.Utils.plot_utils",
        "peekOfCode": "class PlotUtils:\n    def __init__(self):\n        # Optionally, you can initialize settings for plotting here\n        pass\n    @logger_analysis\n    def plot_histogram(self, data, column):\n        plt.figure(figsize=(8, 6))\n        sns.histplot(data[column], kde=True)\n        plt.title(f'Histogram of {column}')\n        plt.xlabel(column)",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "Interface",
        "kind": 6,
        "importPath": "M-07(July).Week-10.11 July.Project_Analysis.main_interface",
        "description": "M-07(July).Week-10.11 July.Project_Analysis.main_interface",
        "peekOfCode": "class Interface:\n    def __init__(self):\n        self.controller = AnalysisController()\n    @logger_analysis\n    def display_menu(self):\n        print(\"\\nWelcome to Data Analysis Application\")\n        print(\"===================================\")\n        print(\"/descriptive for descriptive analysis\")\n        print(\"/comparative for comparative analysis\")\n        print(\"/temporal for temporal analysis\")",
        "detail": "M-07(July).Week-10.11 July.Project_Analysis.main_interface",
        "documentation": {}
    },
    {
        "label": "DataProcessorController",
        "kind": 6,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Controller.analysis_controller",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Controller.analysis_controller",
        "peekOfCode": "class DataProcessorController:\n    def __init__(self):\n        self.data = None\n        self.model = None\n    @analysis_logger\n    def perform_basic_grouping(self):\n        self.data = DataLoader().load_data()\n        self.model = DataProcessor(self.data)\n        print(\"Performing basic grouping operations...\\n\")\n        grouped_data = self.model.group_by_skill()",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "show_data",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Controller.group_viewer",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Controller.group_viewer",
        "peekOfCode": "def show_data(grouped_data: pd.DataFrame, type_name: str, columns: list[str]=[]) -> None:\n    print(f\"Showing Data Grouped by {type_name}: .... \")\n    print(grouped_data.head().set_index('S.No')[columns])",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Controller.group_viewer",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Logger_Analysis",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Logger_Analysis",
        "peekOfCode": "def analysis_logger(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator to log function calls with arguments, results, and nested function calls.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        logger.debug(f'Calling the {func.__name__} with args {args} and kwargs {kwargs}')\n        try:\n            result: Any = func(*args, **kwargs)\n            logger.debug(f'{func.__name__} returned {result}')",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "create_db",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def create_db():\n    \"\"\"\n    Creates the database if it does not exist.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root'\n    )\n    try:",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Establishes and returns a connection to the MySQL database.\n    :return: Connection object to the MySQL database.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root',\n        database='analysis_login',",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def initialize_db():\n    \"\"\"\n    Initializes the database by creating the necessary tables if they do not exist.\n    \"\"\"\n    create_db()  # Create the database first\n    connection = get_db_connection()\n    try:\n        with connection.cursor() as cursor:\n            # Create accounts table\n            cursor.execute(\"\"\"",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def analysis_login_system(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator that checks if the user is logged in before calling the decorated function.\n    Args:\n        func: The function to decorate.\n    Returns: the main function to execute the code\n    \"\"\"\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        choice = input(\"Do you want to sign-in or signup or exit: \")\n        while True:",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "kind": 6,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Models.data_loader",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Models.data_loader",
        "peekOfCode": "class DataLoader:\n    def __init__(self, file_path='Data/cleaned_data.csv'):\n        self.file_path = file_path\n    # @analysis_logger\n    def load_data(self):\n        try:\n            # Get the number of rows in the file\n            with open(self.file_path, 'r') as f:\n                total_rows = sum(1 for line in f) - 1  # Subtract 1 for header\n            # Load CSV into pandas DataFrame with progress bar",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "kind": 6,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Models.data_processor",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Models.data_processor",
        "peekOfCode": "class DataProcessor:\n    def __init__(self, df):\n        self.df = df\n        self.reports_path = 'Reports/'\n    @analysis_logger\n    def save_plot(self, plot_func: Callable, plot_name: str) -> None:\n        if input(f\"Do you want to save the plot '{plot_name}'? (y/n): \").lower() == 'y':\n            plot_dir = os.path.join(self.reports_path, 'Visualizations')\n            os.makedirs(plot_dir, exist_ok=True)\n            plot_path = os.path.join(plot_dir, f\"{plot_name}.png\")",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Models.data_processor",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Routes.analysis_url",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Routes.analysis_url",
        "peekOfCode": "def route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    Args:\n        url (str): The URL to route.\n        *args: Variable length arguments to pass to the view function.\n        **kwargs: Variable keyword arguments to pass to the view function.\n    Raises:\n        Exception: If the URL is not found.\n    Returns:",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "clean_data",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "peekOfCode": "def clean_data(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Cleans the input DataFrame by handling missing values, removing duplicates,\n    standardizing column formats, cleaning skills, and generating random scores.\n    Args:\n        df (pd.DataFrame): The DataFrame to clean.\n    Returns:\n        pd.DataFrame: The cleaned DataFrame.\n    \"\"\"\n    # Remove duplicates",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "generate_random_scores",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "peekOfCode": "def generate_random_scores(df: pd.DataFrame, score_columns: list = ['pre_assessment_score', 'final_score']) -> pd.DataFrame:\n    \"\"\"\n    Generates random scores for specified columns in the DataFrame.\n    Args:\n        df (pd.DataFrame): The DataFrame to update.\n        score_columns (list): List of column names for which to generate random scores.\n    Returns:\n        pd.DataFrame: The updated DataFrame with random scores.\n    \"\"\"\n    for column in score_columns:",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_competency",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_competency(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.explode('current_skills').groupby('current_skills')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x=grouped.values, y=grouped.index, palette=\"viridis\")\n    plt.xlabel('Count')\n    plt.ylabel('Current Skills')\n    plt.title('Count of Associates by Competency')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_competency.png'))",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_grade",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_grade(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.groupby('grade')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=grouped.index, y=grouped.values, palette=\"viridis\")\n    plt.xlabel('Grade')\n    plt.ylabel('Count')\n    plt.title('Count of Associates by Grade')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_grade.png'))",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_training_status",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_training_status(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.groupby('training_status')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=grouped.index, y=grouped.values, palette=\"viridis\")\n    plt.xlabel('Training Status')\n    plt.ylabel('Count')\n    plt.title('Count of Associates by Training Status')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_training_status.png'))",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_training_type",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_training_type(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.groupby('training_type')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=grouped.index, y=grouped.values, palette=\"viridis\")\n    plt.xlabel('Training Type')\n    plt.ylabel('Count')\n    plt.title('Count of Associates by Training Type')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_training_type.png'))",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_upgraded_skills",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_upgraded_skills(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.explode('upgraded_skills').groupby('upgraded_skills')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x=grouped.values, y=grouped.index, palette=\"viridis\")\n    plt.xlabel('Count')\n    plt.ylabel('Upgraded Skills')\n    plt.title('Count of Associates by Upgraded Skills')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_upgraded_skills.png'))",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_training_record_by_status",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_training_record_by_status(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.groupby('status')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=grouped.index, y=grouped.values, palette=\"viridis\")\n    plt.xlabel('Training Record Status')\n    plt.ylabel('Count')\n    plt.title('Training Record Count by Status')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'training_record_by_status.png'))",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_top_performers_by_score",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_top_performers_by_score(df: pd.DataFrame, score_column: str = 'final_score', save: bool = False) -> None:\n    top_performers = df.sort_values(by=score_column, ascending=False).head(10)\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x=top_performers[score_column], y=top_performers['name'], palette=\"viridis\")\n    plt.xlabel('Score')\n    plt.ylabel('Name')\n    plt.title(f'Top 10 Performers by {score_column.replace(\"_\", \" \").title()}')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, f'top_performers_by_{score_column}.png'))",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "visualization_dir",
        "kind": 5,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "visualization_dir = 'Reports/Visualizations/'\n# Ensure the directory exists\nos.makedirs(visualization_dir, exist_ok=True)\n@analysis_logger\ndef plot_group_by_competency(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.explode('current_skills').groupby('current_skills')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x=grouped.values, y=grouped.index, palette=\"viridis\")\n    plt.xlabel('Count')\n    plt.ylabel('Current Skills')",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.main_interface",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.main_interface",
        "peekOfCode": "def menu():\n    print(\"\\nMenu:\")\n    print(\"/grouping for data grouping\")\n    print(\"/adv_grouping for advanced grouping operations\")\n    print(\"/general_report for generating general reports\")\n    print(\"/generate_specific_reports for generating spefic reports\")\n    print(\"/generate_growth_reports for growth reports\")\n    print(\"/exit, /faux, /out, /no to exit the program\")\n@analysis_login_system\n@analysis_logger",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.main_interface",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-07(July).Week-11.15 July.Prods.Training_Analysis.main_interface",
        "description": "M-07(July).Week-11.15 July.Prods.Training_Analysis.main_interface",
        "peekOfCode": "def main():\n    while True:\n        menu()\n        choice = input(\"Enter your choice with /: \")\n        if choice.strip().lower() in [\"exit\", \"out\", \"no\", \"faux\"]:\n            break\n        elif choice.strip().lower() == \"/generate_specific_reports\":\n            status = input(\"Enter status (or leave blank): \")\n            score_column = input(\"Enter score column (or leave blank): \")\n            skill = input(\"Enter skill (or leave blank): \")",
        "detail": "M-07(July).Week-11.15 July.Prods.Training_Analysis.main_interface",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "description": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "M-07(July).Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "url_patterns",
        "kind": 5,
        "importPath": "M-08(August).Week-14.05 August.Assignment.Ecommerce.Routes.ecomm_urls",
        "description": "M-08(August).Week-14.05 August.Assignment.Ecommerce.Routes.ecomm_urls",
        "peekOfCode": "url_patterns = {\n}",
        "detail": "M-08(August).Week-14.05 August.Assignment.Ecommerce.Routes.ecomm_urls",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "M-08(August).Week-14.05 August.Assignment.Ecommerce.View.ecomm_interface",
        "description": "M-08(August).Week-14.05 August.Assignment.Ecommerce.View.ecomm_interface",
        "peekOfCode": "def menu():\n    pass\ndef get_choice():\n    url_choice = input(\"Enter the url you want to go to including /: \")\n    if url_choice.strip().lower() in ['exit', 'n', 'no']:\n        print(\"Exiting...\")\n        return False\n    else:\n        route(url_choice)\n        return True",
        "detail": "M-08(August).Week-14.05 August.Assignment.Ecommerce.View.ecomm_interface",
        "documentation": {}
    },
    {
        "label": "get_choice",
        "kind": 2,
        "importPath": "M-08(August).Week-14.05 August.Assignment.Ecommerce.View.ecomm_interface",
        "description": "M-08(August).Week-14.05 August.Assignment.Ecommerce.View.ecomm_interface",
        "peekOfCode": "def get_choice():\n    url_choice = input(\"Enter the url you want to go to including /: \")\n    if url_choice.strip().lower() in ['exit', 'n', 'no']:\n        print(\"Exiting...\")\n        return False\n    else:\n        route(url_choice)\n        return True\ndef main():\n    flag = True",
        "detail": "M-08(August).Week-14.05 August.Assignment.Ecommerce.View.ecomm_interface",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "M-08(August).Week-14.05 August.Assignment.Ecommerce.View.ecomm_interface",
        "description": "M-08(August).Week-14.05 August.Assignment.Ecommerce.View.ecomm_interface",
        "peekOfCode": "def main():\n    flag = True\n    menu()\n    while flag:\n        flag = get_choice()",
        "detail": "M-08(August).Week-14.05 August.Assignment.Ecommerce.View.ecomm_interface",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "Projects.Experimentals.Bank_Management_System.routes.urls",
        "description": "Projects.Experimentals.Bank_Management_System.routes.urls",
        "peekOfCode": "def route(url: str, *args, **kwargs) -> None | Callable:\n    \"\"\"\n        Routes a URL to a view function.\n        Args:\n            url (str): The URL to route.\n            *args: Variable length arguments to pass to the view function.\n            **kwargs: Variable keyword arguments to pass to the view function.\n        Raises:\n            Exception: If the URL is not found.\n        Returns:",
        "detail": "Projects.Experimentals.Bank_Management_System.routes.urls",
        "documentation": {}
    },
    {
        "label": "AccountError",
        "kind": 6,
        "importPath": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "description": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "peekOfCode": "class AccountError(Exception):\n    \"\"\"\n    Base class for all account-related exceptions.\n    \"\"\"\n    pass\nclass AccountNotFoundError(AccountError):\n    \"\"\"\n    Raised when an account is not found.\n    Attributes:\n        message (str): The error message.",
        "detail": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundError",
        "kind": 6,
        "importPath": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "description": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "peekOfCode": "class AccountNotFoundError(AccountError):\n    \"\"\"\n    Raised when an account is not found.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass InsufficientFundsError(AccountError):\n    \"\"\"\n    Raised when an account does not have sufficient funds.",
        "detail": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "kind": 6,
        "importPath": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "description": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "peekOfCode": "class InsufficientFundsError(AccountError):\n    \"\"\"\n    Raised when an account does not have sufficient funds.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass AccountAlreadyExistsError(AccountError):\n    \"\"\"\n    Raised when an account with the same account number already exists.",
        "detail": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountAlreadyExistsError",
        "kind": 6,
        "importPath": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "description": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "peekOfCode": "class AccountAlreadyExistsError(AccountError):\n    \"\"\"\n    Raised when an account with the same account number already exists.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass InvalidInitialBalanceError(AccountError):\n    \"\"\"\n    Raised when the initial balance of an account is invalid.",
        "detail": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidInitialBalanceError",
        "kind": 6,
        "importPath": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "description": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "peekOfCode": "class InvalidInitialBalanceError(AccountError):\n    \"\"\"\n    Raised when the initial balance of an account is invalid.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass",
        "detail": "Projects.Experimentals.Bank_Management_System.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "Projects.Experimentals.Bank_Management_System.account",
        "description": "Projects.Experimentals.Bank_Management_System.account",
        "peekOfCode": "class Account:\n    \"\"\"\n    Represents a bank account.\n    Attributes:\n        account_number (str): The account number.\n        name (str): The account holder's name.\n        ifsc_code (str): The IFSC code of the branch.\n        branch_name (str): The name of the branch.\n        state (str): The state where the branch is located.\n        district (str): The district where the branch is located.",
        "detail": "Projects.Experimentals.Bank_Management_System.account",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "Projects.Experimentals.Bank_Management_System.bank",
        "description": "Projects.Experimentals.Bank_Management_System.bank",
        "peekOfCode": "class Bank:\n    \"\"\"\n            A class that provides a static interface to the `Transactions` class for managing bank accounts.\n            Args:\n                None\n            \"\"\"\n    @staticmethod\n    def create_account(account_number: str, name: str, ifsc_code: str, branch_name: str, state: str, district: str,\n                       country: str, account_type: str, initial_balance: float = 0) -> None:\n        \"\"\"",
        "detail": "Projects.Experimentals.Bank_Management_System.bank",
        "documentation": {}
    },
    {
        "label": "BankingSystem",
        "kind": 6,
        "importPath": "Projects.Experimentals.Bank_Management_System.interface",
        "description": "Projects.Experimentals.Bank_Management_System.interface",
        "peekOfCode": "class BankingSystem:\n    \"\"\"\n            A banking system that allows users to create accounts, deposit/credit money,\n            view statements, transfer money, and view transactions.\n            \"\"\"\n    @staticmethod\n    def main() -> None:\n        \"\"\"\n        The main function that runs the banking system.\n        \"\"\"",
        "detail": "Projects.Experimentals.Bank_Management_System.interface",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "Projects.Experimentals.Shopping Cart.Shopping",
        "description": "Projects.Experimentals.Shopping Cart.Shopping",
        "peekOfCode": "class Item:\n    \"\"\"\n    This is a custom defined Data Type 'Item'\n    with 2 instance attributes name and price.\n    \"\"\"\n    def __init__(self, name: str, price: float):\n        \"\"\"\n        Initializes an Item instance.\n        :param name: The name of the item.\n        :param price: The price of the item.",
        "detail": "Projects.Experimentals.Shopping Cart.Shopping",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "kind": 6,
        "importPath": "Projects.Experimentals.Shopping Cart.Shopping",
        "description": "Projects.Experimentals.Shopping Cart.Shopping",
        "peekOfCode": "class ShoppingCart:\n    \"\"\"\n    This is the shopping cart storing all the items to be saved in the cart for item management.\n    \"\"\"\n    DISCOUNT_THRESHOLD_1 = 10000\n    DISCOUNT_RATE_1 = 0.10\n    DISCOUNT_THRESHOLD_2 = 30000\n    DISCOUNT_RATE_2 = 0.15\n    def __init__(self):\n        \"\"\"",
        "detail": "Projects.Experimentals.Shopping Cart.Shopping",
        "documentation": {}
    },
    {
        "label": "Mart",
        "kind": 6,
        "importPath": "Projects.Experimentals.Shopping Cart.Shopping",
        "description": "Projects.Experimentals.Shopping Cart.Shopping",
        "peekOfCode": "class Mart:\n    \"\"\"\n    This class represents the mart with prebuilt data loaded from a JSON file.\n    \"\"\"\n    def __init__(self, filename: str = \"shopping_mart.json\"):\n        \"\"\"\n        Initializes a Mart instance and loads products from a JSON file.\n        :param filename: The name of the JSON file containing the mart data.\n        \"\"\"\n        self.filename = filename",
        "detail": "Projects.Experimentals.Shopping Cart.Shopping",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "Projects.Experimentals.Shopping Cart.Shopping",
        "description": "Projects.Experimentals.Shopping Cart.Shopping",
        "peekOfCode": "class Menu:\n    \"\"\"\n    This is the menu class for a menu-driven program with menu management methods.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes a Menu instance with a shopping cart and a mart.\n        \"\"\"\n        self.cart = ShoppingCart()\n        self.mart = Mart()",
        "detail": "Projects.Experimentals.Shopping Cart.Shopping",
        "documentation": {}
    },
    {
        "label": "BlackJack",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games.BLACKJACK.black_jack",
        "description": "Projects.Experimentals.Y_Games.BLACKJACK.black_jack",
        "peekOfCode": "class BlackJack:\n    @staticmethod\n    def deal_card():\n        cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        card = random.choice(cards)\n        return card\n    @staticmethod\n    def calculate_score(cards):\n        if sum(cards) == 21 and len(cards) == 2:\n            return 0",
        "detail": "Projects.Experimentals.Y_Games.BLACKJACK.black_jack",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.BLACKJACK.black_jack",
        "description": "Projects.Experimentals.Y_Games.BLACKJACK.black_jack",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')\n    filename = 'output.mp3'\n    tts.save(filename)\n    playsound(filename)\n    os.remove(filename)\nclass BlackJack:\n    @staticmethod\n    def deal_card():\n        cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]",
        "detail": "Projects.Experimentals.Y_Games.BLACKJACK.black_jack",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.BLACKJACK.black_jack",
        "description": "Projects.Experimentals.Y_Games.BLACKJACK.black_jack",
        "peekOfCode": "def main():\n    print(r\"\"\" \n ____  _            _          _            _    \n| __ )| | __ _  ___| | __     | | __ _  ___| | __\n|  _ \\| |/ _` |/ __| |/ /  _  | |/ _` |/ __| |/ /\n| |_) | | (_| | (__|   <  | |_| | (_| | (__|   < \n|____/|_|\\__,_|\\___|_|\\_\\  \\___/ \\__,_|\\___|_|\\_\\\n\"\"\")\n    print(\"Welcome to the Game of Black Jack\")\n    convert_text_to_speech(\"Welcome to the game Blackjack!\")",
        "detail": "Projects.Experimentals.Y_Games.BLACKJACK.black_jack",
        "documentation": {}
    },
    {
        "label": "stages",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.HANGMAN.hangman_art",
        "description": "Projects.Experimentals.Y_Games.HANGMAN.hangman_art",
        "peekOfCode": "stages = [r'''\n  +---+\n  |   |\n  O   |\n /|\\  |\n / \\  |\n      |\n=========\n''', r'''\n  +---+",
        "detail": "Projects.Experimentals.Y_Games.HANGMAN.hangman_art",
        "documentation": {}
    },
    {
        "label": "logo",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.HANGMAN.hangman_art",
        "description": "Projects.Experimentals.Y_Games.HANGMAN.hangman_art",
        "peekOfCode": "logo = r''' \n _                                             \n| |                                            \n| |__   __ _ _ __   __ _ _ __ ___   __ _ _ __  \n| '_ \\ / _` | '_ \\ / _` | '_ ` _ \\ / _` | '_ \\ \n| | | | (_| | | | | (_| | | | | | | (_| | | | |\n|_| |_|\\__,_|_| |_|\\__, |_| |_| |_|\\__,_|_| |_|\n                    __/ |                      \n                   |___/    '''",
        "detail": "Projects.Experimentals.Y_Games.HANGMAN.hangman_art",
        "documentation": {}
    },
    {
        "label": "word_list",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.HANGMAN.hangman_words",
        "description": "Projects.Experimentals.Y_Games.HANGMAN.hangman_words",
        "peekOfCode": "word_list = [\n'abruptly',\n'absurd',\n'abyss',\n'affix',\n'askew',\n'avenue',\n'awkward',\n'axiom',\n'azure',",
        "detail": "Projects.Experimentals.Y_Games.HANGMAN.hangman_words",
        "documentation": {}
    },
    {
        "label": "Hangman",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "peekOfCode": "class Hangman:\n    def __init__(self):\n        self.chosen_word = random.choice(word_list)\n        self.word_length = len(self.chosen_word)\n        self.end_of_game = False\n        self.lives = 6\n        self.display = [\"_\" for _ in range(self.word_length)]\n    def play(self):\n        print(logo)\n        # print(f'Pssst, the solution is {self.chosen_word}.')",
        "detail": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')\n    filename = 'output.mp3'\n    tts.save(filename)\n    playsound(filename)\n    os.remove(filename)\nclass Hangman:\n    def __init__(self):\n        self.chosen_word = random.choice(word_list)\n        self.word_length = len(self.chosen_word)",
        "detail": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "word_list",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "peekOfCode": "word_list = [\n    'abruptly',\n    'absurd',\n    'abyss',\n    'affix',\n    'askew',\n    'avenue',\n    'awkward',\n    'axiom',\n    'azure',",
        "detail": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "stages",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "peekOfCode": "stages = [r'''\n  +---+\n  |   |\n  O   |\n /|\\  |\n / \\  |\n      |\n=========\n''', r'''\n  +---+",
        "detail": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "logo",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "peekOfCode": "logo = r''' \n _                                             \n| |                                            \n| |__   __ _ _ __   __ _ _ __ ___   __ _ _ __  \n| '_ \\ / _` | '_ \\ / _` | '_ ` _ \\ / _` | '_ \\ \n| | | | (_| | | | | (_| | | | | | | (_| | | | |\n|_| |_|\\__,_|_| |_|\\__, |_| |_| |_|\\__,_|_| |_|\n                    __/ |                      \n                   |___/    '''\ndef convert_text_to_speech(text):",
        "detail": "Projects.Experimentals.Y_Games.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "display_questions",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "peekOfCode": "def display_questions(questions, ques_number):\n    shuffled_questions = list(questions.keys())\n    random.shuffle(shuffled_questions)\n    shuffled_question = shuffled_questions[0]\n    choices = questions[shuffled_question]\n    random.shuffle(choices)\n    print(f'{ques_number}. {shuffled_question}:')\n    for ques_number, choice in zip(string.ascii_uppercase, choices):\n        print(f'   {ques_number}. {choice}')\n    return shuffled_question, choices",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "documentation": {}
    },
    {
        "label": "get_answer",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "peekOfCode": "def get_answer():\n    while True:\n        ans = input(\"Enter your choice: \").upper()\n        if ans in string.ascii_uppercase:\n            return ans\n        else:\n            print(\"Invalid choice. Please enter a valid option.\")\ndef calculate_user_amount(user, question_number, question, answer, shuffled_choices):\n    question_number = int(question_number)  # Convert question_number to an integer\n    correct_answer = questions[question][0]",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "documentation": {}
    },
    {
        "label": "calculate_user_amount",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "peekOfCode": "def calculate_user_amount(user, question_number, question, answer, shuffled_choices):\n    question_number = int(question_number)  # Convert question_number to an integer\n    correct_answer = questions[question][0]\n    # if answer.upper() == string.ascii_uppercase[questions[question].index(correct_answer)]:\n    if answer.upper() == string.ascii_uppercase[shuffled_choices.index(correct_answer)]:\n        if 1 <= question_number <= 5:\n            amount = 5000\n        elif 6 <= question_number <= 10:\n            amount = 15000\n    else:",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "documentation": {}
    },
    {
        "label": "lifeline_50_50",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "peekOfCode": "def lifeline_50_50(choices, correct_answer):\n    incorrect_choices = [choice for choice in choices if choice != correct_answer]\n    choices_to_remove = random.sample(incorrect_choices, 2)\n    for choice in choices_to_remove:\n        choices.remove(choice)\n    return choices\ndef play_game(user):\n    for i in range(1, len(questions) + 1):\n        shuffled_question, shuffled_choices = display_questions(questions, i)\n        answer = get_answer()",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "documentation": {}
    },
    {
        "label": "play_game",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "peekOfCode": "def play_game(user):\n    for i in range(1, len(questions) + 1):\n        shuffled_question, shuffled_choices = display_questions(questions, i)\n        answer = get_answer()\n        # Lifeline 50-50\n        if answer == 'L':  # Using 'L' as the lifeline activation key\n            choices = lifeline_50_50(questions[shuffled_question],\n                                     questions[shuffled_question][0])  # Assuming correct answer is always 'A'\n            print(\"50-50 Lifeline used. Choices left:\")\n            for choice in choices:",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "documentation": {}
    },
    {
        "label": "user_options",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "peekOfCode": "def user_options():\n    while True:\n        print(\"\\nOptions:\")\n        print(\"1. Players won - list 3 top players\")\n        print(\"2. Your current amount\")\n        print(\"3. Play the game\")\n        print(\"4. Exit\")\n        choice = input(\"Enter your choice (1/2/3/4): \")\n        if choice == '1':\n            show_users()",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.game",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.questions",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.questions",
        "peekOfCode": "questions = {\n    \"Which god is known as 'Gauri Nandan'?\": [\n        \"Ganesha\", \"Agni\", \"Indra\", \"Hanuman\"\n    ],\n    \"What does not grow on a tree according to a popular Hindi saying?\": [\n        \"Money\", \"Flowers\", \"Leaves\", \"Fruits\"\n    ],\n    \"Which city is known as Pink City in India?\": [\n        \"Jaipur\", \"Bangalore\", \"Mysore\", \"Kochi\"\n    ],",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.questions",
        "documentation": {}
    },
    {
        "label": "save_users_data",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "peekOfCode": "def save_users_data(users):\n    with open('users_data.json', 'w') as file:\n        json.dump(users, file)\ndef load_users_data():\n    try:\n        with open('users_data.json', 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        return {}\nusers = load_users_data()",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "documentation": {}
    },
    {
        "label": "load_users_data",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "peekOfCode": "def load_users_data():\n    try:\n        with open('users_data.json', 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        return {}\nusers = load_users_data()\ndef add_user(user):\n    if user not in users:\n        users[user] = 0",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "peekOfCode": "def add_user(user):\n    if user not in users:\n        users[user] = 0\n        save_users_data(users)\n    else:\n        print(\"User already exists!\")\ndef check_user_amount(user):\n    user_lower = user.lower()\n    try:\n        amount = users[user_lower]",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "documentation": {}
    },
    {
        "label": "check_user_amount",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "peekOfCode": "def check_user_amount(user):\n    user_lower = user.lower()\n    try:\n        amount = users[user_lower]\n        print(f'Your total amount during your game play is {amount}. Thanks for Playing.')\n    except KeyError:\n        print(\"You are not currently registered in the game.\")\n        add_user()\n        amount = users[user_lower]\n        print(f'Your total amount during your game play is {amount}. Thanks for Playing.')",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "documentation": {}
    },
    {
        "label": "show_users",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "peekOfCode": "def show_users():\n    top_users = sorted(users.items(), key=lambda x: x[1], reverse=True)\n    print(\"Rank | Player   | Amount Won\")\n    print(\"-\" * 30)\n    for rank, (user, amount) in enumerate(top_users[:3], start=1):\n        print(f\"{rank:<4} | {user:<8} | {amount:>5} Rs only/-\")",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "peekOfCode": "users = load_users_data()\ndef add_user(user):\n    if user not in users:\n        users[user] = 0\n        save_users_data(users)\n    else:\n        print(\"User already exists!\")\ndef check_user_amount(user):\n    user_lower = user.lower()\n    try:",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental_Sneha.users",
        "documentation": {}
    },
    {
        "label": "KBCGame",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental",
        "peekOfCode": "class KBCGame:\n    def __init__(self):\n        self.questions = []\n        self.question_types = [\"easy\", \"medium\", \"hard\"]\n        self.questions_numbers = ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q9', 'Q8', 'Q9', 'Q10',\n                                  'Q11',\n                                  'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17']\n        self.question_count = {\"easy\": 5, \"medium\": 5, \"hard\": 7}\n        self.lifelines = {\"double_dip\": 1, \"50-50\": 1, \"flip_question\": 1}\n        self.checkpoints = ['Q5', 'Q10', 'Q15']",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental",
        "documentation": {}
    },
    {
        "label": "question_data",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental",
        "peekOfCode": "question_data = {\n    \"easy\": [\n        {\n            \"question\": \"What is the capital of India?\",\n            \"options\": [\"Kolkata\", \"Chennai\", \"Mumbai\", \"Delhi\"],\n            \"answer\": \"d\"\n        },\n        {\n            \"question\": \"Who is the CEO of Tesla?\",\n            \"options\": [\"Bill Gates\", \"Ma\"",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental",
        "documentation": {}
    },
    {
        "label": "question_amount",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental",
        "description": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental",
        "peekOfCode": "question_amount = {\n    \"Q1\": 1000,\n    \"Q2\": 2000,\n    \"Q3\": 3000,\n    \"Q4\": 5000,\n    \"Q5\": 10000,\n    \"Q6\": 20000,\n    \"Q7\": 40000,\n    \"Q8\": 80000,\n    \"Q9\": 160000,",
        "detail": "Projects.Experimentals.Y_Games.KBC.Experimental.KBC_Experimental",
        "documentation": {}
    },
    {
        "label": "KBCGame",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "description": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "peekOfCode": "class KBCGame:\n    def __init__(self):\n        self.questions = []\n        self.question_types = [\"easy\", \"medium\", \"hard\"]\n        self.questions_numbers = ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q9', 'Q8', 'Q9', 'Q10', 'Q11',\n                                  'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17']\n        self.question_count = {\"easy\": 5, \"medium\": 5, \"hard\": 7}\n        self.lifelines = {\"double_dip\": 1, \"50-50\": 1, \"flip_question\": 1}\n        self.checkpoints = ['Q5', 'Q10', 'Q15']\n        self.final_earnings = 0",
        "detail": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "description": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')\n    filename = 'output.mp3'\n    tts.save(filename)\n    playsound(filename)\n    os.remove(filename)\nclass KBCGame:\n    def __init__(self):\n        self.questions = []\n        self.question_types = [\"easy\", \"medium\", \"hard\"]",
        "detail": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "question_data",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "description": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "peekOfCode": "question_data = {\n    \"easy\": [\n        {\n            \"question\": \"What is the capital of India?\",\n            \"options\": [\"Kolkata\", \"Chennai\", \"Mumbai\", \"Delhi\"],\n            \"answer\": \"d\"\n        },\n        {\n            \"question\": \"Who is the CEO of Tesla?\",\n            \"options\": [\"Bill Gates\", \"Mark Zuckerberg\", \"Jeff Bezos\", \"Elon Musk\"],",
        "detail": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "question_amount",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "description": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "peekOfCode": "question_amount = {\n    \"Q1\": 1000,\n    \"Q2\": 2000,\n    \"Q3\": 3000,\n    \"Q4\": 5000,\n    \"Q5\": 10000,\n    \"Q6\": 20000,\n    \"Q7\": 40000,\n    \"Q8\": 80000,\n    \"Q9\": 160000,",
        "detail": "Projects.Experimentals.Y_Games.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games.Stone_Paper_Scissor.sps",
        "description": "Projects.Experimentals.Y_Games.Stone_Paper_Scissor.sps",
        "peekOfCode": "class Game:\n    def __init__(self):\n        self.options = [\"rock\", \"paper\", \"scissors\"]\n    def get_user_choice(self):\n        user_choice = input(\"Choose rock, paper, or scissors: \").lower()\n        if user_choice not in self.options:\n            print(\"Invalid input. Please try again.\")\n            return self.get_user_choice()\n        return user_choice\n    def get_computer_choice(self):",
        "detail": "Projects.Experimentals.Y_Games.Stone_Paper_Scissor.sps",
        "documentation": {}
    },
    {
        "label": "TicTacToe",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "class TicTacToe:\n    def __init__(self):\n        self.board = [' ' for _ in range(9)]\n        self.current_winner = None\n        self.scores = {'Player 1': 0, 'Player 2': 0, 'Computer': 0}\n    def print_board(self):\n        j = 0\n        for row in [self.board[i * 3:(i + 1) * 3] for i in range(3)]:\n            print('| ' + ' | '.join(row) + ' |')\n        print('\\n')",
        "detail": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "HumanPlayer",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "class HumanPlayer:\n    def __init__(self, name, letter):\n        self.name = name\n        self.letter = letter\n    def get_move(self, game):\n        valid_square = False\n        val = None\n        while not valid_square:\n            square = input(self.name + ' (' + self.letter + ')' + ' Input move (0-8): ')\n            try:",
        "detail": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "ComputerPlayer",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "class ComputerPlayer:\n    def __init__(self, name, letter):\n        self.name = name\n        self.letter = letter\n    def get_move(self, game):\n        square = random.choice(game.available_moves())\n        return square\ndef main():\n    ttt = TicTacToe()\n    player1 = HumanPlayer('Player 1', 'X')",
        "detail": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "def main():\n    ttt = TicTacToe()\n    player1 = HumanPlayer('Player 1', 'X')\n    mode = input(\"Choose mode: 1 for 2-player, 2 for computer: \")\n    if mode == '1':\n        player2 = HumanPlayer('Player 2', 'O')\n    else:\n        player2 = ComputerPlayer('Computer', 'O')\n    while True:\n        result = ttt.play_game(player1, player2)",
        "detail": "Projects.Experimentals.Y_Games.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "kbc",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.api_request",
        "description": "Projects.Experimentals.Y_Games.api_request",
        "peekOfCode": "def kbc():\n    kbc_game = KBCGame()\n    kbc_game.start_game()\ndef games_menu():\n    print(\"1> Black Jack\")\n    print(\"2> Tic Tac Toe\")\n    print(\"3> Kaun Banega Crorepati\")\n    print(\"4> Hangman\")\ndef tictactoe():\n    ttt = TicTacToe()",
        "detail": "Projects.Experimentals.Y_Games.api_request",
        "documentation": {}
    },
    {
        "label": "games_menu",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.api_request",
        "description": "Projects.Experimentals.Y_Games.api_request",
        "peekOfCode": "def games_menu():\n    print(\"1> Black Jack\")\n    print(\"2> Tic Tac Toe\")\n    print(\"3> Kaun Banega Crorepati\")\n    print(\"4> Hangman\")\ndef tictactoe():\n    ttt = TicTacToe()\n    player1 = HumanPlayer('Player 1', 'X')\n    mode = input(\"Choose mode: 1 for 2-player, 2 for computer: \")\n    if mode == '1':",
        "detail": "Projects.Experimentals.Y_Games.api_request",
        "documentation": {}
    },
    {
        "label": "tictactoe",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.api_request",
        "description": "Projects.Experimentals.Y_Games.api_request",
        "peekOfCode": "def tictactoe():\n    ttt = TicTacToe()\n    player1 = HumanPlayer('Player 1', 'X')\n    mode = input(\"Choose mode: 1 for 2-player, 2 for computer: \")\n    if mode == '1':\n        player2 = HumanPlayer('Player 2', 'O')\n    else:\n        player2 = ComputerPlayer('Computer', 'O')\n    while True:\n        result = ttt.play_game(player1, player2)",
        "detail": "Projects.Experimentals.Y_Games.api_request",
        "documentation": {}
    },
    {
        "label": "black_jack_game",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.api_request",
        "description": "Projects.Experimentals.Y_Games.api_request",
        "peekOfCode": "def black_jack_game():\n    black_jack.main()\napp = Flask(__name__)\n@app.route('/game', methods=['GET'])\ndef play_game():\n    print(\"Welcome to the Yash Games Services!!!!\")\n    games_menu()\n    while True:\n        choice = int(input(\"Enter the game you want to play: \"))\n        if not choice in [1, 2, 3, 4, 0]:",
        "detail": "Projects.Experimentals.Y_Games.api_request",
        "documentation": {}
    },
    {
        "label": "play_game",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.api_request",
        "description": "Projects.Experimentals.Y_Games.api_request",
        "peekOfCode": "def play_game():\n    print(\"Welcome to the Yash Games Services!!!!\")\n    games_menu()\n    while True:\n        choice = int(input(\"Enter the game you want to play: \"))\n        if not choice in [1, 2, 3, 4, 0]:\n            print(\"Enter a valid Choice!!\")\n            continue\n        if choice == 1:\n            black_jack_game()",
        "detail": "Projects.Experimentals.Y_Games.api_request",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games.api_request",
        "description": "Projects.Experimentals.Y_Games.api_request",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/game', methods=['GET'])\ndef play_game():\n    print(\"Welcome to the Yash Games Services!!!!\")\n    games_menu()\n    while True:\n        choice = int(input(\"Enter the game you want to play: \"))\n        if not choice in [1, 2, 3, 4, 0]:\n            print(\"Enter a valid Choice!!\")\n            continue",
        "detail": "Projects.Experimentals.Y_Games.api_request",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.main_game",
        "description": "Projects.Experimentals.Y_Games.main_game",
        "peekOfCode": "def clear_screen():\n    if os.name == 'nt':  # for windows\n        _ = os.system('cls')\n    else:  # for mac and linux(here, os.name is 'posix')\n        _ = os.system('clear')\ndef games_menu():\n    os.system('color 0A')  # change bg color to light blue\n    clear_screen()\n    print(Fore.CYAN + Style.BRIGHT + \"\\tWelcome to the Yash Games Services!!!!\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t1> Black Jack\")",
        "detail": "Projects.Experimentals.Y_Games.main_game",
        "documentation": {}
    },
    {
        "label": "games_menu",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.main_game",
        "description": "Projects.Experimentals.Y_Games.main_game",
        "peekOfCode": "def games_menu():\n    os.system('color 0A')  # change bg color to light blue\n    clear_screen()\n    print(Fore.CYAN + Style.BRIGHT + \"\\tWelcome to the Yash Games Services!!!!\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t1> Black Jack\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t2> Tic Tac Toe\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t3> Kaun Banega Crorepati\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t4> Hangman\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t5> Stone Paper Scissor\")\n    print(Fore.CYAN + Style.BRIGHT + \"\\t6> Exit\")",
        "detail": "Projects.Experimentals.Y_Games.main_game",
        "documentation": {}
    },
    {
        "label": "get_terminal_size",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.main_game",
        "description": "Projects.Experimentals.Y_Games.main_game",
        "peekOfCode": "def get_terminal_size():\n    try:\n        return os.get_terminal_size()\n    except OSError:\n        return 80, 24  # Default terminal size\ndef print_centered(text):\n    terminal_size = get_terminal_size()\n    length = len(text)\n    start_pos = (terminal_size[0] - length) // 2\n    print(\" \" * start_pos + text)",
        "detail": "Projects.Experimentals.Y_Games.main_game",
        "documentation": {}
    },
    {
        "label": "print_centered",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games.main_game",
        "description": "Projects.Experimentals.Y_Games.main_game",
        "peekOfCode": "def print_centered(text):\n    terminal_size = get_terminal_size()\n    length = len(text)\n    start_pos = (terminal_size[0] - length) // 2\n    print(\" \" * start_pos + text)\nif __name__ == '__main__':\n    print_centered(\"Welcome to the Yash Games Services!!!!\")\n    while True:\n        games_menu()\n        choice = int(input(Fore.GREEN + Style.BRIGHT + \"\\tEnter the game you want to play: \"))",
        "detail": "Projects.Experimentals.Y_Games.main_game",
        "documentation": {}
    },
    {
        "label": "BlackJack",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games_V2.BLACKJACK.black_jack",
        "description": "Projects.Experimentals.Y_Games_V2.BLACKJACK.black_jack",
        "peekOfCode": "class BlackJack:\n    @staticmethod\n    def deal_card():\n        cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        card = random.choice(cards)\n        return card\n    @staticmethod\n    def calculate_score(cards):\n        if sum(cards) == 21 and len(cards) == 2:\n            return 0",
        "detail": "Projects.Experimentals.Y_Games_V2.BLACKJACK.black_jack",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games_V2.BLACKJACK.black_jack",
        "description": "Projects.Experimentals.Y_Games_V2.BLACKJACK.black_jack",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')\n    filename = 'output.mp3'\n    tts.save(filename)\n    playsound(filename)\n    os.remove(filename)\nclass BlackJack:\n    @staticmethod\n    def deal_card():\n        cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]",
        "detail": "Projects.Experimentals.Y_Games_V2.BLACKJACK.black_jack",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games_V2.BLACKJACK.black_jack",
        "description": "Projects.Experimentals.Y_Games_V2.BLACKJACK.black_jack",
        "peekOfCode": "def main():\n    print(r\"\"\" \n ____  _            _          _            _    \n| __ )| | __ _  ___| | __     | | __ _  ___| | __\n|  _ \\| |/ _` |/ __| |/ /  _  | |/ _` |/ __| |/ /\n| |_) | | (_| | (__|   <  | |_| | (_| | (__|   < \n|____/|_|\\__,_|\\___|_|\\_\\  \\___/ \\__,_|\\___|_|\\_\\\n\"\"\")\n    print(\"Welcome to the Game of Black Jack\")\n    convert_text_to_speech(\"Welcome to the game Blackjack!\")",
        "detail": "Projects.Experimentals.Y_Games_V2.BLACKJACK.black_jack",
        "documentation": {}
    },
    {
        "label": "stages",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games_V2.HANGMAN.hangman_art",
        "description": "Projects.Experimentals.Y_Games_V2.HANGMAN.hangman_art",
        "peekOfCode": "stages = [r'''\n  +---+\n  |   |\n  O   |\n /|\\  |\n / \\  |\n      |\n=========\n''', r'''\n  +---+",
        "detail": "Projects.Experimentals.Y_Games_V2.HANGMAN.hangman_art",
        "documentation": {}
    },
    {
        "label": "logo",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games_V2.HANGMAN.hangman_art",
        "description": "Projects.Experimentals.Y_Games_V2.HANGMAN.hangman_art",
        "peekOfCode": "logo = r''' \n _                                             \n| |                                            \n| |__   __ _ _ __   __ _ _ __ ___   __ _ _ __  \n| '_ \\ / _` | '_ \\ / _` | '_ ` _ \\ / _` | '_ \\ \n| | | | (_| | | | | (_| | | | | | | (_| | | | |\n|_| |_|\\__,_|_| |_|\\__, |_| |_| |_|\\__,_|_| |_|\n                    __/ |                      \n                   |___/    '''",
        "detail": "Projects.Experimentals.Y_Games_V2.HANGMAN.hangman_art",
        "documentation": {}
    },
    {
        "label": "word_list",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games_V2.HANGMAN.hangman_words",
        "description": "Projects.Experimentals.Y_Games_V2.HANGMAN.hangman_words",
        "peekOfCode": "word_list = [\n    'abruptly',\n    'absurd',\n    'abyss',\n    'affix',\n    'askew',\n    'avenue',\n    'awkward',\n    'axiom',\n    'azure',",
        "detail": "Projects.Experimentals.Y_Games_V2.HANGMAN.hangman_words",
        "documentation": {}
    },
    {
        "label": "Hangman",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "class Hangman:\n    def __init__(self):\n        self.chosen_word = random.choice(word_list)\n        self.word_length = len(self.chosen_word)\n        self.end_of_game = False\n        self.lives = 6\n        self.display = [\"_\" for _ in range(self.word_length)]\n    def play(self):\n        print(logo)\n        # print(f'Pssst, the solution is {self.chosen_word}.')",
        "detail": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')\n    filename = 'output.mp3'\n    tts.save(filename)\n    playsound(filename)\n    os.remove(filename)\nclass Hangman:\n    def __init__(self):\n        self.chosen_word = random.choice(word_list)\n        self.word_length = len(self.chosen_word)",
        "detail": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "word_list",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "word_list = [\n    'abruptly',\n    'absurd',\n    'abyss',\n    'affix',\n    'askew',\n    'avenue',\n    'awkward',\n    'axiom',\n    'azure',",
        "detail": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "stages",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "stages = [r'''\n  +---+\n  |   |\n  O   |\n /|\\  |\n / \\  |\n      |\n=========\n''', r'''\n  +---+",
        "detail": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "logo",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "logo = r''' \n _                                             \n| |                                            \n| |__   __ _ _ __   __ _ _ __ ___   __ _ _ __  \n| '_ \\ / _` | '_ \\ / _` | '_ ` _ \\ / _` | '_ \\ \n| | | | (_| | | | | (_| | | | | | | (_| | | | |\n|_| |_|\\__,_|_| |_|\\__, |_| |_| |_|\\__,_|_| |_|\n                    __/ |                      \n                   |___/    '''\ndef convert_text_to_speech(text):",
        "detail": "Projects.Experimentals.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "KBCGame",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "description": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "peekOfCode": "class KBCGame:\n    def __init__(self):\n        self.questions = []\n        self.question_types = [\"easy\", \"medium\", \"hard\"]\n        self.questions_numbers = ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q9', 'Q8', 'Q9', 'Q10', 'Q11',\n                                  'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17']\n        self.question_count = {\"easy\": 5, \"medium\": 5, \"hard\": 7}\n        self.lifelines = {\"double_dip\": 1, \"50-50\": 1, \"flip_question\": 1}\n        self.checkpoints = ['Q5', 'Q10', 'Q15']\n        self.final_earnings = 0",
        "detail": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "description": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')\n    filename = 'output.mp3'\n    tts.save(filename)\n    playsound(filename)\n    os.remove(filename)\nclass KBCGame:\n    def __init__(self):\n        self.questions = []\n        self.question_types = [\"easy\", \"medium\", \"hard\"]",
        "detail": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "question_data",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "description": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "peekOfCode": "question_data = {\n    \"easy\": [\n        {\n            \"question\": \"What is the capital of India?\",\n            \"options\": [\"Kolkata\", \"Chennai\", \"Mumbai\", \"Delhi\"],\n            \"answer\": \"d\"\n        },\n        {\n            \"question\": \"Who is the CEO of Tesla?\",\n            \"options\": [\"Bill Gates\", \"Mark Zuckerberg\", \"Jeff Bezos\", \"Elon Musk\"],",
        "detail": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "question_amount",
        "kind": 5,
        "importPath": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "description": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "peekOfCode": "question_amount = {\n    \"Q1\": 1000,\n    \"Q2\": 2000,\n    \"Q3\": 3000,\n    \"Q4\": 5000,\n    \"Q5\": 10000,\n    \"Q6\": 20000,\n    \"Q7\": 40000,\n    \"Q8\": 80000,\n    \"Q9\": 160000,",
        "detail": "Projects.Experimentals.Y_Games_V2.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games_V2.Stone_Paper_Scissor.sps",
        "description": "Projects.Experimentals.Y_Games_V2.Stone_Paper_Scissor.sps",
        "peekOfCode": "class Game:\n    def __init__(self):\n        self.options = [\"rock\", \"paper\", \"scissors\"]\n    def get_user_choice(self):\n        user_choice = input(\"Choose rock, paper, or scissors: \").lower()\n        if user_choice not in self.options:\n            print(\"Invalid input. Please try again.\")\n            return self.get_user_choice()\n        return user_choice\n    def get_computer_choice(self):",
        "detail": "Projects.Experimentals.Y_Games_V2.Stone_Paper_Scissor.sps",
        "documentation": {}
    },
    {
        "label": "TicTacToe",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "class TicTacToe:\n    def __init__(self):\n        self.board = [' ' for _ in range(9)]\n        self.current_winner = None\n        self.scores = {'Player 1': 0, 'Player 2': 0, 'Computer': 0}\n    def print_board(self):\n        j = 0\n        for row in [self.board[i * 3:(i + 1) * 3] for i in range(3)]:\n            print('| ' + ' | '.join(row) + ' |')\n        print('\\n')",
        "detail": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "HumanPlayer",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "class HumanPlayer:\n    def __init__(self, name, letter):\n        self.name = name\n        self.letter = letter\n    def get_move(self, game):\n        valid_square = False\n        val = None\n        while not valid_square:\n            square = input(self.name + ' (' + self.letter + ')' + ' Input move (0-8): ')\n            try:",
        "detail": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "ComputerPlayer",
        "kind": 6,
        "importPath": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "class ComputerPlayer:\n    def __init__(self, name, letter):\n        self.name = name\n        self.letter = letter\n    def get_move(self, game):\n        square = random.choice(game.available_moves())\n        return square\ndef main():\n    ttt = TicTacToe()\n    player1 = HumanPlayer('Player 1', 'X')",
        "detail": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "def main():\n    ttt = TicTacToe()\n    player1 = HumanPlayer('Player 1', 'X')\n    mode = input(\"Choose mode: 1 for 2-player, 2 for computer: \")\n    if mode == '1':\n        player2 = HumanPlayer('Player 2', 'O')\n    else:\n        player2 = ComputerPlayer('Computer', 'O')\n    while True:\n        result = ttt.play_game(player1, player2)",
        "detail": "Projects.Experimentals.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games_V2.main_game",
        "description": "Projects.Experimentals.Y_Games_V2.main_game",
        "peekOfCode": "def clear_screen():\n    if os.name == 'nt':  # for windows\n        _ = os.system('cls')\n    else:  # for mac and linux(here, os.name is 'posix')\n        _ = os.system('clear')\ndef games_menu():\n    os.system('color 0A')  # change bg color to light blue\n    clear_screen()\n    print(Fore.CYAN + Style.BRIGHT + \"\\tWelcome to the Yash Games Services!!!!\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t1> Black Jack\")",
        "detail": "Projects.Experimentals.Y_Games_V2.main_game",
        "documentation": {}
    },
    {
        "label": "games_menu",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games_V2.main_game",
        "description": "Projects.Experimentals.Y_Games_V2.main_game",
        "peekOfCode": "def games_menu():\n    os.system('color 0A')  # change bg color to light blue\n    clear_screen()\n    print(Fore.CYAN + Style.BRIGHT + \"\\tWelcome to the Yash Games Services!!!!\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t1> Black Jack\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t2> Tic Tac Toe\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t3> Kaun Banega Crorepati\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t4> Hangman\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t5> Stone Paper Scissor\")\n    print(Fore.CYAN + Style.BRIGHT + \"\\t6> Exit\")",
        "detail": "Projects.Experimentals.Y_Games_V2.main_game",
        "documentation": {}
    },
    {
        "label": "get_terminal_size",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games_V2.main_game",
        "description": "Projects.Experimentals.Y_Games_V2.main_game",
        "peekOfCode": "def get_terminal_size():\n    try:\n        return os.get_terminal_size()\n    except OSError:\n        return 80, 24  # Default terminal size\ndef print_centered(text):\n    terminal_size = get_terminal_size()\n    length = len(text)\n    start_pos = (terminal_size[0] - length) // 2\n    print(\" \" * start_pos + text)",
        "detail": "Projects.Experimentals.Y_Games_V2.main_game",
        "documentation": {}
    },
    {
        "label": "print_centered",
        "kind": 2,
        "importPath": "Projects.Experimentals.Y_Games_V2.main_game",
        "description": "Projects.Experimentals.Y_Games_V2.main_game",
        "peekOfCode": "def print_centered(text):\n    terminal_size = get_terminal_size()\n    length = len(text)\n    start_pos = (terminal_size[0] - length) // 2\n    print(\" \" * start_pos + text)\nif __name__ == '__main__':\n    print_centered(\"Welcome to the Yash Games Services!!!!\")\n    while True:\n        games_menu()\n        choice = int(input(Fore.GREEN + Style.BRIGHT + \"\\tEnter the game you want to play: \"))",
        "detail": "Projects.Experimentals.Y_Games_V2.main_game",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.routes.urls",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.routes.urls",
        "peekOfCode": "def route(url: str, *args, **kwargs) -> None | Callable:\n    \"\"\"\n        Routes a URL to a view function.\n        Args:\n            url (str): The URL to route.\n            *args: Variable length arguments to pass to the view function.\n            **kwargs: Variable keyword arguments to pass to the view function.\n        Raises:\n            Exception: If the URL is not found.\n        Returns:",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.routes.urls",
        "documentation": {}
    },
    {
        "label": "login_banking_system",
        "kind": 2,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.utility.decorators",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.utility.decorators",
        "peekOfCode": "def login_banking_system(func):\n    \"\"\"\n    A decorator that checks if the user is logged in before calling the decorated function.\n    Args:\n        func: The function to decorate.\n    Returns: the main function to execute the code\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        username = input(\"Enter the admin Username: \")\n        password = input(\"Enter the admin Password: \")",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.utility.decorators",
        "documentation": {}
    },
    {
        "label": "AccountError",
        "kind": 6,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "peekOfCode": "class AccountError(Exception):\n    \"\"\"\n    Base class for all account-related exceptions.\n    \"\"\"\n    pass\nclass AccountNotFoundError(AccountError):\n    \"\"\"\n    Raised when an account is not found.\n    Attributes:\n        message (str): The error message.",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountNotFoundError",
        "kind": 6,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "peekOfCode": "class AccountNotFoundError(AccountError):\n    \"\"\"\n    Raised when an account is not found.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass InsufficientFundsError(AccountError):\n    \"\"\"\n    Raised when an account does not have sufficient funds.",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InsufficientFundsError",
        "kind": 6,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "peekOfCode": "class InsufficientFundsError(AccountError):\n    \"\"\"\n    Raised when an account does not have sufficient funds.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass AccountAlreadyExistsError(AccountError):\n    \"\"\"\n    Raised when an account with the same account number already exists.",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "AccountAlreadyExistsError",
        "kind": 6,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "peekOfCode": "class AccountAlreadyExistsError(AccountError):\n    \"\"\"\n    Raised when an account with the same account number already exists.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass\nclass InvalidInitialBalanceError(AccountError):\n    \"\"\"\n    Raised when the initial balance of an account is invalid.",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidInitialBalanceError",
        "kind": 6,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "peekOfCode": "class InvalidInitialBalanceError(AccountError):\n    \"\"\"\n    Raised when the initial balance of an account is invalid.\n    Attributes:\n        message (str): The error message.\n    \"\"\"\n    pass",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.utility.exceptions",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.account",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.account",
        "peekOfCode": "class Account:\n    \"\"\"\n    Represents a bank account.\n    Attributes:\n        account_number (str): The account number.\n        name (str): The account holder's name.\n        ifsc_code (str): The IFSC code of the branch.\n        branch_name (str): The name of the branch.\n        state (str): The state where the branch is located.\n        district (str): The district where the branch is located.",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.account",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.bank",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.bank",
        "peekOfCode": "class Bank:\n    \"\"\"\n            A class that provides a static interface to the `Transactions` class for managing bank accounts.\n            Args:\n                None\n            \"\"\"\n    @staticmethod\n    def create_account(account_number: str, name: str, ifsc_code: str, branch_name: str, state: str, district: str,\n                       country: str, account_type: str, initial_balance: float = 0) -> None:\n        \"\"\"",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.bank",
        "documentation": {}
    },
    {
        "label": "BankingSystem",
        "kind": 6,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.interface",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.interface",
        "peekOfCode": "class BankingSystem:\n    \"\"\"\n            A banking system that allows users to create accounts, deposit/credit money,\n            view statements, transfer money, and view transactions.\n            \"\"\"\n    @staticmethod\n    @login_banking_system\n    def main() -> None:\n        \"\"\"\n        The main function that runs the banking system.",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.interface",
        "documentation": {}
    },
    {
        "label": "Transactions",
        "kind": 6,
        "importPath": "Projects.Project Submission.Bank_Management_System.BMS.transactions",
        "description": "Projects.Project Submission.Bank_Management_System.BMS.transactions",
        "peekOfCode": "class Transactions:\n    \"\"\"\n        Handles transactions and account operations.\n        Attributes:\n            transactions_file (str): The file where transactions are stored.\n        \"\"\"\n    transactions_file = \"Data/transactions.json\"\n    @staticmethod\n    def load_transactions() -> dict:\n        \"\"\"",
        "detail": "Projects.Project Submission.Bank_Management_System.BMS.transactions",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "Projects.Project Submission.Shopping Cart.Shopping",
        "description": "Projects.Project Submission.Shopping Cart.Shopping",
        "peekOfCode": "class Item:\n    \"\"\"\n    This is a custom defined Data Type 'Item'\n    with 2 instance attributes name and price.\n    \"\"\"\n    def __init__(self, name: str, price: float):\n        \"\"\"\n        Initializes an Item instance.\n        :param name: The name of the item.\n        :param price: The price of the item.",
        "detail": "Projects.Project Submission.Shopping Cart.Shopping",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "kind": 6,
        "importPath": "Projects.Project Submission.Shopping Cart.Shopping",
        "description": "Projects.Project Submission.Shopping Cart.Shopping",
        "peekOfCode": "class ShoppingCart:\n    \"\"\"\n    This is the shopping cart storing all the items to be saved in the cart for item management.\n    \"\"\"\n    DISCOUNT_THRESHOLD_1 = 10000\n    DISCOUNT_RATE_1 = 0.10\n    DISCOUNT_THRESHOLD_2 = 30000\n    DISCOUNT_RATE_2 = 0.15\n    def __init__(self):\n        \"\"\"",
        "detail": "Projects.Project Submission.Shopping Cart.Shopping",
        "documentation": {}
    },
    {
        "label": "Mart",
        "kind": 6,
        "importPath": "Projects.Project Submission.Shopping Cart.Shopping",
        "description": "Projects.Project Submission.Shopping Cart.Shopping",
        "peekOfCode": "class Mart:\n    \"\"\"\n    This class represents the mart with prebuilt data loaded from a JSON file.\n    \"\"\"\n    def __init__(self, filename: str = \"shopping_mart.json\"):\n        \"\"\"\n        Initializes a Mart instance and loads products from a JSON file.\n        :param filename: The name of the JSON file containing the mart data.\n        \"\"\"\n        self.filename = filename",
        "detail": "Projects.Project Submission.Shopping Cart.Shopping",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "Projects.Project Submission.Shopping Cart.Shopping",
        "description": "Projects.Project Submission.Shopping Cart.Shopping",
        "peekOfCode": "class Menu:\n    \"\"\"\n    This is the menu class for a menu-driven program with menu management methods.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes a Menu instance with a shopping cart and a mart.\n        \"\"\"\n        self.cart = ShoppingCart()\n        self.mart = Mart()",
        "detail": "Projects.Project Submission.Shopping Cart.Shopping",
        "documentation": {}
    },
    {
        "label": "BlackJack",
        "kind": 6,
        "importPath": "Projects.Project Submission.Y_Games_V2.BLACKJACK.black_jack",
        "description": "Projects.Project Submission.Y_Games_V2.BLACKJACK.black_jack",
        "peekOfCode": "class BlackJack:\n    @staticmethod\n    def deal_card():\n        cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n        card = random.choice(cards)\n        return card\n    @staticmethod\n    def calculate_score(cards):\n        if sum(cards) == 21 and len(cards) == 2:\n            return 0",
        "detail": "Projects.Project Submission.Y_Games_V2.BLACKJACK.black_jack",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "Projects.Project Submission.Y_Games_V2.BLACKJACK.black_jack",
        "description": "Projects.Project Submission.Y_Games_V2.BLACKJACK.black_jack",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')\n    filename = 'output.mp3'\n    tts.save(filename)\n    playsound(filename)\n    os.remove(filename)\nclass BlackJack:\n    @staticmethod\n    def deal_card():\n        cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]",
        "detail": "Projects.Project Submission.Y_Games_V2.BLACKJACK.black_jack",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Projects.Project Submission.Y_Games_V2.BLACKJACK.black_jack",
        "description": "Projects.Project Submission.Y_Games_V2.BLACKJACK.black_jack",
        "peekOfCode": "def main():\n    print(r\"\"\" \n ____  _            _          _            _    \n| __ )| | __ _  ___| | __     | | __ _  ___| | __\n|  _ \\| |/ _` |/ __| |/ /  _  | |/ _` |/ __| |/ /\n| |_) | | (_| | (__|   <  | |_| | (_| | (__|   < \n|____/|_|\\__,_|\\___|_|\\_\\  \\___/ \\__,_|\\___|_|\\_\\\n\"\"\")\n    print(\"Welcome to the Game of Black Jack\")\n    convert_text_to_speech(\"Welcome to the game Blackjack!\")",
        "detail": "Projects.Project Submission.Y_Games_V2.BLACKJACK.black_jack",
        "documentation": {}
    },
    {
        "label": "stages",
        "kind": 5,
        "importPath": "Projects.Project Submission.Y_Games_V2.HANGMAN.hangman_art",
        "description": "Projects.Project Submission.Y_Games_V2.HANGMAN.hangman_art",
        "peekOfCode": "stages = [r'''\n  +---+\n  |   |\n  O   |\n /|\\  |\n / \\  |\n      |\n=========\n''', r'''\n  +---+",
        "detail": "Projects.Project Submission.Y_Games_V2.HANGMAN.hangman_art",
        "documentation": {}
    },
    {
        "label": "logo",
        "kind": 5,
        "importPath": "Projects.Project Submission.Y_Games_V2.HANGMAN.hangman_art",
        "description": "Projects.Project Submission.Y_Games_V2.HANGMAN.hangman_art",
        "peekOfCode": "logo = r''' \n _                                             \n| |                                            \n| |__   __ _ _ __   __ _ _ __ ___   __ _ _ __  \n| '_ \\ / _` | '_ \\ / _` | '_ ` _ \\ / _` | '_ \\ \n| | | | (_| | | | | (_| | | | | | | (_| | | | |\n|_| |_|\\__,_|_| |_|\\__, |_| |_| |_|\\__,_|_| |_|\n                    __/ |                      \n                   |___/    '''",
        "detail": "Projects.Project Submission.Y_Games_V2.HANGMAN.hangman_art",
        "documentation": {}
    },
    {
        "label": "word_list",
        "kind": 5,
        "importPath": "Projects.Project Submission.Y_Games_V2.HANGMAN.hangman_words",
        "description": "Projects.Project Submission.Y_Games_V2.HANGMAN.hangman_words",
        "peekOfCode": "word_list = [\n    'abruptly',\n    'absurd',\n    'abyss',\n    'affix',\n    'askew',\n    'avenue',\n    'awkward',\n    'axiom',\n    'azure',",
        "detail": "Projects.Project Submission.Y_Games_V2.HANGMAN.hangman_words",
        "documentation": {}
    },
    {
        "label": "Hangman",
        "kind": 6,
        "importPath": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "class Hangman:\n    def __init__(self):\n        self.chosen_word = random.choice(word_list)\n        self.word_length = len(self.chosen_word)\n        self.end_of_game = False\n        self.lives = 6\n        self.display = [\"_\" for _ in range(self.word_length)]\n    def play(self):\n        print(logo)\n        # print(f'Pssst, the solution is {self.chosen_word}.')",
        "detail": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')\n    filename = 'output.mp3'\n    tts.save(filename)\n    playsound(filename)\n    os.remove(filename)\nclass Hangman:\n    def __init__(self):\n        self.chosen_word = random.choice(word_list)\n        self.word_length = len(self.chosen_word)",
        "detail": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "word_list",
        "kind": 5,
        "importPath": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "word_list = [\n    'abruptly',\n    'absurd',\n    'abyss',\n    'affix',\n    'askew',\n    'avenue',\n    'awkward',\n    'axiom',\n    'azure',",
        "detail": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "stages",
        "kind": 5,
        "importPath": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "stages = [r'''\n  +---+\n  |   |\n  O   |\n /|\\  |\n / \\  |\n      |\n=========\n''', r'''\n  +---+",
        "detail": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "logo",
        "kind": 5,
        "importPath": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "description": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "peekOfCode": "logo = r''' \n _                                             \n| |                                            \n| |__   __ _ _ __   __ _ _ __ ___   __ _ _ __  \n| '_ \\ / _` | '_ \\ / _` | '_ ` _ \\ / _` | '_ \\ \n| | | | (_| | | | | (_| | | | | | | (_| | | | |\n|_| |_|\\__,_|_| |_|\\__, |_| |_| |_|\\__,_|_| |_|\n                    __/ |                      \n                   |___/    '''\ndef convert_text_to_speech(text):",
        "detail": "Projects.Project Submission.Y_Games_V2.HANGMAN.main",
        "documentation": {}
    },
    {
        "label": "KBCGame",
        "kind": 6,
        "importPath": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "description": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "peekOfCode": "class KBCGame:\n    def __init__(self):\n        self.questions = []\n        self.question_types = [\"easy\", \"medium\", \"hard\"]\n        self.questions_numbers = ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q9', 'Q8', 'Q9', 'Q10', 'Q11',\n                                  'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17']\n        self.question_count = {\"easy\": 5, \"medium\": 5, \"hard\": 7}\n        self.lifelines = {\"double_dip\": 1, \"50-50\": 1, \"flip_question\": 1}\n        self.checkpoints = ['Q5', 'Q10', 'Q15']\n        self.final_earnings = 0",
        "detail": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "convert_text_to_speech",
        "kind": 2,
        "importPath": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "description": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "peekOfCode": "def convert_text_to_speech(text):\n    tts = gtts.gTTS(text, lang='en')\n    filename = 'output.mp3'\n    tts.save(filename)\n    playsound(filename)\n    os.remove(filename)\nclass KBCGame:\n    def __init__(self):\n        self.questions = []\n        self.question_types = [\"easy\", \"medium\", \"hard\"]",
        "detail": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "question_data",
        "kind": 5,
        "importPath": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "description": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "peekOfCode": "question_data = {\n    \"easy\": [\n        {\n            \"question\": \"What is the capital of India?\",\n            \"options\": [\"Kolkata\", \"Chennai\", \"Mumbai\", \"Delhi\"],\n            \"answer\": \"d\"\n        },\n        {\n            \"question\": \"Who is the CEO of Tesla?\",\n            \"options\": [\"Bill Gates\", \"Mark Zuckerberg\", \"Jeff Bezos\", \"Elon Musk\"],",
        "detail": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "question_amount",
        "kind": 5,
        "importPath": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "description": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "peekOfCode": "question_amount = {\n    \"Q1\": 1000,\n    \"Q2\": 2000,\n    \"Q3\": 3000,\n    \"Q4\": 5000,\n    \"Q5\": 10000,\n    \"Q6\": 20000,\n    \"Q7\": 40000,\n    \"Q8\": 80000,\n    \"Q9\": 160000,",
        "detail": "Projects.Project Submission.Y_Games_V2.KBC.kaun_banega_crorepati",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "Projects.Project Submission.Y_Games_V2.Stone_Paper_Scissor.sps",
        "description": "Projects.Project Submission.Y_Games_V2.Stone_Paper_Scissor.sps",
        "peekOfCode": "class Game:\n    def __init__(self):\n        self.options = [\"rock\", \"paper\", \"scissors\"]\n    def get_user_choice(self):\n        user_choice = input(\"Choose rock, paper, or scissors: \").lower()\n        if user_choice not in self.options:\n            print(\"Invalid input. Please try again.\")\n            return self.get_user_choice()\n        return user_choice\n    def get_computer_choice(self):",
        "detail": "Projects.Project Submission.Y_Games_V2.Stone_Paper_Scissor.sps",
        "documentation": {}
    },
    {
        "label": "TicTacToe",
        "kind": 6,
        "importPath": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "class TicTacToe:\n    def __init__(self):\n        self.board = [' ' for _ in range(9)]\n        self.current_winner = None\n        self.scores = {'Player 1': 0, 'Player 2': 0, 'Computer': 0}\n    def print_board(self):\n        for row in [self.board[i * 3:(i + 1) * 3] for i in range(3)]:\n            print('| ' + ' | '.join(row) + ' |')\n        print('\\n')\n    def available_moves(self):",
        "detail": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "HumanPlayer",
        "kind": 6,
        "importPath": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "class HumanPlayer:\n    def __init__(self, name, letter):\n        self.name = name\n        self.letter = letter\n    def get_move(self, game):\n        valid_square = False\n        val = None\n        while not valid_square:\n            square = input(self.name + ' (' + self.letter + ')' + ' Input move (0-8): ')\n            try:",
        "detail": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "ComputerPlayer",
        "kind": 6,
        "importPath": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "class ComputerPlayer:\n    def __init__(self, name, letter):\n        self.name = name\n        self.letter = letter\n    @staticmethod\n    def get_move(game):\n        square = random.choice(game.available_moves())\n        return square\ndef main():\n    ttt = TicTacToe()",
        "detail": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "description": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "peekOfCode": "def main():\n    ttt = TicTacToe()\n    player1 = HumanPlayer('Player 1', 'X')\n    mode = input(\"Choose mode: 1 for 2-player, 2 for computer: \")\n    if mode == '1':\n        player2 = HumanPlayer('Player 2', 'O')\n    else:\n        player2 = ComputerPlayer('Computer', 'O')\n    while True:\n        ttt.play_game(player1, player2)",
        "detail": "Projects.Project Submission.Y_Games_V2.TIC_TAC_TOE.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "Projects.Project Submission.Y_Games_V2.main_game",
        "description": "Projects.Project Submission.Y_Games_V2.main_game",
        "peekOfCode": "def clear_screen():\n    if os.name == 'nt':  # for windows\n        _ = os.system('cls')\n    else:  # for mac and linux(here, os.name is 'posix')\n        _ = os.system('clear')\ndef games_menu():\n    os.system('color 0A')  # change bg color to light blue\n    clear_screen()\n    print(Fore.CYAN + Style.BRIGHT + \"\\tWelcome to the Yash Games Services!!!!\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t1> Black Jack\")",
        "detail": "Projects.Project Submission.Y_Games_V2.main_game",
        "documentation": {}
    },
    {
        "label": "games_menu",
        "kind": 2,
        "importPath": "Projects.Project Submission.Y_Games_V2.main_game",
        "description": "Projects.Project Submission.Y_Games_V2.main_game",
        "peekOfCode": "def games_menu():\n    os.system('color 0A')  # change bg color to light blue\n    clear_screen()\n    print(Fore.CYAN + Style.BRIGHT + \"\\tWelcome to the Yash Games Services!!!!\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t1> Black Jack\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t2> Tic Tac Toe\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t3> Kaun Banega Crorepati\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t4> Hangman\")\n    print(Fore.GREEN + Style.BRIGHT + \"\\t5> Stone Paper Scissor\")\n    print(Fore.CYAN + Style.BRIGHT + \"\\t6> Exit\")",
        "detail": "Projects.Project Submission.Y_Games_V2.main_game",
        "documentation": {}
    },
    {
        "label": "get_terminal_size",
        "kind": 2,
        "importPath": "Projects.Project Submission.Y_Games_V2.main_game",
        "description": "Projects.Project Submission.Y_Games_V2.main_game",
        "peekOfCode": "def get_terminal_size():\n    try:\n        return os.get_terminal_size()\n    except OSError:\n        return 80, 24  # Default terminal size\ndef print_centered(text):\n    terminal_size = get_terminal_size()\n    length = len(text)\n    start_pos = (terminal_size[0] - length) // 2\n    print(\" \" * start_pos + text)",
        "detail": "Projects.Project Submission.Y_Games_V2.main_game",
        "documentation": {}
    },
    {
        "label": "print_centered",
        "kind": 2,
        "importPath": "Projects.Project Submission.Y_Games_V2.main_game",
        "description": "Projects.Project Submission.Y_Games_V2.main_game",
        "peekOfCode": "def print_centered(text):\n    terminal_size = get_terminal_size()\n    length = len(text)\n    start_pos = (terminal_size[0] - length) // 2\n    print(\" \" * start_pos + text)\nif __name__ == '__main__':\n    print_centered(\"Welcome to the Yash Games Services!!!!\")\n    while True:\n        games_menu()\n        choice = int(input(Fore.GREEN + Style.BRIGHT + \"\\tEnter the game you want to play: \"))",
        "detail": "Projects.Project Submission.Y_Games_V2.main_game",
        "documentation": {}
    }
]