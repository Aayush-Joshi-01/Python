[
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "Models.data_processor",
        "description": "Models.data_processor",
        "isExtraImport": true,
        "detail": "Models.data_processor",
        "documentation": {}
    },
    {
        "label": "PlotUtils",
        "importPath": "Utils.plot_utils",
        "description": "Utils.plot_utils",
        "isExtraImport": true,
        "detail": "Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "PlotUtils",
        "importPath": "Utils.plot_utils",
        "description": "Utils.plot_utils",
        "isExtraImport": true,
        "detail": "Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pymysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymysql",
        "description": "pymysql",
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "pymysql.cursors",
        "description": "pymysql.cursors",
        "isExtraImport": true,
        "detail": "pymysql.cursors",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "BayesianRidge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "GaussianNB",
        "importPath": "sklearn.naive_bayes",
        "description": "sklearn.naive_bayes",
        "isExtraImport": true,
        "detail": "sklearn.naive_bayes",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "DataUtils",
        "importPath": "Utils.data_utils",
        "description": "Utils.data_utils",
        "isExtraImport": true,
        "detail": "Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "AnalysisController",
        "importPath": "Controller.analysis_controller",
        "description": "Controller.analysis_controller",
        "isExtraImport": true,
        "detail": "Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "AnalysisController",
        "importPath": "Controller.analysis_controller",
        "description": "Controller.analysis_controller",
        "isExtraImport": true,
        "detail": "Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "route",
        "importPath": "Routes.analysis_url",
        "description": "Routes.analysis_url",
        "isExtraImport": true,
        "detail": "Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "importPath": "Decorators.Login_Analysis",
        "description": "Decorators.Login_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisController",
        "kind": 6,
        "importPath": "Controller.analysis_controller",
        "description": "Controller.analysis_controller",
        "peekOfCode": "class AnalysisController:\n    def __init__(self):\n        self.data_loader = DataLoader()\n        self.data_processor = DataProcessor()\n        self.plot_utils = PlotUtils()\n    @logger_analysis\n    def perform_descriptive_analysis(self):\n        \"\"\"\n        Performs descriptive analysis on loaded data.\n        \"\"\"",
        "detail": "Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "kind": 2,
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "peekOfCode": "def logger_analysis(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator to log function calls with arguments, results, and nested function calls.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        logger.debug(f'Calling the {func.__name__} with args {args} and kwargs {kwargs}')\n        try:\n            result: Any = func(*args, **kwargs)\n            logger.debug(f'{func.__name__} returned {result}')",
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "create_db",
        "kind": 2,
        "importPath": "Decorators.Login_Analysis",
        "description": "Decorators.Login_Analysis",
        "peekOfCode": "def create_db():\n    \"\"\"\n    Creates the database if it does not exist.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root'\n    )\n    try:",
        "detail": "Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "Decorators.Login_Analysis",
        "description": "Decorators.Login_Analysis",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Establishes and returns a connection to the MySQL database.\n    :return: Connection object to the MySQL database.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root',\n        database='analysis_login',",
        "detail": "Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "Decorators.Login_Analysis",
        "description": "Decorators.Login_Analysis",
        "peekOfCode": "def initialize_db():\n    \"\"\"\n    Initializes the database by creating the necessary tables if they do not exist.\n    \"\"\"\n    create_db()  # Create the database first\n    connection = get_db_connection()\n    try:\n        with connection.cursor() as cursor:\n            # Create accounts table\n            cursor.execute(\"\"\"",
        "detail": "Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "kind": 2,
        "importPath": "Decorators.Login_Analysis",
        "description": "Decorators.Login_Analysis",
        "peekOfCode": "def analysis_login_system(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator that checks if the user is logged in before calling the decorated function.\n    Args:\n        func: The function to decorate.\n    Returns: the main function to execute the code\n    \"\"\"\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        choice = input(\"Do you want to sign-in or signup or exit: \")\n        while True:",
        "detail": "Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "kind": 6,
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "peekOfCode": "class DataLoader:\n    def __init__(self, file_path='Data/fitness_tracker_dataset.csv'):\n        self.file_path = file_path\n    @logger_analysis\n    def load_data(self):\n        try:\n            # Get the number of rows in the file\n            with open(self.file_path, 'r') as f:\n                total_rows = sum(1 for line in f) - 1  # Subtract 1 for header\n            # Load CSV into pandas DataFrame with progress bar",
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "kind": 6,
        "importPath": "Models.data_processor",
        "description": "Models.data_processor",
        "peekOfCode": "class DataProcessor:\n    def __init__(self):\n        self.plot_utils = PlotUtils()\n        self.data_utils = DataUtils()\n        self.steps_model = None\n        self.hr_model = None\n        self.mood_model = None\n        self.label_encoders = {}\n    @logger_analysis\n    def load_data(self):",
        "detail": "Models.data_processor",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "Routes.analysis_url",
        "description": "Routes.analysis_url",
        "peekOfCode": "def route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    Args:\n        url (str): The URL to route.\n        *args: Variable length arguments to pass to the view function.\n        **kwargs: Variable keyword arguments to pass to the view function.\n    Raises:\n        Exception: If the URL is not found.\n    Returns:",
        "detail": "Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "DataUtils",
        "kind": 6,
        "importPath": "Utils.data_utils",
        "description": "Utils.data_utils",
        "peekOfCode": "class DataUtils:\n    def __init__(self):\n        pass\n    @logger_analysis\n    def preprocess_data(self, data):\n        # Example: Data preprocessing steps\n        # Convert date column to datetime format\n        data['date'] = pd.to_datetime(data['date'])\n        # Handle missing values (if any)\n        data.fillna(0, inplace=True)  # Replace NaN with 0 (this is a simplistic example)",
        "detail": "Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "PlotUtils",
        "kind": 6,
        "importPath": "Utils.plot_utils",
        "description": "Utils.plot_utils",
        "peekOfCode": "class PlotUtils:\n    def __init__(self):\n        # Optionally, you can initialize settings for plotting here\n        pass\n    @logger_analysis\n    def plot_histogram(self, data, column):\n        plt.figure(figsize=(8, 6))\n        sns.histplot(data[column], kde=True)\n        plt.title(f'Histogram of {column}')\n        plt.xlabel(column)",
        "detail": "Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "Interface",
        "kind": 6,
        "importPath": "main_interface",
        "description": "main_interface",
        "peekOfCode": "class Interface:\n    def __init__(self):\n        self.controller = AnalysisController()\n    @logger_analysis\n    def display_menu(self):\n        print(\"\\nWelcome to Data Analysis Application\")\n        print(\"===================================\")\n        print(\"/descriptive for descriptive analysis\")\n        print(\"/comparative for comparative analysis\")\n        print(\"/temporal for temporal analysis\")",
        "detail": "main_interface",
        "documentation": {}
    }
]