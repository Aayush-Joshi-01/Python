[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "importPath": "Titanic_Analysis.load_data",
        "description": "Titanic_Analysis.load_data",
        "isExtraImport": true,
        "detail": "Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "Survival_Controller",
        "importPath": "Titanic_Controllers.survival_controller",
        "description": "Titanic_Controllers.survival_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.survival_controller",
        "documentation": {}
    },
    {
        "label": "Demographic_Controller",
        "importPath": "Titanic_Controllers.demographic_controller",
        "description": "Titanic_Controllers.demographic_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.demographic_controller",
        "documentation": {}
    },
    {
        "label": "Financial_Controller",
        "importPath": "Titanic_Controllers.financial_controller",
        "description": "Titanic_Controllers.financial_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.financial_controller",
        "documentation": {}
    },
    {
        "label": "Class_Controller",
        "importPath": "Titanic_Controllers.class_controller",
        "description": "Titanic_Controllers.class_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.class_controller",
        "documentation": {}
    },
    {
        "label": "Additional_Controller",
        "importPath": "Titanic_Controllers.additional_controller",
        "description": "Titanic_Controllers.additional_controller",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.additional_controller",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "C_Survival",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Demographic",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Financial",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Class",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Additional",
        "importPath": "Titanic_Controllers.route_controllers",
        "description": "Titanic_Controllers.route_controllers",
        "isExtraImport": true,
        "detail": "Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "route",
        "importPath": "Titanic_routes.url",
        "description": "Titanic_routes.url",
        "isExtraImport": true,
        "detail": "Titanic_routes.url",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "Models.data_loader",
        "description": "Models.data_loader",
        "isExtraImport": true,
        "detail": "Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "Models.data_processor",
        "description": "Models.data_processor",
        "isExtraImport": true,
        "detail": "Models.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "Models.data_processor",
        "description": "Models.data_processor",
        "isExtraImport": true,
        "detail": "Models.data_processor",
        "documentation": {}
    },
    {
        "label": "PlotUtils",
        "importPath": "Utils.plot_utils",
        "description": "Utils.plot_utils",
        "isExtraImport": true,
        "detail": "Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "PlotUtils",
        "importPath": "Utils.plot_utils",
        "description": "Utils.plot_utils",
        "isExtraImport": true,
        "detail": "Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "importPath": "Decorators.Logger_Analysis",
        "description": "Decorators.Logger_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "pymysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymysql",
        "description": "pymysql",
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "pymysql.cursors",
        "description": "pymysql.cursors",
        "isExtraImport": true,
        "detail": "pymysql.cursors",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "pymysql.cursors",
        "description": "pymysql.cursors",
        "isExtraImport": true,
        "detail": "pymysql.cursors",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BayesianRidge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "GaussianNB",
        "importPath": "sklearn.naive_bayes",
        "description": "sklearn.naive_bayes",
        "isExtraImport": true,
        "detail": "sklearn.naive_bayes",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "DataUtils",
        "importPath": "Utils.data_utils",
        "description": "Utils.data_utils",
        "isExtraImport": true,
        "detail": "Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "clean_data",
        "importPath": "Utils.data_utils",
        "description": "Utils.data_utils",
        "isExtraImport": true,
        "detail": "Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "generate_random_scores",
        "importPath": "Utils.data_utils",
        "description": "Utils.data_utils",
        "isExtraImport": true,
        "detail": "Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "AnalysisController",
        "importPath": "Controller.analysis_controller",
        "description": "Controller.analysis_controller",
        "isExtraImport": true,
        "detail": "Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "AnalysisController",
        "importPath": "Controller.analysis_controller",
        "description": "Controller.analysis_controller",
        "isExtraImport": true,
        "detail": "Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "DataProcessorController",
        "importPath": "Controller.analysis_controller",
        "description": "Controller.analysis_controller",
        "isExtraImport": true,
        "detail": "Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "route",
        "importPath": "Routes.analysis_url",
        "description": "Routes.analysis_url",
        "isExtraImport": true,
        "detail": "Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "route",
        "importPath": "Routes.analysis_url",
        "description": "Routes.analysis_url",
        "isExtraImport": true,
        "detail": "Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "importPath": "Decorators.Login_Analysis",
        "description": "Decorators.Login_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "importPath": "Decorators.Login_Analysis",
        "description": "Decorators.Login_Analysis",
        "isExtraImport": true,
        "detail": "Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "show_data",
        "importPath": "Controller.group_viewer",
        "description": "Controller.group_viewer",
        "isExtraImport": true,
        "detail": "Controller.group_viewer",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "kind": 2,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "peekOfCode": "def data_structuring():\n    data = []\n    # Open the CSV file for reading\n    #\n    #\n    # Insert your own relative path from Titanic_CSV\n    #\n    #\n    with open('/home/user/Python_Training/Week-09/05 July/Prods/Assignment/Project_Titanic_Analysis/Titanic_CSV/titanic3.csv', 'r') as file:\n        read = csv.reader(file)",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "dtype",
        "kind": 5,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "peekOfCode": "dtype = np.dtype([\n    ('pclass', int),  # Passenger class\n    ('survived', int),  # Survival (0 = No, 1 = Yes)\n    ('name', 'U50'),  # Passenger name\n    ('sex', 'U10'),  # Passenger sex\n    ('age', float),  # Passenger age\n    ('sibsp', int),  # Number of siblings/spouses aboard\n    ('parch', int),  # Number of parents/children aboard\n    ('ticket', 'U20'),  # Ticket number\n    ('fare', float),  # Passenger fare",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Analysis.load_data",
        "documentation": {}
    },
    {
        "label": "Additional_Controller",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.additional_controller",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.additional_controller",
        "peekOfCode": "class Additional_Controller:\n    @staticmethod\n    def family_relationships_and_survival(arr: np.ndarray) -> Dict[int, float]:\n        \"\"\"\n        Calculate survival rates based on family relationships (sibsp + parch + 1).\n        \"\"\"\n        family_sizes = arr['sibsp'] + arr['parch'] + 1  # Calculate family sizes for each passenger\n        unique_sizes = np.unique(family_sizes)  # Unique family sizes\n        family_survival: Dict[int, float] = {}\n        for size in unique_sizes:",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.additional_controller",
        "documentation": {}
    },
    {
        "label": "Class_Controller",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.class_controller",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.class_controller",
        "peekOfCode": "class Class_Controller:\n    @staticmethod\n    def passenger_demographics_by_class(arr: np.ndarray) -> Dict[int, Dict[str, Dict[Any, Any] | float]]:\n        \"\"\"\n        Calculate passenger demographics (mean age and sex counts) by passenger class.\n        \"\"\"\n        class_demographics = {}\n        for pclass in np.unique(arr['pclass']):  # Iterate over unique passenger classes\n            mask = arr['pclass'] == pclass  # Mask for passengers in the current class\n            mean_age = np.mean(arr['age'][mask])  # Calculate mean age for this class",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.class_controller",
        "documentation": {}
    },
    {
        "label": "Demographic_Controller",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.demographic_controller",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.demographic_controller",
        "peekOfCode": "class Demographic_Controller:\n    @staticmethod\n    def passenger_count_by_class(arr: np.ndarray) -> Dict[int, int]:\n        \"\"\"\n        Calculate the count of passengers by passenger class.\n        \"\"\"\n        class_counts = np.bincount(arr['pclass'])  # Count occurrences of each passenger class\n        passenger_count_by_class: Dict[int, int] = {}\n        for pclass in np.unique(arr['pclass']):\n            passenger_count_by_class[int(pclass)] = int(class_counts[pclass])",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.demographic_controller",
        "documentation": {}
    },
    {
        "label": "Financial_Controller",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.financial_controller",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.financial_controller",
        "peekOfCode": "class Financial_Controller:\n    @staticmethod\n    def ticket_fare_distribution(arr: np.ndarray) -> None:\n        \"\"\"\n        Plot a histogram showing the distribution of ticket fares.\n        \"\"\"\n        plt.hist(arr['fare'], bins=20, edgecolor='black')  # Plot histogram of ticket fares\n        plt.xlabel('Fare')\n        plt.ylabel('Frequency')\n        plt.title('Ticket Fare Distribution')",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.financial_controller",
        "documentation": {}
    },
    {
        "label": "C_Survival",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Survival:\n    \"\"\"\n    Controller for handling survival-related analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available survival analyses.\"\"\"\n        print(\"\\nSurvival Analysis:\")",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Demographic",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Demographic:\n    \"\"\"\n    Controller for handling demographic-related analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available demographic analyses.\"\"\"\n        print(\"\\nDemographic Analysis:\")",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Financial",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Financial:\n    \"\"\"\n    Controller for handling financial-related analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available financial analyses.\"\"\"\n        print(\"\\nFinancial Analysis:\")",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Class",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Class:\n    \"\"\"\n    Controller for handling class-related analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available class-related analyses.\"\"\"\n        print(\"\\nClass Analysis:\")",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "C_Additional",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "class C_Additional:\n    \"\"\"\n    Controller for handling additional analyses.\n    \"\"\"\n    def __init__(self):\n        self.arr: Any = data_structuring()\n    @staticmethod\n    def routes(url: str) -> None:\n        \"\"\"Interactive method to display available additional analyses.\"\"\"\n        print(\"\\nAdditional Analysis:\")",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "data_structuring",
        "kind": 2,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "def data_structuring():\n    data = []\n    # Open the CSV file for reading\n    #\n    #\n    # Insert your own relative path from Titanic_CSV\n    #\n    #\n    with open('/home/user/Python_Training/Week-09/05 July/Prods/Assignment/Project_Titanic_Analysis/Titanic_CSV/titanic3.csv', 'r') as file:\n        read = csv.reader(file)",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "controller_route",
        "kind": 2,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "def controller_route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    \"\"\"\n    # try:\n    view: Optional[Callable[..., Any]] = urlpatterns_controller.get(url)\n    if view:\n        return view(url, *args, **kwargs)\n    raise Exception(\"404 Not Found\\n\")\n    # except Exception as e:",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "dtype",
        "kind": 5,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "peekOfCode": "dtype = np.dtype([\n    ('pclass', int),  # Passenger class\n    ('survived', int),  # Survival (0 = No, 1 = Yes)\n    ('name', 'U50'),  # Passenger name\n    ('sex', 'U10'),  # Passenger sex\n    ('age', float),  # Passenger age\n    ('sibsp', int),  # Number of siblings/spouses aboard\n    ('parch', int),  # Number of parents/children aboard\n    ('ticket', 'U20'),  # Ticket number\n    ('fare', float),  # Passenger fare",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.route_controllers",
        "documentation": {}
    },
    {
        "label": "Survival_Controller",
        "kind": 6,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.survival_controller",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.survival_controller",
        "peekOfCode": "class Survival_Controller:\n    @staticmethod\n    def overall_survival_rate(arr: np.ndarray) -> float:\n        \"\"\"\n        Calculate the overall survival rate of passengers.\n        \"\"\"\n        survived_count = np.sum(arr['survived'])  # Count of passengers who survived (survived = 1)\n        total_passengers = len(arr)  # Total number of passengers\n        survival_rate = (survived_count / total_passengers) * 100  # Calculate survival rate as a percentage\n        return float(survival_rate)  # Return the survival rate as a float",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Controllers.survival_controller",
        "documentation": {}
    },
    {
        "label": "titanic_logger",
        "kind": 2,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Decorators.log_generator",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Decorators.log_generator",
        "peekOfCode": "def titanic_logger(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator to log function calls with arguments, results, and nested function calls.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        logger.debug(f'Calling the {func.__name__} with args {args} and kwargs {kwargs}')\n        try:\n            result: Any = func(*args, **kwargs)\n            logger.debug(f'{func.__name__} returned {result}')",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_Decorators.log_generator",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_routes.url",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_routes.url",
        "peekOfCode": "def route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    Args:\n        url (str): The URL to route.\n        *args: Variable length arguments to pass to the view function.\n        **kwargs: Variable keyword arguments to pass to the view function.\n    Raises:\n        Exception: If the URL is not found.\n    Returns:",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.Titanic_routes.url",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.interface",
        "description": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.interface",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function to provide a menu-driven interface for Titanic dataset analysis.\n    \"\"\"\n    while True:\n        print(\"\\nTitanic Dataset Analysis Menu:\")\n        print(\"/survival for survival analysis\")\n        print(\"/demographic for demographic analysis\")\n        print(\"/finance for financial analysis\")\n        print(\"/class for class-based analysis\")",
        "detail": "Week-09.05 July.Prods.Assignment.Project_Titanic_Analysis.interface",
        "documentation": {}
    },
    {
        "label": "AnalysisController",
        "kind": 6,
        "importPath": "Week-10.11 July.Project_Analysis.Controller.analysis_controller",
        "description": "Week-10.11 July.Project_Analysis.Controller.analysis_controller",
        "peekOfCode": "class AnalysisController:\n    def __init__(self):\n        self.data_loader = DataLoader()\n        self.data_processor = DataProcessor()\n        self.plot_utils = PlotUtils()\n    @logger_analysis\n    def perform_descriptive_analysis(self):\n        \"\"\"\n        Performs descriptive analysis on loaded data.\n        \"\"\"",
        "detail": "Week-10.11 July.Project_Analysis.Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "logger_analysis",
        "kind": 2,
        "importPath": "Week-10.11 July.Project_Analysis.Decorators.Logger_Analysis",
        "description": "Week-10.11 July.Project_Analysis.Decorators.Logger_Analysis",
        "peekOfCode": "def logger_analysis(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator to log function calls with arguments, results, and nested function calls.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        logger.debug(f'Calling the {func.__name__} with args {args} and kwargs {kwargs}')\n        try:\n            result: Any = func(*args, **kwargs)\n            logger.debug(f'{func.__name__} returned {result}')",
        "detail": "Week-10.11 July.Project_Analysis.Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "create_db",
        "kind": 2,
        "importPath": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "description": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def create_db():\n    \"\"\"\n    Creates the database if it does not exist.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root'\n    )\n    try:",
        "detail": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "description": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Establishes and returns a connection to the MySQL database.\n    :return: Connection object to the MySQL database.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root',\n        database='analysis_login',",
        "detail": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "description": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def initialize_db():\n    \"\"\"\n    Initializes the database by creating the necessary tables if they do not exist.\n    \"\"\"\n    create_db()  # Create the database first\n    connection = get_db_connection()\n    try:\n        with connection.cursor() as cursor:\n            # Create accounts table\n            cursor.execute(\"\"\"",
        "detail": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "kind": 2,
        "importPath": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "description": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def analysis_login_system(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator that checks if the user is logged in before calling the decorated function.\n    Args:\n        func: The function to decorate.\n    Returns: the main function to execute the code\n    \"\"\"\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        choice = input(\"Do you want to sign-in or signup or exit: \")\n        while True:",
        "detail": "Week-10.11 July.Project_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "kind": 6,
        "importPath": "Week-10.11 July.Project_Analysis.Models.data_loader",
        "description": "Week-10.11 July.Project_Analysis.Models.data_loader",
        "peekOfCode": "class DataLoader:\n    def __init__(self, file_path='Data/fitness_tracker_dataset.csv'):\n        self.file_path = file_path\n    @logger_analysis\n    def load_data(self):\n        try:\n            # Get the number of rows in the file\n            with open(self.file_path, 'r') as f:\n                total_rows = sum(1 for line in f) - 1  # Subtract 1 for header\n            # Load CSV into pandas DataFrame with progress bar",
        "detail": "Week-10.11 July.Project_Analysis.Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "kind": 6,
        "importPath": "Week-10.11 July.Project_Analysis.Models.data_processor",
        "description": "Week-10.11 July.Project_Analysis.Models.data_processor",
        "peekOfCode": "class DataProcessor:\n    def __init__(self):\n        self.plot_utils = PlotUtils()\n        self.data_utils = DataUtils()\n        self.steps_model = None\n        self.hr_model = None\n        self.mood_model = None\n        self.label_encoders = {}\n    @logger_analysis\n    def load_data(self):",
        "detail": "Week-10.11 July.Project_Analysis.Models.data_processor",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "Week-10.11 July.Project_Analysis.Routes.analysis_url",
        "description": "Week-10.11 July.Project_Analysis.Routes.analysis_url",
        "peekOfCode": "def route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    Args:\n        url (str): The URL to route.\n        *args: Variable length arguments to pass to the view function.\n        **kwargs: Variable keyword arguments to pass to the view function.\n    Raises:\n        Exception: If the URL is not found.\n    Returns:",
        "detail": "Week-10.11 July.Project_Analysis.Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "DataUtils",
        "kind": 6,
        "importPath": "Week-10.11 July.Project_Analysis.Utils.data_utils",
        "description": "Week-10.11 July.Project_Analysis.Utils.data_utils",
        "peekOfCode": "class DataUtils:\n    def __init__(self):\n        pass\n    @logger_analysis\n    def preprocess_data(self, data):\n        # Example: Data preprocessing steps\n        # Convert date column to datetime format\n        data['date'] = pd.to_datetime(data['date'])\n        # Handle missing values (if any)\n        data.fillna(0, inplace=True)  # Replace NaN with 0 (this is a simplistic example)",
        "detail": "Week-10.11 July.Project_Analysis.Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "PlotUtils",
        "kind": 6,
        "importPath": "Week-10.11 July.Project_Analysis.Utils.plot_utils",
        "description": "Week-10.11 July.Project_Analysis.Utils.plot_utils",
        "peekOfCode": "class PlotUtils:\n    def __init__(self):\n        # Optionally, you can initialize settings for plotting here\n        pass\n    @logger_analysis\n    def plot_histogram(self, data, column):\n        plt.figure(figsize=(8, 6))\n        sns.histplot(data[column], kde=True)\n        plt.title(f'Histogram of {column}')\n        plt.xlabel(column)",
        "detail": "Week-10.11 July.Project_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "Interface",
        "kind": 6,
        "importPath": "Week-10.11 July.Project_Analysis.main_interface",
        "description": "Week-10.11 July.Project_Analysis.main_interface",
        "peekOfCode": "class Interface:\n    def __init__(self):\n        self.controller = AnalysisController()\n    @logger_analysis\n    def display_menu(self):\n        print(\"\\nWelcome to Data Analysis Application\")\n        print(\"===================================\")\n        print(\"/descriptive for descriptive analysis\")\n        print(\"/comparative for comparative analysis\")\n        print(\"/temporal for temporal analysis\")",
        "detail": "Week-10.11 July.Project_Analysis.main_interface",
        "documentation": {}
    },
    {
        "label": "DataProcessorController",
        "kind": 6,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Controller.analysis_controller",
        "description": "Week-11.15 July.Prods.Training_Analysis.Controller.analysis_controller",
        "peekOfCode": "class DataProcessorController:\n    def __init__(self):\n        self.data = None\n        self.model = None\n    @analysis_logger\n    def perform_basic_grouping(self):\n        self.data = DataLoader().load_data()\n        self.model = DataProcessor(self.data)\n        print(\"Performing basic grouping operations...\\n\")\n        grouped_data = self.model.group_by_skill()",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Controller.analysis_controller",
        "documentation": {}
    },
    {
        "label": "show_data",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Controller.group_viewer",
        "description": "Week-11.15 July.Prods.Training_Analysis.Controller.group_viewer",
        "peekOfCode": "def show_data(grouped_data: pd.DataFrame, type_name: str, columns: list[str]=[]) -> None:\n    print(f\"Showing Data Grouped by {type_name}: .... \")\n    print(grouped_data.head().set_index('S.No')[columns])",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Controller.group_viewer",
        "documentation": {}
    },
    {
        "label": "analysis_logger",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Decorators.Logger_Analysis",
        "description": "Week-11.15 July.Prods.Training_Analysis.Decorators.Logger_Analysis",
        "peekOfCode": "def analysis_logger(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator to log function calls with arguments, results, and nested function calls.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        logger.debug(f'Calling the {func.__name__} with args {args} and kwargs {kwargs}')\n        try:\n            result: Any = func(*args, **kwargs)\n            logger.debug(f'{func.__name__} returned {result}')",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Decorators.Logger_Analysis",
        "documentation": {}
    },
    {
        "label": "create_db",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "description": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def create_db():\n    \"\"\"\n    Creates the database if it does not exist.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root'\n    )\n    try:",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "description": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Establishes and returns a connection to the MySQL database.\n    :return: Connection object to the MySQL database.\n    \"\"\"\n    connection = pymysql.connect(\n        host='localhost',\n        user='root',\n        password='root',\n        database='analysis_login',",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "description": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def initialize_db():\n    \"\"\"\n    Initializes the database by creating the necessary tables if they do not exist.\n    \"\"\"\n    create_db()  # Create the database first\n    connection = get_db_connection()\n    try:\n        with connection.cursor() as cursor:\n            # Create accounts table\n            cursor.execute(\"\"\"",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "analysis_login_system",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "description": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "peekOfCode": "def analysis_login_system(func: Callable[..., Any]) -> Callable[..., Any]:\n    \"\"\"\n    A decorator that checks if the user is logged in before calling the decorated function.\n    Args:\n        func: The function to decorate.\n    Returns: the main function to execute the code\n    \"\"\"\n    def wrapper(*args: Any, **kwargs: Any) -> Any:\n        choice = input(\"Do you want to sign-in or signup or exit: \")\n        while True:",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Decorators.Login_Analysis",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "kind": 6,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Models.data_loader",
        "description": "Week-11.15 July.Prods.Training_Analysis.Models.data_loader",
        "peekOfCode": "class DataLoader:\n    def __init__(self, file_path='Data/cleaned_data.csv'):\n        self.file_path = file_path\n    # @analysis_logger\n    def load_data(self):\n        try:\n            # Get the number of rows in the file\n            with open(self.file_path, 'r') as f:\n                total_rows = sum(1 for line in f) - 1  # Subtract 1 for header\n            # Load CSV into pandas DataFrame with progress bar",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Models.data_loader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "kind": 6,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Models.data_processor",
        "description": "Week-11.15 July.Prods.Training_Analysis.Models.data_processor",
        "peekOfCode": "class DataProcessor:\n    def __init__(self, df):\n        self.df = df\n        self.reports_path = 'Reports/'\n    @analysis_logger\n    def save_plot(self, plot_func: Callable, plot_name: str) -> None:\n        if input(f\"Do you want to save the plot '{plot_name}'? (y/n): \").lower() == 'y':\n            plot_dir = os.path.join(self.reports_path, 'Visualizations')\n            os.makedirs(plot_dir, exist_ok=True)\n            plot_path = os.path.join(plot_dir, f\"{plot_name}.png\")",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Models.data_processor",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Routes.analysis_url",
        "description": "Week-11.15 July.Prods.Training_Analysis.Routes.analysis_url",
        "peekOfCode": "def route(url: str, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    Routes a URL to a view function.\n    Args:\n        url (str): The URL to route.\n        *args: Variable length arguments to pass to the view function.\n        **kwargs: Variable keyword arguments to pass to the view function.\n    Raises:\n        Exception: If the URL is not found.\n    Returns:",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Routes.analysis_url",
        "documentation": {}
    },
    {
        "label": "clean_data",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "peekOfCode": "def clean_data(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Cleans the input DataFrame by handling missing values, removing duplicates,\n    standardizing column formats, cleaning skills, and generating random scores.\n    Args:\n        df (pd.DataFrame): The DataFrame to clean.\n    Returns:\n        pd.DataFrame: The cleaned DataFrame.\n    \"\"\"\n    # Remove duplicates",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "generate_random_scores",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "peekOfCode": "def generate_random_scores(df: pd.DataFrame, score_columns: list = ['pre_assessment_score', 'final_score']) -> pd.DataFrame:\n    \"\"\"\n    Generates random scores for specified columns in the DataFrame.\n    Args:\n        df (pd.DataFrame): The DataFrame to update.\n        score_columns (list): List of column names for which to generate random scores.\n    Returns:\n        pd.DataFrame: The updated DataFrame with random scores.\n    \"\"\"\n    for column in score_columns:",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.data_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_competency",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_competency(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.explode('current_skills').groupby('current_skills')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x=grouped.values, y=grouped.index, palette=\"viridis\")\n    plt.xlabel('Count')\n    plt.ylabel('Current Skills')\n    plt.title('Count of Associates by Competency')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_competency.png'))",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_grade",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_grade(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.groupby('grade')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=grouped.index, y=grouped.values, palette=\"viridis\")\n    plt.xlabel('Grade')\n    plt.ylabel('Count')\n    plt.title('Count of Associates by Grade')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_grade.png'))",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_training_status",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_training_status(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.groupby('training_status')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=grouped.index, y=grouped.values, palette=\"viridis\")\n    plt.xlabel('Training Status')\n    plt.ylabel('Count')\n    plt.title('Count of Associates by Training Status')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_training_status.png'))",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_training_type",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_training_type(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.groupby('training_type')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=grouped.index, y=grouped.values, palette=\"viridis\")\n    plt.xlabel('Training Type')\n    plt.ylabel('Count')\n    plt.title('Count of Associates by Training Type')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_training_type.png'))",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_group_by_upgraded_skills",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_group_by_upgraded_skills(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.explode('upgraded_skills').groupby('upgraded_skills')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x=grouped.values, y=grouped.index, palette=\"viridis\")\n    plt.xlabel('Count')\n    plt.ylabel('Upgraded Skills')\n    plt.title('Count of Associates by Upgraded Skills')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'group_by_upgraded_skills.png'))",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_training_record_by_status",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_training_record_by_status(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.groupby('status')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=grouped.index, y=grouped.values, palette=\"viridis\")\n    plt.xlabel('Training Record Status')\n    plt.ylabel('Count')\n    plt.title('Training Record Count by Status')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, 'training_record_by_status.png'))",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "plot_top_performers_by_score",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "def plot_top_performers_by_score(df: pd.DataFrame, score_column: str = 'final_score', save: bool = False) -> None:\n    top_performers = df.sort_values(by=score_column, ascending=False).head(10)\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x=top_performers[score_column], y=top_performers['name'], palette=\"viridis\")\n    plt.xlabel('Score')\n    plt.ylabel('Name')\n    plt.title(f'Top 10 Performers by {score_column.replace(\"_\", \" \").title()}')\n    plt.tight_layout()\n    if save:\n        plt.savefig(os.path.join(visualization_dir, f'top_performers_by_{score_column}.png'))",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "visualization_dir",
        "kind": 5,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "description": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "peekOfCode": "visualization_dir = 'Reports/Visualizations/'\n# Ensure the directory exists\nos.makedirs(visualization_dir, exist_ok=True)\n@analysis_logger\ndef plot_group_by_competency(df: pd.DataFrame, save: bool = False) -> None:\n    grouped = df.explode('current_skills').groupby('current_skills')['name'].count().sort_values(ascending=False)\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x=grouped.values, y=grouped.index, palette=\"viridis\")\n    plt.xlabel('Count')\n    plt.ylabel('Current Skills')",
        "detail": "Week-11.15 July.Prods.Training_Analysis.Utils.plot_utils",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.main_interface",
        "description": "Week-11.15 July.Prods.Training_Analysis.main_interface",
        "peekOfCode": "def menu():\n    print(\"\\nMenu:\")\n    print(\"/grouping for data grouping\")\n    print(\"/adv_grouping for advanced grouping operations\")\n    print(\"/general_report for generating general reports\")\n    print(\"/generate_specific_reports for generating spefic reports\")\n    print(\"/generate_growth_reports for growth reports\")\n    print(\"/exit, /faux, /out, /no to exit the program\")\n@analysis_login_system\n@analysis_logger",
        "detail": "Week-11.15 July.Prods.Training_Analysis.main_interface",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Week-11.15 July.Prods.Training_Analysis.main_interface",
        "description": "Week-11.15 July.Prods.Training_Analysis.main_interface",
        "peekOfCode": "def main():\n    while True:\n        menu()\n        choice = input(\"Enter your choice with /: \")\n        if choice.strip().lower() in [\"exit\", \"out\", \"no\", \"faux\"]:\n            break\n        elif choice.strip().lower() == \"/generate_specific_reports\":\n            status = input(\"Enter status (or leave blank): \")\n            score_column = input(\"Enter score column (or leave blank): \")\n            skill = input(\"Enter skill (or leave blank): \")",
        "detail": "Week-11.15 July.Prods.Training_Analysis.main_interface",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_postinstall",
        "description": "Week-12..venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "Week-12..venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_testall",
        "description": "Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_testall",
        "description": "Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Week-12..venv.Scripts.pywin32_testall",
        "description": "Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_testall",
        "description": "Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_testall",
        "description": "Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "Week-12..venv.Scripts.pywin32_testall",
        "description": "Week-12..venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "Week-12..venv.Scripts.pywin32_testall",
        "documentation": {}
    }
]